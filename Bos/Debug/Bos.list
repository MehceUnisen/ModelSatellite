
Bos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b744  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800b8d0  0800b8d0  0001b8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbc8  0800bbc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbd0  0800bbd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbd0  0800bbd0  0001bbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbd4  0800bbd4  0001bbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bbd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010cc  20000074  0800bc4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001140  0800bc4c  00021140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7ed  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346c  00000000  00000000  0003a891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245e8  00000000  00000000  00040390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188aa  00000000  00000000  00064978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db660  00000000  00000000  0007d222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c14  00000000  00000000  001588d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b8b4 	.word	0x0800b8b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800b8b4 	.word	0x0800b8b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96e 	b.w	8000ec4 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468c      	mov	ip, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8083 	bne.w	8000d16 <__udivmoddi4+0x116>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4617      	mov	r7, r2
 8000c14:	d947      	bls.n	8000ca6 <__udivmoddi4+0xa6>
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	b142      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1c:	f1c2 0020 	rsb	r0, r2, #32
 8000c20:	fa24 f000 	lsr.w	r0, r4, r0
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4097      	lsls	r7, r2
 8000c28:	ea40 0c01 	orr.w	ip, r0, r1
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbbc f6f8 	udiv	r6, ip, r8
 8000c38:	fa1f fe87 	uxth.w	lr, r7
 8000c3c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c44:	fb06 f10e 	mul.w	r1, r6, lr
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c52:	f080 8119 	bcs.w	8000e88 <__udivmoddi4+0x288>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8116 	bls.w	8000e88 <__udivmoddi4+0x288>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	443b      	add	r3, r7
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	193c      	adds	r4, r7, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8105 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f240 8102 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	443c      	add	r4, r7
 8000c8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c90:	eba4 040e 	sub.w	r4, r4, lr
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	b902      	cbnz	r2, 8000caa <__udivmoddi4+0xaa>
 8000ca8:	deff      	udf	#255	; 0xff
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d150      	bne.n	8000d54 <__udivmoddi4+0x154>
 8000cb2:	1bcb      	subs	r3, r1, r7
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	fa1f f887 	uxth.w	r8, r7
 8000cbc:	2601      	movs	r6, #1
 8000cbe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cc2:	0c21      	lsrs	r1, r4, #16
 8000cc4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000cd4:	1879      	adds	r1, r7, r1
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0xe2>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	f200 80e9 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1ac9      	subs	r1, r1, r3
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x10c>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x10a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80d9 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e7bf      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x12e>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	f000 80b1 	beq.w	8000e82 <__udivmoddi4+0x282>
 8000d20:	2600      	movs	r6, #0
 8000d22:	e9c5 0100 	strd	r0, r1, [r5]
 8000d26:	4630      	mov	r0, r6
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f683 	clz	r6, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x1cc>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0x140>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80b8 	bhi.w	8000eb0 <__udivmoddi4+0x2b0>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0103 	sbc.w	r1, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	468c      	mov	ip, r1
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0a8      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000d4e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f603 	lsr.w	r6, r0, r3
 8000d5c:	4097      	lsls	r7, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d66:	40d9      	lsrs	r1, r3
 8000d68:	4330      	orrs	r0, r6
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f108 	mul.w	r1, r6, r8
 8000d80:	4299      	cmp	r1, r3
 8000d82:	fa04 f402 	lsl.w	r4, r4, r2
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x19c>
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d8e:	f080 808d 	bcs.w	8000eac <__udivmoddi4+0x2ac>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 808a 	bls.w	8000eac <__udivmoddi4+0x2ac>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	443b      	add	r3, r7
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b281      	uxth	r1, r0
 8000da0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb00 f308 	mul.w	r3, r0, r8
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x1c4>
 8000db4:	1879      	adds	r1, r7, r1
 8000db6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dba:	d273      	bcs.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d971      	bls.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4439      	add	r1, r7
 8000dc4:	1acb      	subs	r3, r1, r3
 8000dc6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dca:	e778      	b.n	8000cbe <__udivmoddi4+0xbe>
 8000dcc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dde:	fa01 f306 	lsl.w	r3, r1, r6
 8000de2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dea:	431f      	orrs	r7, r3
 8000dec:	0c3b      	lsrs	r3, r7, #16
 8000dee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df2:	fa1f f884 	uxth.w	r8, r4
 8000df6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dfa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfe:	fb09 fa08 	mul.w	sl, r9, r8
 8000e02:	458a      	cmp	sl, r1
 8000e04:	fa02 f206 	lsl.w	r2, r2, r6
 8000e08:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x220>
 8000e0e:	1861      	adds	r1, r4, r1
 8000e10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e14:	d248      	bcs.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e16:	458a      	cmp	sl, r1
 8000e18:	d946      	bls.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1e:	4421      	add	r1, r4
 8000e20:	eba1 010a 	sub.w	r1, r1, sl
 8000e24:	b2bf      	uxth	r7, r7
 8000e26:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e2a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e32:	fb00 f808 	mul.w	r8, r0, r8
 8000e36:	45b8      	cmp	r8, r7
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x24a>
 8000e3a:	19e7      	adds	r7, r4, r7
 8000e3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e40:	d22e      	bcs.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d92c      	bls.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4427      	add	r7, r4
 8000e4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4e:	eba7 0708 	sub.w	r7, r7, r8
 8000e52:	fba0 8902 	umull	r8, r9, r0, r2
 8000e56:	454f      	cmp	r7, r9
 8000e58:	46c6      	mov	lr, r8
 8000e5a:	4649      	mov	r1, r9
 8000e5c:	d31a      	bcc.n	8000e94 <__udivmoddi4+0x294>
 8000e5e:	d017      	beq.n	8000e90 <__udivmoddi4+0x290>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x27a>
 8000e62:	ebb3 020e 	subs.w	r2, r3, lr
 8000e66:	eb67 0701 	sbc.w	r7, r7, r1
 8000e6a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6e:	40f2      	lsrs	r2, r6
 8000e70:	ea4c 0202 	orr.w	r2, ip, r2
 8000e74:	40f7      	lsrs	r7, r6
 8000e76:	e9c5 2700 	strd	r2, r7, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	462e      	mov	r6, r5
 8000e84:	4628      	mov	r0, r5
 8000e86:	e70b      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fd      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e90:	4543      	cmp	r3, r8
 8000e92:	d2e5      	bcs.n	8000e60 <__udivmoddi4+0x260>
 8000e94:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e98:	eb69 0104 	sbc.w	r1, r9, r4
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	e7df      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e7d2      	b.n	8000e4a <__udivmoddi4+0x24a>
 8000ea4:	4660      	mov	r0, ip
 8000ea6:	e78d      	b.n	8000dc4 <__udivmoddi4+0x1c4>
 8000ea8:	4681      	mov	r9, r0
 8000eaa:	e7b9      	b.n	8000e20 <__udivmoddi4+0x220>
 8000eac:	4666      	mov	r6, ip
 8000eae:	e775      	b.n	8000d9c <__udivmoddi4+0x19c>
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e74a      	b.n	8000d4a <__udivmoddi4+0x14a>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	4439      	add	r1, r7
 8000eba:	e713      	b.n	8000ce4 <__udivmoddi4+0xe4>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	443c      	add	r4, r7
 8000ec0:	e724      	b.n	8000d0c <__udivmoddi4+0x10c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <AESK_UINT16toUINT8_LE>:
 *  		dizi[0] = 0x55;
 *  		dizi[1] = 0x45;
 *  		fonksiyonun ��k��� yukar�da g�sterildi�i gibi olur.
 */
void AESK_UINT16toUINT8_LE(uint16_t *packData, uint8_t *packBuf, uint16_t *index)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 1] = ((uint8_t*)packData)[1];
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	4413      	add	r3, r2
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	7852      	ldrb	r2, [r2, #1]
 8000ef2:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(uint16_t);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	3302      	adds	r3, #2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	801a      	strh	r2, [r3, #0]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <AESK_UINT32toUINT8_LE>:
 *  		dizi[2] = 0x55;
 *  		dizi[3] = 0x45;
 *  		fonksiyonun ��k��� yukar�da g�sterildi�i gibi olur.
 */
void AESK_UINT32toUINT8_LE(uint32_t *packData, uint8_t *packBuf, uint16_t *index)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	4413      	add	r3, r2
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 1] = ((uint8_t*)packData)[1];
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	4413      	add	r3, r2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	7852      	ldrb	r2, [r2, #1]
 8000f36:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 2] = ((uint8_t*)packData)[2];
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	4413      	add	r3, r2
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	7892      	ldrb	r2, [r2, #2]
 8000f46:	701a      	strb	r2, [r3, #0]
	packBuf[(*index) + 3] = ((uint8_t*)packData)[3];
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	4413      	add	r3, r2
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	78d2      	ldrb	r2, [r2, #3]
 8000f56:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(uint32_t);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	801a      	strh	r2, [r3, #0]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <AESK_UINT8toUINT8_LE>:

	*index = *index + sizeof(uint64_t);
}

void AESK_UINT8toUINT8_LE(uint8_t *packData, uint8_t *packBuf, uint16_t *index)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	packBuf[*index] = ((uint8_t*)packData)[0];
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	701a      	strb	r2, [r3, #0]

	*index = *index + sizeof(uint8_t);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	801a      	strh	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <Uart_DMA_Receive_Start>:
 *      Author: basri
 */
#include "AESK_UART_STM32.h"

void Uart_DMA_Receive_Start(UART_HandleTypeDef *huart, USART_Buffer *usart_buffer)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < sizeof(USART_Buffer); i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	81fb      	strh	r3, [r7, #14]
 8000fb2:	e007      	b.n	8000fc4 <Uart_DMA_Receive_Start+0x20>
	{
		((uint8_t*)usart_buffer)[i] = 0;
 8000fb4:	89fb      	ldrh	r3, [r7, #14]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < sizeof(USART_Buffer); i++)
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	81fb      	strh	r3, [r7, #14]
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	f240 4201 	movw	r2, #1025	; 0x401
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d9f2      	bls.n	8000fb4 <Uart_DMA_Receive_Start+0x10>
	}


	 while(HAL_UART_Receive_DMA(huart, usart_buffer->usart_receive_buffer, USART_BUFFER_SIZE) != HAL_OK);
 8000fce:	bf00      	nop
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f007 fded 	bl	8008bb8 <HAL_UART_Receive_DMA>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f5      	bne.n	8000fd0 <Uart_DMA_Receive_Start+0x2c>
	__HAL_UART_CLEAR_PEFLAG(huart);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]

}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <read_DMA_Buffer>:

int16_t read_DMA_Buffer(UART_HandleTypeDef *huart, USART_Buffer *usart_buffer, uint8_t *temp_buf)
{
 8001002:	b480      	push	{r7}
 8001004:	b087      	sub	sp, #28
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
	int16_t read_byte = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	82fb      	strh	r3, [r7, #22]
	    read_byte = huart->RxXferSize - huart->hdmarx->Instance->NDTR - usart_buffer->tail;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	b29b      	uxth	r3, r3
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b29a      	uxth	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	82fb      	strh	r3, [r7, #22]

	    if(read_byte == 0)
 8001030:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <read_DMA_Buffer+0x3c>
	    {
	    	return read_byte;
 8001038:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800103c:	e033      	b.n	80010a6 <read_DMA_Buffer+0xa4>
	    }

	    else
		{
	    	if(read_byte < 0)
 800103e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001042:	2b00      	cmp	r3, #0
 8001044:	da05      	bge.n	8001052 <read_DMA_Buffer+0x50>
	    	{
	    		read_byte = read_byte + huart->RxXferSize;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800104a:	8afb      	ldrh	r3, [r7, #22]
 800104c:	4413      	add	r3, r2
 800104e:	b29b      	uxth	r3, r3
 8001050:	82fb      	strh	r3, [r7, #22]
	    	}

	    	for(uint16_t i = 0; i < read_byte; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	82bb      	strh	r3, [r7, #20]
 8001056:	e01f      	b.n	8001098 <read_DMA_Buffer+0x96>
	    	{
	    		temp_buf[i] = usart_buffer->usart_receive_buffer[usart_buffer->tail];
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800105e:	4619      	mov	r1, r3
 8001060:	8abb      	ldrh	r3, [r7, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	5c52      	ldrb	r2, [r2, r1]
 800106a:	701a      	strb	r2, [r3, #0]
	    		usart_buffer->tail++;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001072:	3301      	adds	r3, #1
 8001074:	b29a      	uxth	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
				if(usart_buffer->tail >= huart->RxXferSize)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001086:	429a      	cmp	r2, r3
 8001088:	d303      	bcc.n	8001092 <read_DMA_Buffer+0x90>
				{
					usart_buffer->tail = 0;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2200      	movs	r2, #0
 800108e:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	    	for(uint16_t i = 0; i < read_byte; i++)
 8001092:	8abb      	ldrh	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	82bb      	strh	r3, [r7, #20]
 8001098:	8aba      	ldrh	r2, [r7, #20]
 800109a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dbda      	blt.n	8001058 <read_DMA_Buffer+0x56>
				}
	    	}
	    	return read_byte;
 80010a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
		}
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_UART_TxCpltCallback>:

	write_DMA_Buffer(huart, temp_buf, idx);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	HAL_UART_DMA_Tx_Stop(huart);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f804 	bl	80010c8 <HAL_UART_DMA_Tx_Stop>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_UART_DMA_Tx_Stop>:

HAL_StatusTypeDef HAL_UART_DMA_Tx_Stop(UART_HandleTypeDef *huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
uint32_t dmarequest = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	2b80      	cmp	r3, #128	; 0x80
 80010e0:	bf0c      	ite	eq
 80010e2:	2301      	moveq	r3, #1
 80010e4:	2300      	movne	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	60fb      	str	r3, [r7, #12]
if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b21      	cmp	r3, #33	; 0x21
 80010f4:	d121      	bne.n	800113a <HAL_UART_DMA_Tx_Stop+0x72>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01e      	beq.n	800113a <HAL_UART_DMA_Tx_Stop+0x72>
{
CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800110a:	615a      	str	r2, [r3, #20]

/* Abort the UART DMA Tx channel */
if(huart->hdmatx != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <HAL_UART_DMA_Tx_Stop+0x56>
{
  HAL_DMA_Abort(huart->hdmatx);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	4618      	mov	r0, r3
 800111a:	f004 f9a5 	bl	8005468 <HAL_DMA_Abort>
}
//UART_EndTxTransfer(huart);
	  /* Disable TXEIE and TCIE interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800112c:	60da      	str	r2, [r3, #12]
	huart->gState = HAL_UART_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_UART_DMA_Tx_Stop+0x74>
}
else return HAL_ERROR;
 800113a:	2301      	movs	r3, #1

}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <BMP180_Config>:
#include "math.h"
extern I2C_HandleTypeDef hi2c1;
uint8_t oss;

void BMP180_Config(BMP_ConfigTypeDef *config)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	oss = config->Over_Sample_Setting;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <BMP180_Config+0x1c>)
 8001152:	701a      	strb	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20000cd4 	.word	0x20000cd4

08001164 <BMP180_Get_Cal>:

void BMP180_Get_Cal()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af04      	add	r7, sp, #16
	uint8_t Cal_Data[22] = {0};
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	821a      	strh	r2, [r3, #16]
	HAL_I2C_Mem_Read(&hi2c1, BMP180_I2C_ADDRESS, BMP180_CALIB_ADDRESS, 1, Cal_Data, 22, HAL_MAX_DELAY);
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2316      	movs	r3, #22
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	463b      	mov	r3, r7
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	22aa      	movs	r2, #170	; 0xaa
 800118e:	21ee      	movs	r1, #238	; 0xee
 8001190:	4836      	ldr	r0, [pc, #216]	; (800126c <BMP180_Get_Cal+0x108>)
 8001192:	f005 fb5b 	bl	800684c <HAL_I2C_Mem_Read>
	cal.AC1 = ((Cal_Data[0] << 8) | Cal_Data[1]);
 8001196:	783b      	ldrb	r3, [r7, #0]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <BMP180_Get_Cal+0x10c>)
 80011a6:	801a      	strh	r2, [r3, #0]
	cal.AC2 = ((Cal_Data[2] << 8) | Cal_Data[3]);
 80011a8:	78bb      	ldrb	r3, [r7, #2]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <BMP180_Get_Cal+0x10c>)
 80011b8:	805a      	strh	r2, [r3, #2]
	cal.AC3 = ((Cal_Data[4] << 8) | Cal_Data[5]);
 80011ba:	793b      	ldrb	r3, [r7, #4]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <BMP180_Get_Cal+0x10c>)
 80011ca:	809a      	strh	r2, [r3, #4]
	cal.AC4 = ((Cal_Data[6] << 8) | Cal_Data[7]);
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <BMP180_Get_Cal+0x10c>)
 80011de:	80da      	strh	r2, [r3, #6]
	cal.AC5 = ((Cal_Data[8] << 8) | Cal_Data[9]);
 80011e0:	7a3b      	ldrb	r3, [r7, #8]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	7a7b      	ldrb	r3, [r7, #9]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <BMP180_Get_Cal+0x10c>)
 80011f2:	811a      	strh	r2, [r3, #8]
	cal.AC6 = ((Cal_Data[10] << 8) | Cal_Data[11]);
 80011f4:	7abb      	ldrb	r3, [r7, #10]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21b      	sxth	r3, r3
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <BMP180_Get_Cal+0x10c>)
 8001206:	815a      	strh	r2, [r3, #10]
	cal.B1  = ((Cal_Data[12] << 8) | Cal_Data[13]);
 8001208:	7b3b      	ldrb	r3, [r7, #12]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	7b7b      	ldrb	r3, [r7, #13]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <BMP180_Get_Cal+0x10c>)
 8001218:	819a      	strh	r2, [r3, #12]
	cal.B2  = ((Cal_Data[14] << 8) | Cal_Data[15]);
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21a      	sxth	r2, r3
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <BMP180_Get_Cal+0x10c>)
 800122a:	81da      	strh	r2, [r3, #14]
	cal.MB  = ((Cal_Data[16] << 8) | Cal_Data[17]);
 800122c:	7c3b      	ldrb	r3, [r7, #16]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	7c7b      	ldrb	r3, [r7, #17]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <BMP180_Get_Cal+0x10c>)
 800123c:	821a      	strh	r2, [r3, #16]
	cal.MC  = ((Cal_Data[18] << 8) | Cal_Data[19]);
 800123e:	7cbb      	ldrb	r3, [r7, #18]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7cfb      	ldrb	r3, [r7, #19]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <BMP180_Get_Cal+0x10c>)
 800124e:	825a      	strh	r2, [r3, #18]
	cal.MD  = ((Cal_Data[20] << 8) | Cal_Data[21]);
 8001250:	7d3b      	ldrb	r3, [r7, #20]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7d7b      	ldrb	r3, [r7, #21]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <BMP180_Get_Cal+0x10c>)
 8001260:	829a      	strh	r2, [r3, #20]
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000168 	.word	0x20000168
 8001270:	20000c8c 	.word	0x20000c8c
 8001274:	00000000 	.word	0x00000000

08001278 <ZeroPBarometer>:

void ZeroPBarometer(){
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
	uint64_t zeroP = 0;
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(uint16_t i=0;i<SAMPLE_NUM;i++){
 800128a:	2300      	movs	r3, #0
 800128c:	80fb      	strh	r3, [r7, #6]
 800128e:	e015      	b.n	80012bc <ZeroPBarometer+0x44>
		BMP180_Set_PressRaw_Data();
 8001290:	f000 fc94 	bl	8001bbc <BMP180_Set_PressRaw_Data>
		HAL_Delay(5);
 8001294:	2005      	movs	r0, #5
 8001296:	f003 fae5 	bl	8004864 <HAL_Delay>
		BMP180_Get_PressRaw_Data();
 800129a:	f000 fcaf 	bl	8001bfc <BMP180_Get_PressRaw_Data>
		zeroP += raw.pressure;
 800129e:	4bca      	ldr	r3, [pc, #808]	; (80015c8 <ZeroPBarometer+0x350>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	461a      	mov	r2, r3
 80012a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ac:	1884      	adds	r4, r0, r2
 80012ae:	eb41 0503 	adc.w	r5, r1, r3
 80012b2:	e9c7 4502 	strd	r4, r5, [r7, #8]
	for(uint16_t i=0;i<SAMPLE_NUM;i++){
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	3301      	adds	r3, #1
 80012ba:	80fb      	strh	r3, [r7, #6]
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012c2:	d3e5      	bcc.n	8001290 <ZeroPBarometer+0x18>
	}
	zeroP /= SAMPLE_NUM;
 80012c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	f7ff fc7e 	bl	8000bd0 <__aeabi_uldivmod>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	BMP180_Set_TempRaw_Data();
 80012dc:	f000 fa1c 	bl	8001718 <BMP180_Set_TempRaw_Data>
	HAL_Delay(5);
 80012e0:	2005      	movs	r0, #5
 80012e2:	f003 fabf 	bl	8004864 <HAL_Delay>
	BMP180_Get_TempRaw_Data();
 80012e6:	f000 fa2f 	bl	8001748 <BMP180_Get_TempRaw_Data>
	X1 = ((raw.temperature-cal.AC6) * (cal.AC5/(pow(2,15))));
 80012ea:	4bb7      	ldr	r3, [pc, #732]	; (80015c8 <ZeroPBarometer+0x350>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4ab7      	ldr	r2, [pc, #732]	; (80015cc <ZeroPBarometer+0x354>)
 80012f0:	8952      	ldrh	r2, [r2, #10]
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8b9 	bl	800046c <__aeabi_i2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
 80012fe:	4bb3      	ldr	r3, [pc, #716]	; (80015cc <ZeroPBarometer+0x354>)
 8001300:	891b      	ldrh	r3, [r3, #8]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8b2 	bl	800046c <__aeabi_i2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4bb0      	ldr	r3, [pc, #704]	; (80015d0 <ZeroPBarometer+0x358>)
 800130e:	f7ff fa41 	bl	8000794 <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7ff f911 	bl	8000540 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fbbb 	bl	8000aa0 <__aeabi_d2iz>
 800132a:	4603      	mov	r3, r0
 800132c:	4aa9      	ldr	r2, [pc, #676]	; (80015d4 <ZeroPBarometer+0x35c>)
 800132e:	6013      	str	r3, [r2, #0]
	X2 = ((cal.MC * (pow(2,11))) / (X1 + cal.MD));
 8001330:	4ba6      	ldr	r3, [pc, #664]	; (80015cc <ZeroPBarometer+0x354>)
 8001332:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f898 	bl	800046c <__aeabi_i2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4ba5      	ldr	r3, [pc, #660]	; (80015d8 <ZeroPBarometer+0x360>)
 8001342:	f7ff f8fd 	bl	8000540 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4614      	mov	r4, r2
 800134c:	461d      	mov	r5, r3
 800134e:	4b9f      	ldr	r3, [pc, #636]	; (80015cc <ZeroPBarometer+0x354>)
 8001350:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001354:	461a      	mov	r2, r3
 8001356:	4b9f      	ldr	r3, [pc, #636]	; (80015d4 <ZeroPBarometer+0x35c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f885 	bl	800046c <__aeabi_i2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4620      	mov	r0, r4
 8001368:	4629      	mov	r1, r5
 800136a:	f7ff fa13 	bl	8000794 <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fb93 	bl	8000aa0 <__aeabi_d2iz>
 800137a:	4603      	mov	r3, r0
 800137c:	4a97      	ldr	r2, [pc, #604]	; (80015dc <ZeroPBarometer+0x364>)
 800137e:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8001380:	4b94      	ldr	r3, [pc, #592]	; (80015d4 <ZeroPBarometer+0x35c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b95      	ldr	r3, [pc, #596]	; (80015dc <ZeroPBarometer+0x364>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	4a95      	ldr	r2, [pc, #596]	; (80015e0 <ZeroPBarometer+0x368>)
 800138c:	6013      	str	r3, [r2, #0]
	bmp180.Temperature = ((B5+8) / (pow(2,4))) / 10.0;
 800138e:	4b94      	ldr	r3, [pc, #592]	; (80015e0 <ZeroPBarometer+0x368>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3308      	adds	r3, #8
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f869 	bl	800046c <__aeabi_i2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <ZeroPBarometer+0x36c>)
 80013a0:	f7ff f9f8 	bl	8000794 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b8d      	ldr	r3, [pc, #564]	; (80015e8 <ZeroPBarometer+0x370>)
 80013b2:	f7ff f9ef 	bl	8000794 <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbb7 	bl	8000b30 <__aeabi_d2f>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a89      	ldr	r2, [pc, #548]	; (80015ec <ZeroPBarometer+0x374>)
 80013c6:	6013      	str	r3, [r2, #0]
	B6 = B5 - 4000;
 80013c8:	4b85      	ldr	r3, [pc, #532]	; (80015e0 <ZeroPBarometer+0x368>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013d0:	4a87      	ldr	r2, [pc, #540]	; (80015f0 <ZeroPBarometer+0x378>)
 80013d2:	6013      	str	r3, [r2, #0]
	X1 = (cal.B2 * (pow(B6,2) / (pow(2,12)))) / (pow(2,11));
 80013d4:	4b7d      	ldr	r3, [pc, #500]	; (80015cc <ZeroPBarometer+0x354>)
 80013d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f846 	bl	800046c <__aeabi_i2d>
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
 80013e4:	4b82      	ldr	r3, [pc, #520]	; (80015f0 <ZeroPBarometer+0x378>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f83f 	bl	800046c <__aeabi_i2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	ed9f 1b73 	vldr	d1, [pc, #460]	; 80015c0 <ZeroPBarometer+0x348>
 80013f6:	ec43 2b10 	vmov	d0, r2, r3
 80013fa:	f008 fa15 	bl	8009828 <pow>
 80013fe:	ec51 0b10 	vmov	r0, r1, d0
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <ZeroPBarometer+0x37c>)
 8001408:	f7ff f9c4 	bl	8000794 <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4620      	mov	r0, r4
 8001412:	4629      	mov	r1, r5
 8001414:	f7ff f894 	bl	8000540 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <ZeroPBarometer+0x360>)
 8001426:	f7ff f9b5 	bl	8000794 <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fb35 	bl	8000aa0 <__aeabi_d2iz>
 8001436:	4603      	mov	r3, r0
 8001438:	4a66      	ldr	r2, [pc, #408]	; (80015d4 <ZeroPBarometer+0x35c>)
 800143a:	6013      	str	r3, [r2, #0]
	X2 = cal.AC2 * B6 / (pow(2,11));
 800143c:	4b63      	ldr	r3, [pc, #396]	; (80015cc <ZeroPBarometer+0x354>)
 800143e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001442:	461a      	mov	r2, r3
 8001444:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <ZeroPBarometer+0x378>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	fb03 f302 	mul.w	r3, r3, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f80d 	bl	800046c <__aeabi_i2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <ZeroPBarometer+0x360>)
 8001458:	f7ff f99c 	bl	8000794 <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb1c 	bl	8000aa0 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	4a5c      	ldr	r2, [pc, #368]	; (80015dc <ZeroPBarometer+0x364>)
 800146c:	6013      	str	r3, [r2, #0]
	X3 = X1 + X2;
 800146e:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <ZeroPBarometer+0x35c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <ZeroPBarometer+0x364>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <ZeroPBarometer+0x380>)
 800147a:	6013      	str	r3, [r2, #0]
	B3 = (((cal.AC1 * 4 + X3) << oss) + 2) / 4;
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <ZeroPBarometer+0x354>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	009a      	lsls	r2, r3, #2
 8001484:	4b5c      	ldr	r3, [pc, #368]	; (80015f8 <ZeroPBarometer+0x380>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	4a5c      	ldr	r2, [pc, #368]	; (80015fc <ZeroPBarometer+0x384>)
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	4093      	lsls	r3, r2
 8001490:	3302      	adds	r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	da00      	bge.n	8001498 <ZeroPBarometer+0x220>
 8001496:	3303      	adds	r3, #3
 8001498:	109b      	asrs	r3, r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	4b58      	ldr	r3, [pc, #352]	; (8001600 <ZeroPBarometer+0x388>)
 800149e:	601a      	str	r2, [r3, #0]
	X1 = cal.AC3 * B6 / pow(2,13);
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <ZeroPBarometer+0x354>)
 80014a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <ZeroPBarometer+0x378>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fb03 f302 	mul.w	r3, r3, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ffdb 	bl	800046c <__aeabi_i2d>
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b52      	ldr	r3, [pc, #328]	; (8001604 <ZeroPBarometer+0x38c>)
 80014bc:	f7ff f96a 	bl	8000794 <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff faea 	bl	8000aa0 <__aeabi_d2iz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a41      	ldr	r2, [pc, #260]	; (80015d4 <ZeroPBarometer+0x35c>)
 80014d0:	6013      	str	r3, [r2, #0]
	X2 = (cal.B1 * (pow(B6,2) / (pow(2,12)))) / (pow(2,16));
 80014d2:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <ZeroPBarometer+0x354>)
 80014d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffc7 	bl	800046c <__aeabi_i2d>
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <ZeroPBarometer+0x378>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ffc0 	bl	800046c <__aeabi_i2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	ed9f 1b33 	vldr	d1, [pc, #204]	; 80015c0 <ZeroPBarometer+0x348>
 80014f4:	ec43 2b10 	vmov	d0, r2, r3
 80014f8:	f008 f996 	bl	8009828 <pow>
 80014fc:	ec51 0b10 	vmov	r0, r1, d0
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <ZeroPBarometer+0x37c>)
 8001506:	f7ff f945 	bl	8000794 <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7ff f815 	bl	8000540 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b39      	ldr	r3, [pc, #228]	; (8001608 <ZeroPBarometer+0x390>)
 8001524:	f7ff f936 	bl	8000794 <__aeabi_ddiv>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff fab6 	bl	8000aa0 <__aeabi_d2iz>
 8001534:	4603      	mov	r3, r0
 8001536:	4a29      	ldr	r2, [pc, #164]	; (80015dc <ZeroPBarometer+0x364>)
 8001538:	6013      	str	r3, [r2, #0]
	X3 = ((X1 + X2) + 2) / pow(2,2);
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <ZeroPBarometer+0x35c>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <ZeroPBarometer+0x364>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	3302      	adds	r3, #2
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff90 	bl	800046c <__aeabi_i2d>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <ZeroPBarometer+0x394>)
 8001552:	f7ff f91f 	bl	8000794 <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fa9f 	bl	8000aa0 <__aeabi_d2iz>
 8001562:	4603      	mov	r3, r0
 8001564:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <ZeroPBarometer+0x380>)
 8001566:	6013      	str	r3, [r2, #0]
	B4 = cal.AC4 * (unsigned long)(X3 + 32768) / (pow(2,15));
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <ZeroPBarometer+0x354>)
 800156a:	88db      	ldrh	r3, [r3, #6]
 800156c:	461a      	mov	r2, r3
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <ZeroPBarometer+0x380>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001576:	fb03 f302 	mul.w	r3, r3, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff66 	bl	800044c <__aeabi_ui2d>
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <ZeroPBarometer+0x358>)
 8001586:	f7ff f905 	bl	8000794 <__aeabi_ddiv>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff faad 	bl	8000af0 <__aeabi_d2uiz>
 8001596:	4603      	mov	r3, r0
 8001598:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <ZeroPBarometer+0x398>)
 800159a:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)zeroP - B3) * (50000>>oss);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <ZeroPBarometer+0x388>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	4a15      	ldr	r2, [pc, #84]	; (80015fc <ZeroPBarometer+0x384>)
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	4611      	mov	r1, r2
 80015aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015ae:	410a      	asrs	r2, r1
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <ZeroPBarometer+0x39c>)
 80015b6:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000) bmp180.First_Pressure = (B7*2)/B4;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <ZeroPBarometer+0x39c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	e02c      	b.n	8001618 <ZeroPBarometer+0x3a0>
 80015be:	bf00      	nop
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40000000 	.word	0x40000000
 80015c8:	20000cc4 	.word	0x20000cc4
 80015cc:	20000c8c 	.word	0x20000c8c
 80015d0:	40e00000 	.word	0x40e00000
 80015d4:	20000cbc 	.word	0x20000cbc
 80015d8:	40a00000 	.word	0x40a00000
 80015dc:	20000ca4 	.word	0x20000ca4
 80015e0:	20000cb8 	.word	0x20000cb8
 80015e4:	40300000 	.word	0x40300000
 80015e8:	40240000 	.word	0x40240000
 80015ec:	20000ca8 	.word	0x20000ca8
 80015f0:	20000c88 	.word	0x20000c88
 80015f4:	40b00000 	.word	0x40b00000
 80015f8:	20000cc0 	.word	0x20000cc0
 80015fc:	20000cd4 	.word	0x20000cd4
 8001600:	20000cd8 	.word	0x20000cd8
 8001604:	40c00000 	.word	0x40c00000
 8001608:	40f00000 	.word	0x40f00000
 800160c:	40100000 	.word	0x40100000
 8001610:	20000ccc 	.word	0x20000ccc
 8001614:	20000cd0 	.word	0x20000cd0
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <ZeroPBarometer+0x3ba>
 800161c:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <ZeroPBarometer+0x480>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	005a      	lsls	r2, r3, #1
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <ZeroPBarometer+0x484>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <ZeroPBarometer+0x488>)
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	e009      	b.n	8001646 <ZeroPBarometer+0x3ce>
	else bmp180.First_Pressure  = (B7/B4)*2;
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <ZeroPBarometer+0x480>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <ZeroPBarometer+0x484>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	461a      	mov	r2, r3
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <ZeroPBarometer+0x488>)
 8001644:	609a      	str	r2, [r3, #8]
	X1 = (bmp180.First_Pressure  / (pow(2,8))) * (bmp180.First_Pressure  / (pow(2,8)));
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <ZeroPBarometer+0x488>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff0e 	bl	800046c <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <ZeroPBarometer+0x48c>)
 8001656:	f7ff f89d 	bl	8000794 <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4614      	mov	r4, r2
 8001660:	461d      	mov	r5, r3
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <ZeroPBarometer+0x488>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff00 	bl	800046c <__aeabi_i2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <ZeroPBarometer+0x48c>)
 8001672:	f7ff f88f 	bl	8000794 <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe ff5f 	bl	8000540 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa09 	bl	8000aa0 <__aeabi_d2iz>
 800168e:	4603      	mov	r3, r0
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <ZeroPBarometer+0x490>)
 8001692:	6013      	str	r3, [r2, #0]
	X1 = (X1 * 3038) / (pow(2,16));
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <ZeroPBarometer+0x490>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f640 32de 	movw	r2, #3038	; 0xbde
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fee3 	bl	800046c <__aeabi_i2d>
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <ZeroPBarometer+0x494>)
 80016ac:	f7ff f872 	bl	8000794 <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff f9f2 	bl	8000aa0 <__aeabi_d2iz>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <ZeroPBarometer+0x490>)
 80016c0:	6013      	str	r3, [r2, #0]
	X2 = (-7357 * bmp180.First_Pressure ) / (pow(2,16));
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <ZeroPBarometer+0x488>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <ZeroPBarometer+0x498>)
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fecd 	bl	800046c <__aeabi_i2d>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <ZeroPBarometer+0x494>)
 80016d8:	f7ff f85c 	bl	8000794 <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9dc 	bl	8000aa0 <__aeabi_d2iz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <ZeroPBarometer+0x49c>)
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bdb0      	pop	{r4, r5, r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000cd0 	.word	0x20000cd0
 80016fc:	20000ccc 	.word	0x20000ccc
 8001700:	20000ca8 	.word	0x20000ca8
 8001704:	40700000 	.word	0x40700000
 8001708:	20000cbc 	.word	0x20000cbc
 800170c:	40f00000 	.word	0x40f00000
 8001710:	ffffe343 	.word	0xffffe343
 8001714:	20000ca4 	.word	0x20000ca4

08001718 <BMP180_Set_TempRaw_Data>:

void BMP180_Set_TempRaw_Data()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af04      	add	r7, sp, #16
	uint8_t data = TEMPERATURE;
 800171e:	232e      	movs	r3, #46	; 0x2e
 8001720:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_I2C_ADDRESS, BMP180_CONTROL_REGISTER, 1, &data, 1, HAL_MAX_DELAY);
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	9302      	str	r3, [sp, #8]
 8001728:	2301      	movs	r3, #1
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2301      	movs	r3, #1
 8001732:	22f4      	movs	r2, #244	; 0xf4
 8001734:	21ee      	movs	r1, #238	; 0xee
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <BMP180_Set_TempRaw_Data+0x2c>)
 8001738:	f004 ff8e 	bl	8006658 <HAL_I2C_Mem_Write>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000168 	.word	0x20000168

08001748 <BMP180_Get_TempRaw_Data>:

void BMP180_Get_TempRaw_Data()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af04      	add	r7, sp, #16
	uint8_t Temp_Raw[2];
	HAL_I2C_Mem_Read(&hi2c1, BMP180_I2C_ADDRESS, BMP180_MEASURE_VALUE_MSB, 1, Temp_Raw, 2, HAL_MAX_DELAY);
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2302      	movs	r3, #2
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	22f6      	movs	r2, #246	; 0xf6
 8001760:	21ee      	movs	r1, #238	; 0xee
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <BMP180_Get_TempRaw_Data+0x34>)
 8001764:	f005 f872 	bl	800684c <HAL_I2C_Mem_Read>
	raw.temperature = (Temp_Raw[0]<<8) | Temp_Raw[1];
 8001768:	793b      	ldrb	r3, [r7, #4]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	797a      	ldrb	r2, [r7, #5]
 800176e:	4313      	orrs	r3, r2
 8001770:	4a03      	ldr	r2, [pc, #12]	; (8001780 <BMP180_Get_TempRaw_Data+0x38>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000168 	.word	0x20000168
 8001780:	20000cc4 	.word	0x20000cc4
 8001784:	00000000 	.word	0x00000000

08001788 <BMP180_Get_True_Data>:

void BMP180_Get_True_Data()
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	af00      	add	r7, sp, #0
	X1 = ((raw.temperature-cal.AC6) * (cal.AC5/(pow(2,15))));
 800178c:	4bbe      	ldr	r3, [pc, #760]	; (8001a88 <BMP180_Get_True_Data+0x300>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4abe      	ldr	r2, [pc, #760]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 8001792:	8952      	ldrh	r2, [r2, #10]
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe68 	bl	800046c <__aeabi_i2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	4bba      	ldr	r3, [pc, #744]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 80017a2:	891b      	ldrh	r3, [r3, #8]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe61 	bl	800046c <__aeabi_i2d>
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4bb8      	ldr	r3, [pc, #736]	; (8001a90 <BMP180_Get_True_Data+0x308>)
 80017b0:	f7fe fff0 	bl	8000794 <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7fe fec0 	bl	8000540 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff f96a 	bl	8000aa0 <__aeabi_d2iz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4ab1      	ldr	r2, [pc, #708]	; (8001a94 <BMP180_Get_True_Data+0x30c>)
 80017d0:	6013      	str	r3, [r2, #0]
	X2 = ((cal.MC * (pow(2,11))) / (X1 + cal.MD));
 80017d2:	4bae      	ldr	r3, [pc, #696]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 80017d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe47 	bl	800046c <__aeabi_i2d>
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4bad      	ldr	r3, [pc, #692]	; (8001a98 <BMP180_Get_True_Data+0x310>)
 80017e4:	f7fe feac 	bl	8000540 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4614      	mov	r4, r2
 80017ee:	461d      	mov	r5, r3
 80017f0:	4ba6      	ldr	r3, [pc, #664]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 80017f2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4ba6      	ldr	r3, [pc, #664]	; (8001a94 <BMP180_Get_True_Data+0x30c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe34 	bl	800046c <__aeabi_i2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7fe ffc2 	bl	8000794 <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f942 	bl	8000aa0 <__aeabi_d2iz>
 800181c:	4603      	mov	r3, r0
 800181e:	4a9f      	ldr	r2, [pc, #636]	; (8001a9c <BMP180_Get_True_Data+0x314>)
 8001820:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8001822:	4b9c      	ldr	r3, [pc, #624]	; (8001a94 <BMP180_Get_True_Data+0x30c>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b9d      	ldr	r3, [pc, #628]	; (8001a9c <BMP180_Get_True_Data+0x314>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a9c      	ldr	r2, [pc, #624]	; (8001aa0 <BMP180_Get_True_Data+0x318>)
 800182e:	6013      	str	r3, [r2, #0]
	bmp180.Temperature = ((B5+8) / (pow(2,4))) / 10.0;
 8001830:	4b9b      	ldr	r3, [pc, #620]	; (8001aa0 <BMP180_Get_True_Data+0x318>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3308      	adds	r3, #8
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe18 	bl	800046c <__aeabi_i2d>
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b98      	ldr	r3, [pc, #608]	; (8001aa4 <BMP180_Get_True_Data+0x31c>)
 8001842:	f7fe ffa7 	bl	8000794 <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b95      	ldr	r3, [pc, #596]	; (8001aa8 <BMP180_Get_True_Data+0x320>)
 8001854:	f7fe ff9e 	bl	8000794 <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f966 	bl	8000b30 <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	4a91      	ldr	r2, [pc, #580]	; (8001aac <BMP180_Get_True_Data+0x324>)
 8001868:	6013      	str	r3, [r2, #0]
	B6 = B5 - 4000;
 800186a:	4b8d      	ldr	r3, [pc, #564]	; (8001aa0 <BMP180_Get_True_Data+0x318>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001872:	4a8f      	ldr	r2, [pc, #572]	; (8001ab0 <BMP180_Get_True_Data+0x328>)
 8001874:	6013      	str	r3, [r2, #0]
	X1 = (cal.B2 * (pow(B6,2) / (pow(2,12)))) / (pow(2,11));
 8001876:	4b85      	ldr	r3, [pc, #532]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 8001878:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fdf5 	bl	800046c <__aeabi_i2d>
 8001882:	4604      	mov	r4, r0
 8001884:	460d      	mov	r5, r1
 8001886:	4b8a      	ldr	r3, [pc, #552]	; (8001ab0 <BMP180_Get_True_Data+0x328>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fdee 	bl	800046c <__aeabi_i2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8001a80 <BMP180_Get_True_Data+0x2f8>
 8001898:	ec43 2b10 	vmov	d0, r2, r3
 800189c:	f007 ffc4 	bl	8009828 <pow>
 80018a0:	ec51 0b10 	vmov	r0, r1, d0
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	4b82      	ldr	r3, [pc, #520]	; (8001ab4 <BMP180_Get_True_Data+0x32c>)
 80018aa:	f7fe ff73 	bl	8000794 <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f7fe fe43 	bl	8000540 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <BMP180_Get_True_Data+0x310>)
 80018c8:	f7fe ff64 	bl	8000794 <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f8e4 	bl	8000aa0 <__aeabi_d2iz>
 80018d8:	4603      	mov	r3, r0
 80018da:	4a6e      	ldr	r2, [pc, #440]	; (8001a94 <BMP180_Get_True_Data+0x30c>)
 80018dc:	6013      	str	r3, [r2, #0]
	X2 = cal.AC2 * B6 / (pow(2,11));
 80018de:	4b6b      	ldr	r3, [pc, #428]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 80018e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b72      	ldr	r3, [pc, #456]	; (8001ab0 <BMP180_Get_True_Data+0x328>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	fb03 f302 	mul.w	r3, r3, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fdbc 	bl	800046c <__aeabi_i2d>
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <BMP180_Get_True_Data+0x310>)
 80018fa:	f7fe ff4b 	bl	8000794 <__aeabi_ddiv>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f7ff f8cb 	bl	8000aa0 <__aeabi_d2iz>
 800190a:	4603      	mov	r3, r0
 800190c:	4a63      	ldr	r2, [pc, #396]	; (8001a9c <BMP180_Get_True_Data+0x314>)
 800190e:	6013      	str	r3, [r2, #0]
	X3 = X1 + X2;
 8001910:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <BMP180_Get_True_Data+0x30c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <BMP180_Get_True_Data+0x314>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4413      	add	r3, r2
 800191a:	4a67      	ldr	r2, [pc, #412]	; (8001ab8 <BMP180_Get_True_Data+0x330>)
 800191c:	6013      	str	r3, [r2, #0]
	B3 = (((cal.AC1 * 4 + X3) << oss) + 2) / 4;
 800191e:	4b5b      	ldr	r3, [pc, #364]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 8001920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001924:	009a      	lsls	r2, r3, #2
 8001926:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <BMP180_Get_True_Data+0x330>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a63      	ldr	r2, [pc, #396]	; (8001abc <BMP180_Get_True_Data+0x334>)
 800192e:	7812      	ldrb	r2, [r2, #0]
 8001930:	4093      	lsls	r3, r2
 8001932:	3302      	adds	r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	da00      	bge.n	800193a <BMP180_Get_True_Data+0x1b2>
 8001938:	3303      	adds	r3, #3
 800193a:	109b      	asrs	r3, r3, #2
 800193c:	461a      	mov	r2, r3
 800193e:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <BMP180_Get_True_Data+0x338>)
 8001940:	601a      	str	r2, [r3, #0]
	X1 = cal.AC3 * B6 / pow(2,13);
 8001942:	4b52      	ldr	r3, [pc, #328]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 8001944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001948:	461a      	mov	r2, r3
 800194a:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <BMP180_Get_True_Data+0x328>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fb03 f302 	mul.w	r3, r3, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd8a 	bl	800046c <__aeabi_i2d>
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <BMP180_Get_True_Data+0x33c>)
 800195e:	f7fe ff19 	bl	8000794 <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f899 	bl	8000aa0 <__aeabi_d2iz>
 800196e:	4603      	mov	r3, r0
 8001970:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <BMP180_Get_True_Data+0x30c>)
 8001972:	6013      	str	r3, [r2, #0]
	X2 = (cal.B1 * (pow(B6,2) / (pow(2,12)))) / (pow(2,16));
 8001974:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 8001976:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fd76 	bl	800046c <__aeabi_i2d>
 8001980:	4604      	mov	r4, r0
 8001982:	460d      	mov	r5, r1
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <BMP180_Get_True_Data+0x328>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fd6f 	bl	800046c <__aeabi_i2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001a80 <BMP180_Get_True_Data+0x2f8>
 8001996:	ec43 2b10 	vmov	d0, r2, r3
 800199a:	f007 ff45 	bl	8009828 <pow>
 800199e:	ec51 0b10 	vmov	r0, r1, d0
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <BMP180_Get_True_Data+0x32c>)
 80019a8:	f7fe fef4 	bl	8000794 <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4620      	mov	r0, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	f7fe fdc4 	bl	8000540 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <BMP180_Get_True_Data+0x340>)
 80019c6:	f7fe fee5 	bl	8000794 <__aeabi_ddiv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f865 	bl	8000aa0 <__aeabi_d2iz>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a30      	ldr	r2, [pc, #192]	; (8001a9c <BMP180_Get_True_Data+0x314>)
 80019da:	6013      	str	r3, [r2, #0]
	X3 = ((X1 + X2) + 2) / pow(2,2);
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <BMP180_Get_True_Data+0x30c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <BMP180_Get_True_Data+0x314>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	3302      	adds	r3, #2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd3f 	bl	800046c <__aeabi_i2d>
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b36      	ldr	r3, [pc, #216]	; (8001acc <BMP180_Get_True_Data+0x344>)
 80019f4:	f7fe fece 	bl	8000794 <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f84e 	bl	8000aa0 <__aeabi_d2iz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a2c      	ldr	r2, [pc, #176]	; (8001ab8 <BMP180_Get_True_Data+0x330>)
 8001a08:	6013      	str	r3, [r2, #0]
	B4 = cal.AC4 * (unsigned long)(X3 + 32768) / (pow(2,15));
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <BMP180_Get_True_Data+0x304>)
 8001a0c:	88db      	ldrh	r3, [r3, #6]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <BMP180_Get_True_Data+0x330>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a18:	fb03 f302 	mul.w	r3, r3, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fd15 	bl	800044c <__aeabi_ui2d>
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <BMP180_Get_True_Data+0x308>)
 8001a28:	f7fe feb4 	bl	8000794 <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f85c 	bl	8000af0 <__aeabi_d2uiz>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <BMP180_Get_True_Data+0x348>)
 8001a3c:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)raw.pressure - B3) * (50000>>oss);
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <BMP180_Get_True_Data+0x300>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <BMP180_Get_True_Data+0x338>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <BMP180_Get_True_Data+0x334>)
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a54:	410a      	asrs	r2, r1
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <BMP180_Get_True_Data+0x34c>)
 8001a5c:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000) bmp180.Pressure = (B7*2)/B4;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <BMP180_Get_True_Data+0x34c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db38      	blt.n	8001ad8 <BMP180_Get_True_Data+0x350>
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <BMP180_Get_True_Data+0x34c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	005a      	lsls	r2, r3, #1
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <BMP180_Get_True_Data+0x348>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <BMP180_Get_True_Data+0x324>)
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	e037      	b.n	8001aec <BMP180_Get_True_Data+0x364>
 8001a7c:	f3af 8000 	nop.w
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40000000 	.word	0x40000000
 8001a88:	20000cc4 	.word	0x20000cc4
 8001a8c:	20000c8c 	.word	0x20000c8c
 8001a90:	40e00000 	.word	0x40e00000
 8001a94:	20000cbc 	.word	0x20000cbc
 8001a98:	40a00000 	.word	0x40a00000
 8001a9c:	20000ca4 	.word	0x20000ca4
 8001aa0:	20000cb8 	.word	0x20000cb8
 8001aa4:	40300000 	.word	0x40300000
 8001aa8:	40240000 	.word	0x40240000
 8001aac:	20000ca8 	.word	0x20000ca8
 8001ab0:	20000c88 	.word	0x20000c88
 8001ab4:	40b00000 	.word	0x40b00000
 8001ab8:	20000cc0 	.word	0x20000cc0
 8001abc:	20000cd4 	.word	0x20000cd4
 8001ac0:	20000cd8 	.word	0x20000cd8
 8001ac4:	40c00000 	.word	0x40c00000
 8001ac8:	40f00000 	.word	0x40f00000
 8001acc:	40100000 	.word	0x40100000
 8001ad0:	20000ccc 	.word	0x20000ccc
 8001ad4:	20000cd0 	.word	0x20000cd0
	else bmp180.Pressure  = (B7/B4)*2;
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <BMP180_Get_True_Data+0x414>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <BMP180_Get_True_Data+0x418>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <BMP180_Get_True_Data+0x41c>)
 8001aea:	605a      	str	r2, [r3, #4]
	X1 = (bmp180.Pressure  / (pow(2,8))) * (bmp180.Pressure  / (pow(2,8)));
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <BMP180_Get_True_Data+0x41c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fcbb 	bl	800046c <__aeabi_i2d>
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <BMP180_Get_True_Data+0x420>)
 8001afc:	f7fe fe4a 	bl	8000794 <__aeabi_ddiv>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <BMP180_Get_True_Data+0x41c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fcad 	bl	800046c <__aeabi_i2d>
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <BMP180_Get_True_Data+0x420>)
 8001b18:	f7fe fe3c 	bl	8000794 <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fd0c 	bl	8000540 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7fe ffb6 	bl	8000aa0 <__aeabi_d2iz>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <BMP180_Get_True_Data+0x424>)
 8001b38:	6013      	str	r3, [r2, #0]
	X1 = (X1 * 3038) / (pow(2,16));
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <BMP180_Get_True_Data+0x424>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f640 32de 	movw	r2, #3038	; 0xbde
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fc90 	bl	800046c <__aeabi_i2d>
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <BMP180_Get_True_Data+0x428>)
 8001b52:	f7fe fe1f 	bl	8000794 <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7fe ff9f 	bl	8000aa0 <__aeabi_d2iz>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a11      	ldr	r2, [pc, #68]	; (8001bac <BMP180_Get_True_Data+0x424>)
 8001b66:	6013      	str	r3, [r2, #0]
	X2 = (-7357 * bmp180.Pressure ) / (pow(2,16));
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <BMP180_Get_True_Data+0x41c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <BMP180_Get_True_Data+0x42c>)
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc7a 	bl	800046c <__aeabi_i2d>
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <BMP180_Get_True_Data+0x428>)
 8001b7e:	f7fe fe09 	bl	8000794 <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7fe ff89 	bl	8000aa0 <__aeabi_d2iz>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <BMP180_Get_True_Data+0x430>)
 8001b92:	6013      	str	r3, [r2, #0]
	BMP180_Get_Altitude();
 8001b94:	f000 f864 	bl	8001c60 <BMP180_Get_Altitude>
}
 8001b98:	bf00      	nop
 8001b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9c:	20000cd0 	.word	0x20000cd0
 8001ba0:	20000ccc 	.word	0x20000ccc
 8001ba4:	20000ca8 	.word	0x20000ca8
 8001ba8:	40700000 	.word	0x40700000
 8001bac:	20000cbc 	.word	0x20000cbc
 8001bb0:	40f00000 	.word	0x40f00000
 8001bb4:	ffffe343 	.word	0xffffe343
 8001bb8:	20000ca4 	.word	0x20000ca4

08001bbc <BMP180_Set_PressRaw_Data>:

void BMP180_Set_PressRaw_Data()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af04      	add	r7, sp, #16
	uint8_t data = PRESSURE + (oss << 6);
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <BMP180_Set_PressRaw_Data+0x38>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	019b      	lsls	r3, r3, #6
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	3334      	adds	r3, #52	; 0x34
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_I2C_ADDRESS, BMP180_CONTROL_REGISTER, 1, &data, 1, HAL_MAX_DELAY);
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2301      	movs	r3, #1
 8001be0:	22f4      	movs	r2, #244	; 0xf4
 8001be2:	21ee      	movs	r1, #238	; 0xee
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <BMP180_Set_PressRaw_Data+0x3c>)
 8001be6:	f004 fd37 	bl	8006658 <HAL_I2C_Mem_Write>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000cd4 	.word	0x20000cd4
 8001bf8:	20000168 	.word	0x20000168

08001bfc <BMP180_Get_PressRaw_Data>:

void BMP180_Get_PressRaw_Data()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af04      	add	r7, sp, #16
	uint8_t Press_Raw[3] = {0};
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <BMP180_Get_PressRaw_Data+0x50>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	80bb      	strh	r3, [r7, #4]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, BMP180_I2C_ADDRESS, BMP180_MEASURE_VALUE_MSB, 1, Press_Raw, 2, HAL_MAX_DELAY);
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2302      	movs	r3, #2
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	22f6      	movs	r2, #246	; 0xf6
 8001c1e:	21ee      	movs	r1, #238	; 0xee
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <BMP180_Get_PressRaw_Data+0x54>)
 8001c22:	f004 fe13 	bl	800684c <HAL_I2C_Mem_Read>
	raw.pressure = (((Press_Raw[0]<<16)+(Press_Raw[1]<<8)+Press_Raw[2]) >> (8-oss));
 8001c26:	793b      	ldrb	r3, [r7, #4]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	797b      	ldrb	r3, [r7, #5]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	4413      	add	r3, r2
 8001c30:	79ba      	ldrb	r2, [r7, #6]
 8001c32:	441a      	add	r2, r3
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <BMP180_Get_PressRaw_Data+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f1c3 0308 	rsb	r3, r3, #8
 8001c3c:	fa42 f303 	asr.w	r3, r2, r3
 8001c40:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <BMP180_Get_PressRaw_Data+0x5c>)
 8001c42:	6053      	str	r3, [r2, #4]
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	0800b8d0 	.word	0x0800b8d0
 8001c50:	20000168 	.word	0x20000168
 8001c54:	20000cd4 	.word	0x20000cd4
 8001c58:	20000cc4 	.word	0x20000cc4
 8001c5c:	00000000 	.word	0x00000000

08001c60 <BMP180_Get_Altitude>:

void BMP180_Get_Altitude()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	bmp180.Altitude = 44330*(1-(pow(((float)bmp180.Pressure/(float)bmp180.First_Pressure), 0.19029495718)));
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <BMP180_Get_Altitude+0x80>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <BMP180_Get_Altitude+0x80>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c80:	ee16 0a90 	vmov	r0, s13
 8001c84:	f7fe fc04 	bl	8000490 <__aeabi_f2d>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8001cd0 <BMP180_Get_Altitude+0x70>
 8001c90:	ec43 2b10 	vmov	d0, r2, r3
 8001c94:	f007 fdc8 	bl	8009828 <pow>
 8001c98:	ec53 2b10 	vmov	r2, r3, d0
 8001c9c:	f04f 0000 	mov.w	r0, #0
 8001ca0:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <BMP180_Get_Altitude+0x84>)
 8001ca2:	f7fe fa95 	bl	80001d0 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	a30a      	add	r3, pc, #40	; (adr r3, 8001cd8 <BMP180_Get_Altitude+0x78>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fc44 	bl	8000540 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff36 	bl	8000b30 <__aeabi_d2f>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <BMP180_Get_Altitude+0x80>)
 8001cc8:	60d3      	str	r3, [r2, #12]
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	ccd745e4 	.word	0xccd745e4
 8001cd4:	3fc85b95 	.word	0x3fc85b95
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	40e5a540 	.word	0x40e5a540
 8001ce0:	20000ca8 	.word	0x20000ca8
 8001ce4:	3ff00000 	.word	0x3ff00000

08001ce8 <GPS_Data_Control>:
#include "string.h"
#include "main.h"


void GPS_Data_Control(GPS_Handle *gpsDatas, const uint8_t *datas, uint8_t read_byte)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	71fb      	strb	r3, [r7, #7]
	static uint8_t indeks = 0;
	for(uint8_t i = 0; i < read_byte ; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
 8001cfa:	e124      	b.n	8001f46 <GPS_Data_Control+0x25e>
	{
		switch(gpsDatas->state)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 325f 	ldrb.w	r3, [r3, #607]	; 0x25f
 8001d02:	2b07      	cmp	r3, #7
 8001d04:	f200 811c 	bhi.w	8001f40 <GPS_Data_Control+0x258>
 8001d08:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <GPS_Data_Control+0x28>)
 8001d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d31 	.word	0x08001d31
 8001d14:	08001d49 	.word	0x08001d49
 8001d18:	08001d8b 	.word	0x08001d8b
 8001d1c:	08001dcd 	.word	0x08001dcd
 8001d20:	08001e15 	.word	0x08001e15
 8001d24:	08001e63 	.word	0x08001e63
 8001d28:	08001ebb 	.word	0x08001ebb
 8001d2c:	08001efd 	.word	0x08001efd
		{
			case YAKALA_$ :
			{
				if(datas[i] == '$')
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b24      	cmp	r3, #36	; 0x24
 8001d3a:	f040 8100 	bne.w	8001f3e <GPS_Data_Control+0x256>
				{
					gpsDatas->state =YAKALA_G;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
				}
				break;
 8001d46:	e0fa      	b.n	8001f3e <GPS_Data_Control+0x256>
			}

			case YAKALA_G :
			{
				if(datas[i] == 'G')
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b47      	cmp	r3, #71	; 0x47
 8001d52:	d112      	bne.n	8001d7a <GPS_Data_Control+0x92>
				{
					gpsDatas->state =YAKALA_P;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	441a      	add	r2, r3
 8001d62:	4b7e      	ldr	r3, [pc, #504]	; (8001f5c <GPS_Data_Control+0x274>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	1c59      	adds	r1, r3, #1
 8001d68:	b2c8      	uxtb	r0, r1
 8001d6a:	497c      	ldr	r1, [pc, #496]	; (8001f5c <GPS_Data_Control+0x274>)
 8001d6c:	7008      	strb	r0, [r1, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	440b      	add	r3, r1
 8001d76:	70da      	strb	r2, [r3, #3]
				else
				{
					gpsDatas->state =YAKALA_$;
					indeks = 0;
				}
				break;
 8001d78:	e0e2      	b.n	8001f40 <GPS_Data_Control+0x258>
					gpsDatas->state =YAKALA_$;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
					indeks = 0;
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <GPS_Data_Control+0x274>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
				break;
 8001d88:	e0da      	b.n	8001f40 <GPS_Data_Control+0x258>
			}
			case YAKALA_P :
			{
				if(datas[i] == 'N')
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b4e      	cmp	r3, #78	; 0x4e
 8001d94:	d112      	bne.n	8001dbc <GPS_Data_Control+0xd4>
				{
					gpsDatas->state =YAKALA_R_G;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	441a      	add	r2, r3
 8001da4:	4b6d      	ldr	r3, [pc, #436]	; (8001f5c <GPS_Data_Control+0x274>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	b2c8      	uxtb	r0, r1
 8001dac:	496b      	ldr	r1, [pc, #428]	; (8001f5c <GPS_Data_Control+0x274>)
 8001dae:	7008      	strb	r0, [r1, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	440b      	add	r3, r1
 8001db8:	70da      	strb	r2, [r3, #3]
				else
				{
					gpsDatas->state =YAKALA_$;
					indeks = 0;
				}
				break;
 8001dba:	e0c1      	b.n	8001f40 <GPS_Data_Control+0x258>
					gpsDatas->state =YAKALA_$;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
					indeks = 0;
 8001dc4:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <GPS_Data_Control+0x274>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
				break;
 8001dca:	e0b9      	b.n	8001f40 <GPS_Data_Control+0x258>
			}
			case YAKALA_R_G :
			{
				if(datas[i] == 'R' || datas[i] == 'G')
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b52      	cmp	r3, #82	; 0x52
 8001dd6:	d005      	beq.n	8001de4 <GPS_Data_Control+0xfc>
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	4413      	add	r3, r2
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b47      	cmp	r3, #71	; 0x47
 8001de2:	d112      	bne.n	8001e0a <GPS_Data_Control+0x122>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	441a      	add	r2, r3
 8001dea:	4b5c      	ldr	r3, [pc, #368]	; (8001f5c <GPS_Data_Control+0x274>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	1c59      	adds	r1, r3, #1
 8001df0:	b2c8      	uxtb	r0, r1
 8001df2:	495a      	ldr	r1, [pc, #360]	; (8001f5c <GPS_Data_Control+0x274>)
 8001df4:	7008      	strb	r0, [r1, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	70da      	strb	r2, [r3, #3]
					gpsDatas->state =YAKALA_M_G;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2204      	movs	r2, #4
 8001e04:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
				}
				else
				{
					gpsDatas->state =YAKALA_$;
				}
				break;
 8001e08:	e09a      	b.n	8001f40 <GPS_Data_Control+0x258>
					gpsDatas->state =YAKALA_$;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
				break;
 8001e12:	e095      	b.n	8001f40 <GPS_Data_Control+0x258>
			}

			case YAKALA_M_G :
			{
				if(datas[i] == 'M'|| datas[i] == 'G')
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b4d      	cmp	r3, #77	; 0x4d
 8001e1e:	d005      	beq.n	8001e2c <GPS_Data_Control+0x144>
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b47      	cmp	r3, #71	; 0x47
 8001e2a:	d112      	bne.n	8001e52 <GPS_Data_Control+0x16a>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	441a      	add	r2, r3
 8001e32:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <GPS_Data_Control+0x274>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	1c59      	adds	r1, r3, #1
 8001e38:	b2c8      	uxtb	r0, r1
 8001e3a:	4948      	ldr	r1, [pc, #288]	; (8001f5c <GPS_Data_Control+0x274>)
 8001e3c:	7008      	strb	r0, [r1, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	440b      	add	r3, r1
 8001e46:	70da      	strb	r2, [r3, #3]
					gpsDatas->state =YAKALA_C_A;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2205      	movs	r2, #5
 8001e4c:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
				else
				{
					gpsDatas->state =YAKALA_$;
					indeks = 0;
				}
				break;
 8001e50:	e076      	b.n	8001f40 <GPS_Data_Control+0x258>
					gpsDatas->state =YAKALA_$;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
					indeks = 0;
 8001e5a:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <GPS_Data_Control+0x274>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
				break;
 8001e60:	e06e      	b.n	8001f40 <GPS_Data_Control+0x258>
			}

			case YAKALA_C_A :
			{
				if(datas[i] == 'C')
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	4413      	add	r3, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b43      	cmp	r3, #67	; 0x43
 8001e6c:	d112      	bne.n	8001e94 <GPS_Data_Control+0x1ac>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	441a      	add	r2, r3
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <GPS_Data_Control+0x274>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	b2c8      	uxtb	r0, r1
 8001e7c:	4937      	ldr	r1, [pc, #220]	; (8001f5c <GPS_Data_Control+0x274>)
 8001e7e:	7008      	strb	r0, [r1, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	440b      	add	r3, r1
 8001e88:	70da      	strb	r2, [r3, #3]
					gpsDatas->state =TOPLA_GPRMC;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2206      	movs	r2, #6
 8001e8e:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
				else
				{
					gpsDatas->state =YAKALA_$;
					indeks = 0;
				}
				break;
 8001e92:	e055      	b.n	8001f40 <GPS_Data_Control+0x258>
				else if(datas[i] == 'A')
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b41      	cmp	r3, #65	; 0x41
 8001e9e:	d104      	bne.n	8001eaa <GPS_Data_Control+0x1c2>
					gpsDatas->state =TOPLA_GPGGA;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
				break;
 8001ea8:	e04a      	b.n	8001f40 <GPS_Data_Control+0x258>
					gpsDatas->state =YAKALA_$;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
					indeks = 0;
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <GPS_Data_Control+0x274>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
				break;
 8001eb8:	e042      	b.n	8001f40 <GPS_Data_Control+0x258>
			}

			case TOPLA_GPRMC:
			{
				if(datas[i] != FINAL_CHARACTER)
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b0a      	cmp	r3, #10
 8001ec4:	d00e      	beq.n	8001ee4 <GPS_Data_Control+0x1fc>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	441a      	add	r2, r3
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <GPS_Data_Control+0x274>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	1c59      	adds	r1, r3, #1
 8001ed2:	b2c8      	uxtb	r0, r1
 8001ed4:	4921      	ldr	r1, [pc, #132]	; (8001f5c <GPS_Data_Control+0x274>)
 8001ed6:	7008      	strb	r0, [r1, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	7812      	ldrb	r2, [r2, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	440b      	add	r3, r1
 8001ee0:	70da      	strb	r2, [r3, #3]
				{
					indeks = 0;
					GPS_Parser(gpsDatas, GPRMC);
					gpsDatas->state = YAKALA_$;
				}
				break;
 8001ee2:	e02d      	b.n	8001f40 <GPS_Data_Control+0x258>
					indeks = 0;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <GPS_Data_Control+0x274>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
					GPS_Parser(gpsDatas, GPRMC);
 8001eea:	2100      	movs	r1, #0
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f91b 	bl	8002128 <GPS_Parser>
					gpsDatas->state = YAKALA_$;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
				break;
 8001efa:	e021      	b.n	8001f40 <GPS_Data_Control+0x258>
			}
			case TOPLA_GPGGA:
			{
				if(datas[i] != FINAL_CHARACTER)
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b0a      	cmp	r3, #10
 8001f06:	d00e      	beq.n	8001f26 <GPS_Data_Control+0x23e>
				{
					gpsDatas->gpsDatasArray[indeks++] = datas[i];
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	441a      	add	r2, r3
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <GPS_Data_Control+0x274>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	1c59      	adds	r1, r3, #1
 8001f14:	b2c8      	uxtb	r0, r1
 8001f16:	4911      	ldr	r1, [pc, #68]	; (8001f5c <GPS_Data_Control+0x274>)
 8001f18:	7008      	strb	r0, [r1, #0]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	440b      	add	r3, r1
 8001f22:	70da      	strb	r2, [r3, #3]
				{
					indeks = 0;
					GPS_Parser(gpsDatas, GPGGA);
					gpsDatas->state = YAKALA_$;
				}
				break;
 8001f24:	e00c      	b.n	8001f40 <GPS_Data_Control+0x258>
					indeks = 0;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <GPS_Data_Control+0x274>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
					GPS_Parser(gpsDatas, GPGGA);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f8fa 	bl	8002128 <GPS_Parser>
					gpsDatas->state = YAKALA_$;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
				break;
 8001f3c:	e000      	b.n	8001f40 <GPS_Data_Control+0x258>
				break;
 8001f3e:	bf00      	nop
	for(uint8_t i = 0; i < read_byte ; i++)
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	3301      	adds	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
 8001f46:	7dfa      	ldrb	r2, [r7, #23]
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	f4ff aed6 	bcc.w	8001cfc <GPS_Data_Control+0x14>
			}

		}
	}
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000090 	.word	0x20000090

08001f60 <CHECKSUM_Find>:




uint16_t CHECKSUM_Find(const char *data)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	uint16_t CHK;
	uint8_t i = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]

	while(data[i] != '*')
 8001f6c:	e002      	b.n	8001f74 <CHECKSUM_Find+0x14>
	{
		i++;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
	while(data[i] != '*')
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f7e:	d1f6      	bne.n	8001f6e <CHECKSUM_Find+0xe>
	}
	CHK = Hex2Int(data[i + 1]) * 16 + Hex2Int(data[i + 2]);
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	3301      	adds	r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f830 	bl	8001ff0 <Hex2Int>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	b29c      	uxth	r4, r3
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f824 	bl	8001ff0 <Hex2Int>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4423      	add	r3, r4
 8001fae:	81bb      	strh	r3, [r7, #12]
	return CHK;
 8001fb0:	89bb      	ldrh	r3, [r7, #12]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}

08001fba <NMEA_CheckSum>:


uint16_t NMEA_CheckSum(const char * data)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	uint16_t CHK = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	81fb      	strh	r3, [r7, #14]
	while( *data != '*')
 8001fc6:	e008      	b.n	8001fda <NMEA_CheckSum+0x20>
	{
		CHK ^= *data;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	4053      	eors	r3, r2
 8001fd2:	81fb      	strh	r3, [r7, #14]
		data++;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
	while( *data != '*')
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b2a      	cmp	r3, #42	; 0x2a
 8001fe0:	d1f2      	bne.n	8001fc8 <NMEA_CheckSum+0xe>
	}
	return CHK;
 8001fe2:	89fb      	ldrh	r3, [r7, #14]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <Hex2Int>:



uint8_t Hex2Int(char c)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
	if (c >= '0' && c <= '9')
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	2b2f      	cmp	r3, #47	; 0x2f
 8002002:	d905      	bls.n	8002010 <Hex2Int+0x20>
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2b39      	cmp	r3, #57	; 0x39
 8002008:	d802      	bhi.n	8002010 <Hex2Int+0x20>
	{
	result = c - '0';
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	3b30      	subs	r3, #48	; 0x30
 800200e:	73fb      	strb	r3, [r7, #15]
	}
	if (c >= 'A' && c <= 'F')
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	2b40      	cmp	r3, #64	; 0x40
 8002014:	d905      	bls.n	8002022 <Hex2Int+0x32>
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	2b46      	cmp	r3, #70	; 0x46
 800201a:	d802      	bhi.n	8002022 <Hex2Int+0x32>
	{
	result = c - 'A' + 10;
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	3b37      	subs	r3, #55	; 0x37
 8002020:	73fb      	strb	r3, [r7, #15]
	}
	if (c >= 'a' && c <= 'f')
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b60      	cmp	r3, #96	; 0x60
 8002026:	d905      	bls.n	8002034 <Hex2Int+0x44>
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2b66      	cmp	r3, #102	; 0x66
 800202c:	d802      	bhi.n	8002034 <Hex2Int+0x44>
	{
	result = c - 'a' + 10;
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	3b57      	subs	r3, #87	; 0x57
 8002032:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <Find_Comma_Address>:



char* Find_Comma_Address(const char * data, uint8_t commaNumber)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
	char* startAddress = (char *)data;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

	while (commaNumber)
 8002052:	e009      	b.n	8002068 <Find_Comma_Address+0x26>
	{
		if (*(startAddress) == ',')
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b2c      	cmp	r3, #44	; 0x2c
 800205a:	d102      	bne.n	8002062 <Find_Comma_Address+0x20>
		{
			commaNumber--;
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	3b01      	subs	r3, #1
 8002060:	70fb      	strb	r3, [r7, #3]
		}
		startAddress++;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
	while (commaNumber)
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f2      	bne.n	8002054 <Find_Comma_Address+0x12>
	}
	return startAddress;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	0000      	movs	r0, r0
	...

08002080 <convertDegMinToDecDeg>:


double convertDegMinToDecDeg(float degMin)
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0a01 	vstr	s0, [r7, #4]
	double min = 0.0;
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double decDeg = 0.0;
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//get the minutes, fmod() requires double
	min = fmod((double)degMin, 100.0);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe f9f4 	bl	8000490 <__aeabi_f2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8002118 <convertDegMinToDecDeg+0x98>
 80020b0:	ec43 2b10 	vmov	d0, r2, r3
 80020b4:	f007 fb7c 	bl	80097b0 <fmod>
 80020b8:	ed87 0b04 	vstr	d0, [r7, #16]

	//rebuild coordinates in decimal degrees
	degMin = (int)(degMin / 100);
 80020bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80020c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002120 <convertDegMinToDecDeg+0xa0>
 80020c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d0:	edc7 7a01 	vstr	s15, [r7, #4]
	decDeg = degMin + (min / 60);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe f9db 	bl	8000490 <__aeabi_f2d>
 80020da:	4604      	mov	r4, r0
 80020dc:	460d      	mov	r5, r1
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <convertDegMinToDecDeg+0xa4>)
 80020e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020e8:	f7fe fb54 	bl	8000794 <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4620      	mov	r0, r4
 80020f2:	4629      	mov	r1, r5
 80020f4:	f7fe f86e 	bl	80001d4 <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decDeg;
 8002100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002104:	ec43 2b17 	vmov	d7, r2, r3
}
 8002108:	eeb0 0a47 	vmov.f32	s0, s14
 800210c:	eef0 0a67 	vmov.f32	s1, s15
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	bf00      	nop
 8002118:	00000000 	.word	0x00000000
 800211c:	40590000 	.word	0x40590000
 8002120:	42c80000 	.word	0x42c80000
 8002124:	404e0000 	.word	0x404e0000

08002128 <GPS_Parser>:
 *  11   = E or W
 *  12   = Checksum
*/

void GPS_Parser(GPS_Handle *gpsDatas, GPS_Types gpsType)
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	460b      	mov	r3, r1
 8002132:	72fb      	strb	r3, [r7, #11]
	switch(gpsType)
 8002134:	7afb      	ldrb	r3, [r7, #11]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <GPS_Parser+0x1a>
 800213a:	2b01      	cmp	r3, #1
 800213c:	f000 80d7 	beq.w	80022ee <GPS_Parser+0x1c6>
 8002140:	e19b      	b.n	800247a <GPS_Parser+0x352>
	{
		case GPRMC:
		{
			if (NMEA_CheckSum((const char *)gpsDatas->gpsDatasArray) == CHECKSUM_Find((const char *)gpsDatas->gpsDatasArray))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3303      	adds	r3, #3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff37 	bl	8001fba <NMEA_CheckSum>
 800214c:	4603      	mov	r3, r0
 800214e:	461c      	mov	r4, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3303      	adds	r3, #3
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff03 	bl	8001f60 <CHECKSUM_Find>
 800215a:	4603      	mov	r3, r0
 800215c:	429c      	cmp	r4, r3
 800215e:	f040 80be 	bne.w	80022de <GPS_Parser+0x1b6>
			{
				if (*Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, VALID_CONTROL_COMMA) == 'A')
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3303      	adds	r3, #3
 8002166:	2102      	movs	r1, #2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff6a 	bl	8002042 <Find_Comma_Address>
 800216e:	4603      	mov	r3, r0
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b41      	cmp	r3, #65	; 0x41
 8002174:	f040 80ab 	bne.w	80022ce <GPS_Parser+0x1a6>
				{
					memcpy(gpsDatas->gpsLatitudeArray, Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, LATITUDE_START_COMMA), Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, LATITUDE_STOP_COMMA) - Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, LATITUDE_START_COMMA) - 1);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f203 2401 	addw	r4, r3, #513	; 0x201
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3303      	adds	r3, #3
 8002182:	2103      	movs	r1, #3
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5c 	bl	8002042 <Find_Comma_Address>
 800218a:	4606      	mov	r6, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3303      	adds	r3, #3
 8002190:	2104      	movs	r1, #4
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff55 	bl	8002042 <Find_Comma_Address>
 8002198:	4605      	mov	r5, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3303      	adds	r3, #3
 800219e:	2103      	movs	r1, #3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff4e 	bl	8002042 <Find_Comma_Address>
 80021a6:	4603      	mov	r3, r0
 80021a8:	1aeb      	subs	r3, r5, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	461a      	mov	r2, r3
 80021ae:	4631      	mov	r1, r6
 80021b0:	4620      	mov	r0, r4
 80021b2:	f007 f8e7 	bl	8009384 <memcpy>
					memcpy(gpsDatas->gpsLongtitudeArray, Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, LONGTITUDE_START_COMMA), Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, LONGTITUDE_STOP_COMMA) - Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, LONGTITUDE_START_COMMA) - 1);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f203 2415 	addw	r4, r3, #533	; 0x215
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3303      	adds	r3, #3
 80021c0:	2105      	movs	r1, #5
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff3d 	bl	8002042 <Find_Comma_Address>
 80021c8:	4606      	mov	r6, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3303      	adds	r3, #3
 80021ce:	2106      	movs	r1, #6
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff36 	bl	8002042 <Find_Comma_Address>
 80021d6:	4605      	mov	r5, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3303      	adds	r3, #3
 80021dc:	2105      	movs	r1, #5
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff2f 	bl	8002042 <Find_Comma_Address>
 80021e4:	4603      	mov	r3, r0
 80021e6:	1aeb      	subs	r3, r5, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	461a      	mov	r2, r3
 80021ec:	4631      	mov	r1, r6
 80021ee:	4620      	mov	r0, r4
 80021f0:	f007 f8c8 	bl	8009384 <memcpy>
					memcpy(gpsDatas->gpsSpeedKnotArray, Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, KNOT_START_COMMA), Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, KNOT_STOP_COMMA) - Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, KNOT_START_COMMA) - 1);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f203 2429 	addw	r4, r3, #553	; 0x229
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3303      	adds	r3, #3
 80021fe:	2107      	movs	r1, #7
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff1e 	bl	8002042 <Find_Comma_Address>
 8002206:	4606      	mov	r6, r0
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3303      	adds	r3, #3
 800220c:	2108      	movs	r1, #8
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff17 	bl	8002042 <Find_Comma_Address>
 8002214:	4605      	mov	r5, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3303      	adds	r3, #3
 800221a:	2107      	movs	r1, #7
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff10 	bl	8002042 <Find_Comma_Address>
 8002222:	4603      	mov	r3, r0
 8002224:	1aeb      	subs	r3, r5, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	461a      	mov	r2, r3
 800222a:	4631      	mov	r1, r6
 800222c:	4620      	mov	r0, r4
 800222e:	f007 f8a9 	bl	8009384 <memcpy>
					gpsDatas->speed_u8 = my_getnbr((gpsDatas->gpsSpeedKnotArray)) * KNOT_TO_KMH_CONVERTER;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f203 2329 	addw	r3, r3, #553	; 0x229
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f94f 	bl	80024dc <my_getnbr>
 800223e:	4603      	mov	r3, r0
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f913 	bl	800046c <__aeabi_i2d>
 8002246:	a3a3      	add	r3, pc, #652	; (adr r3, 80024d4 <GPS_Parser+0x3ac>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	f7fe f978 	bl	8000540 <__aeabi_dmul>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f7fe fc4a 	bl	8000af0 <__aeabi_d2uiz>
 800225c:	4603      	mov	r3, r0
 800225e:	b2da      	uxtb	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
					gpsDatas->latitude_f32 = (float)convertDegMinToDecDeg(stof(gpsDatas->gpsLatitudeArray));
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f203 2301 	addw	r3, r3, #513	; 0x201
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f971 	bl	8002554 <stof>
 8002272:	eef0 7a40 	vmov.f32	s15, s0
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	f7ff ff01 	bl	8002080 <convertDegMinToDecDeg>
 800227e:	ec53 2b10 	vmov	r2, r3, d0
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fc53 	bl	8000b30 <__aeabi_d2f>
 800228a:	4602      	mov	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
					gpsDatas->longtitude_f32 = (float)convertDegMinToDecDeg(stof(gpsDatas->gpsLongtitudeArray));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f203 2315 	addw	r3, r3, #533	; 0x215
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f95b 	bl	8002554 <stof>
 800229e:	eef0 7a40 	vmov.f32	s15, s0
 80022a2:	eeb0 0a67 	vmov.f32	s0, s15
 80022a6:	f7ff feeb 	bl	8002080 <convertDegMinToDecDeg>
 80022aa:	ec53 2b10 	vmov	r2, r3, d0
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	f7fe fc3d 	bl	8000b30 <__aeabi_d2f>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
					gpsDatas->gps_errorhandler.trueData_u32++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
			}
			else
			{
			gpsDatas->gps_errorhandler.checksumError_u32++;
			}
			break;
 80022cc:	e0d5      	b.n	800247a <GPS_Parser+0x352>
					gpsDatas->gps_errorhandler.validDataError_u32++;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
			break;
 80022dc:	e0cd      	b.n	800247a <GPS_Parser+0x352>
			gpsDatas->gps_errorhandler.checksumError_u32++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
			break;
 80022ec:	e0c5      	b.n	800247a <GPS_Parser+0x352>
		}
		case GPGGA:
		{
			if (NMEA_CheckSum((const char *)gpsDatas->gpsDatasArray) == CHECKSUM_Find((const char *)gpsDatas->gpsDatasArray))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3303      	adds	r3, #3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fe61 	bl	8001fba <NMEA_CheckSum>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461c      	mov	r4, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3303      	adds	r3, #3
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fe2d 	bl	8001f60 <CHECKSUM_Find>
 8002306:	4603      	mov	r3, r0
 8002308:	429c      	cmp	r4, r3
 800230a:	f040 80af 	bne.w	800246c <GPS_Parser+0x344>
			{
				if (*Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, 6) == '1')
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3303      	adds	r3, #3
 8002312:	2106      	movs	r1, #6
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fe94 	bl	8002042 <Find_Comma_Address>
 800231a:	4603      	mov	r3, r0
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b31      	cmp	r3, #49	; 0x31
 8002320:	f040 809c 	bne.w	800245c <GPS_Parser+0x334>
				{
					memcpy(gpsDatas->gpsLatitudeArray, Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, 2), Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, 3) - Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, 2) - 1);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f203 2401 	addw	r4, r3, #513	; 0x201
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3303      	adds	r3, #3
 800232e:	2102      	movs	r1, #2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fe86 	bl	8002042 <Find_Comma_Address>
 8002336:	4606      	mov	r6, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3303      	adds	r3, #3
 800233c:	2103      	movs	r1, #3
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fe7f 	bl	8002042 <Find_Comma_Address>
 8002344:	4605      	mov	r5, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3303      	adds	r3, #3
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fe78 	bl	8002042 <Find_Comma_Address>
 8002352:	4603      	mov	r3, r0
 8002354:	1aeb      	subs	r3, r5, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	461a      	mov	r2, r3
 800235a:	4631      	mov	r1, r6
 800235c:	4620      	mov	r0, r4
 800235e:	f007 f811 	bl	8009384 <memcpy>
					memcpy(gpsDatas->gpsLongtitudeArray, Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, 4), Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, 5) - Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, 4) - 1);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f203 2415 	addw	r4, r3, #533	; 0x215
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3303      	adds	r3, #3
 800236c:	2104      	movs	r1, #4
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fe67 	bl	8002042 <Find_Comma_Address>
 8002374:	4606      	mov	r6, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3303      	adds	r3, #3
 800237a:	2105      	movs	r1, #5
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe60 	bl	8002042 <Find_Comma_Address>
 8002382:	4605      	mov	r5, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3303      	adds	r3, #3
 8002388:	2104      	movs	r1, #4
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe59 	bl	8002042 <Find_Comma_Address>
 8002390:	4603      	mov	r3, r0
 8002392:	1aeb      	subs	r3, r5, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	461a      	mov	r2, r3
 8002398:	4631      	mov	r1, r6
 800239a:	4620      	mov	r0, r4
 800239c:	f006 fff2 	bl	8009384 <memcpy>
					memcpy(gpsDatas->gpsSatelliteNumberArray, Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, KNOT_START_COMMA), Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, KNOT_STOP_COMMA) - Find_Comma_Address((const char *)gpsDatas->gpsDatasArray, KNOT_START_COMMA) - 1);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f203 243d 	addw	r4, r3, #573	; 0x23d
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3303      	adds	r3, #3
 80023aa:	2107      	movs	r1, #7
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fe48 	bl	8002042 <Find_Comma_Address>
 80023b2:	4606      	mov	r6, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3303      	adds	r3, #3
 80023b8:	2108      	movs	r1, #8
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fe41 	bl	8002042 <Find_Comma_Address>
 80023c0:	4605      	mov	r5, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3303      	adds	r3, #3
 80023c6:	2107      	movs	r1, #7
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fe3a 	bl	8002042 <Find_Comma_Address>
 80023ce:	4603      	mov	r3, r0
 80023d0:	1aeb      	subs	r3, r5, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	461a      	mov	r2, r3
 80023d6:	4631      	mov	r1, r6
 80023d8:	4620      	mov	r0, r4
 80023da:	f006 ffd3 	bl	8009384 <memcpy>
				  gpsDatas->latitude_f32 = (float)convertDegMinToDecDeg(stof(gpsDatas->gpsLatitudeArray));
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f203 2301 	addw	r3, r3, #513	; 0x201
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f8b5 	bl	8002554 <stof>
 80023ea:	eef0 7a40 	vmov.f32	s15, s0
 80023ee:	eeb0 0a67 	vmov.f32	s0, s15
 80023f2:	f7ff fe45 	bl	8002080 <convertDegMinToDecDeg>
 80023f6:	ec53 2b10 	vmov	r2, r3, d0
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fb97 	bl	8000b30 <__aeabi_d2f>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
				  gpsDatas->longtitude_f32 = (float)convertDegMinToDecDeg(stof(gpsDatas->gpsLongtitudeArray));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f203 2315 	addw	r3, r3, #533	; 0x215
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f89f 	bl	8002554 <stof>
 8002416:	eef0 7a40 	vmov.f32	s15, s0
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	f7ff fe2f 	bl	8002080 <convertDegMinToDecDeg>
 8002422:	ec53 2b10 	vmov	r2, r3, d0
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f7fe fb81 	bl	8000b30 <__aeabi_d2f>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
				  gpsDatas->satellite_number_u8 = my_getnbr(gpsDatas->gpsSatelliteNumberArray);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f203 233d 	addw	r3, r3, #573	; 0x23d
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f84d 	bl	80024dc <my_getnbr>
 8002442:	4603      	mov	r3, r0
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
				  gpsDatas->gps_errorhandler.trueData_u32++;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800245a:	e00e      	b.n	800247a <GPS_Parser+0x352>
				}

				else
				{
					gpsDatas->gps_errorhandler.validDataError_u32++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800246a:	e006      	b.n	800247a <GPS_Parser+0x352>
				}
			}
			else
			{
			gpsDatas->gps_errorhandler.checksumError_u32++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
			}
		}

	}
	gpsDatas->gpsEfficiency_u8 = ((float)gpsDatas->gps_errorhandler.trueData_u32 /(gpsDatas->gps_errorhandler.checksumError_u32 + gpsDatas->gps_errorhandler.validDataError_u32 + gpsDatas->gps_errorhandler.trueData_u32) * PERCENTAGE_CONVERTER);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8002494:	441a      	add	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800249c:	4413      	add	r3, r2
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024aa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80024d0 <GPS_Parser+0x3a8>
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80024ba:	793b      	ldrb	r3, [r7, #4]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024cc:	f3af 8000 	nop.w
 80024d0:	42c80000 	.word	0x42c80000
 80024d4:	c083126f 	.word	0xc083126f
 80024d8:	3ffda1ca 	.word	0x3ffda1ca

080024dc <my_getnbr>:

int my_getnbr(char *str)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  int result;
  int puiss;

  result = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  puiss = 1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
  while (('-' == (*str)) || ((*str) == '+'))
 80024ec:	e009      	b.n	8002502 <my_getnbr+0x26>
  {
      if (*str == '-')
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b2d      	cmp	r3, #45	; 0x2d
 80024f4:	d102      	bne.n	80024fc <my_getnbr+0x20>
        puiss = puiss * -1;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	425b      	negs	r3, r3
 80024fa:	60bb      	str	r3, [r7, #8]
      str++;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
  while (('-' == (*str)) || ((*str) == '+'))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b2d      	cmp	r3, #45	; 0x2d
 8002508:	d0f1      	beq.n	80024ee <my_getnbr+0x12>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b2b      	cmp	r3, #43	; 0x2b
 8002510:	d0ed      	beq.n	80024ee <my_getnbr+0x12>
  }
  while ((*str >= '0') && (*str <= '9'))
 8002512:	e00d      	b.n	8002530 <my_getnbr+0x54>
  {
      result = (result * 10) + ((*str) - '0');
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	3b30      	subs	r3, #48	; 0x30
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
      str++;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3301      	adds	r3, #1
 800252e:	607b      	str	r3, [r7, #4]
  while ((*str >= '0') && (*str <= '9'))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b2f      	cmp	r3, #47	; 0x2f
 8002536:	d903      	bls.n	8002540 <my_getnbr+0x64>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b39      	cmp	r3, #57	; 0x39
 800253e:	d9e9      	bls.n	8002514 <my_getnbr+0x38>
  }
  return (result * puiss);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	fb02 f303 	mul.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <stof>:

float stof(const char* s)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  float rez = 0, fact = 1;
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002566:	613b      	str	r3, [r7, #16]
  if (*s == '-')
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b2d      	cmp	r3, #45	; 0x2d
 800256e:	d104      	bne.n	800257a <stof+0x26>
	{
    s++;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3301      	adds	r3, #1
 8002574:	607b      	str	r3, [r7, #4]
    fact = -1;
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <stof+0xac>)
 8002578:	613b      	str	r3, [r7, #16]
  };
  for (int point_seen = 0; *s; s++)
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e02d      	b.n	80025dc <stof+0x88>
	{
    if (*s == '.')
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b2e      	cmp	r3, #46	; 0x2e
 8002586:	d102      	bne.n	800258e <stof+0x3a>
		{
      point_seen = 1;
 8002588:	2301      	movs	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
      continue;
 800258c:	e023      	b.n	80025d6 <stof+0x82>
    };
    int d = *s - '0';
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	3b30      	subs	r3, #48	; 0x30
 8002594:	60bb      	str	r3, [r7, #8]
    if (d >= 0 && d <= 9)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db1c      	blt.n	80025d6 <stof+0x82>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b09      	cmp	r3, #9
 80025a0:	dc19      	bgt.n	80025d6 <stof+0x82>
		{
      if (point_seen) fact /= 10.0f;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <stof+0x64>
 80025a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80025ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80025b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b4:	edc7 7a04 	vstr	s15, [r7, #16]
      rez = rez * 10.0f + (float)d;
 80025b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80025bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d2:	edc7 7a05 	vstr	s15, [r7, #20]
  for (int point_seen = 0; *s; s++)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3301      	adds	r3, #1
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1cd      	bne.n	8002580 <stof+0x2c>
    };
  };
  return rez * fact;
 80025e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80025e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025ec:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80025f0:	eeb0 0a67 	vmov.f32	s0, s15
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	bf800000 	.word	0xbf800000

08002604 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 800260c:	2254      	movs	r2, #84	; 0x54
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4803      	ldr	r0, [pc, #12]	; (8002620 <MPU6050_Init+0x1c>)
 8002612:	f006 feb7 	bl	8009384 <memcpy>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000094 	.word	0x20000094

08002624 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af02      	add	r7, sp, #8
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	4613      	mov	r3, r2
 8002632:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8002634:	23d0      	movs	r3, #208	; 0xd0
 8002636:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	b299      	uxth	r1, r3
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	230a      	movs	r3, #10
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2301      	movs	r3, #1
 800264a:	4808      	ldr	r0, [pc, #32]	; (800266c <I2C_Read+0x48>)
 800264c:	f003 fce0 	bl	8006010 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	b299      	uxth	r1, r3
 8002654:	79bb      	ldrb	r3, [r7, #6]
 8002656:	b29b      	uxth	r3, r3
 8002658:	2264      	movs	r2, #100	; 0x64
 800265a:	9200      	str	r2, [sp, #0]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <I2C_Read+0x48>)
 8002660:	f003 fdd4 	bl	800620c <HAL_I2C_Master_Receive>
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000094 	.word	0x20000094

08002670 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	4603      	mov	r3, r0
 8002678:	460a      	mov	r2, r1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	4613      	mov	r3, r2
 800267e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8002684:	79bb      	ldrb	r3, [r7, #6]
 8002686:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8002688:	23d0      	movs	r3, #208	; 0xd0
 800268a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	b299      	uxth	r1, r3
 8002690:	f107 020c 	add.w	r2, r7, #12
 8002694:	2364      	movs	r3, #100	; 0x64
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2302      	movs	r3, #2
 800269a:	4803      	ldr	r0, [pc, #12]	; (80026a8 <I2C_Write8+0x38>)
 800269c:	f003 fcb8 	bl	8006010 <HAL_I2C_Master_Transmit>
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000094 	.word	0x20000094

080026ac <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	206b      	movs	r0, #107	; 0x6b
 80026bc:	f7ff ffd8 	bl	8002670 <I2C_Write8>
	HAL_Delay(100);
 80026c0:	2064      	movs	r0, #100	; 0x64
 80026c2:	f002 f8cf 	bl	8004864 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	791b      	ldrb	r3, [r3, #4]
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	b25b      	sxtb	r3, r3
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	b25a      	sxtb	r2, r3
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	4619      	mov	r1, r3
 80026ec:	206b      	movs	r0, #107	; 0x6b
 80026ee:	f7ff ffbf 	bl	8002670 <I2C_Write8>
	HAL_Delay(100);
 80026f2:	2064      	movs	r0, #100	; 0x64
 80026f4:	f002 f8b6 	bl	8004864 <HAL_Delay>

	Buffer = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	78db      	ldrb	r3, [r3, #3]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	4619      	mov	r1, r3
 800270a:	201a      	movs	r0, #26
 800270c:	f7ff ffb0 	bl	8002670 <I2C_Write8>

	Buffer = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f003 0318 	and.w	r3, r3, #24
 8002720:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	4619      	mov	r1, r3
 8002726:	201b      	movs	r0, #27
 8002728:	f7ff ffa2 	bl	8002670 <I2C_Write8>

	Buffer = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	789b      	ldrb	r3, [r3, #2]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f003 0318 	and.w	r3, r3, #24
 800273c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	4619      	mov	r1, r3
 8002742:	201c      	movs	r0, #28
 8002744:	f7ff ff94 	bl	8002670 <I2C_Write8>

	MPU6050_Set_SMPRT_DIV(0x04);
 8002748:	2004      	movs	r0, #4
 800274a:	f000 f855 	bl	80027f8 <MPU6050_Set_SMPRT_DIV>

	switch (config->Accel_Full_Scale)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	789b      	ldrb	r3, [r3, #2]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d81e      	bhi.n	8002794 <MPU6050_Config+0xe8>
 8002756:	a201      	add	r2, pc, #4	; (adr r2, 800275c <MPU6050_Config+0xb0>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	0800276d 	.word	0x0800276d
 8002760:	08002777 	.word	0x08002777
 8002764:	08002781 	.word	0x08002781
 8002768:	0800278b 	.word	0x0800278b
	{
		case AFS_SEL_2g:
			accelScalingFactor = 0.00006103515625;
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <MPU6050_Config+0x134>)
 800276e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002772:	601a      	str	r2, [r3, #0]
			break;
 8002774:	e00f      	b.n	8002796 <MPU6050_Config+0xea>

		case AFS_SEL_4g:
			accelScalingFactor = 0.0001220703125;
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <MPU6050_Config+0x134>)
 8002778:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800277c:	601a      	str	r2, [r3, #0]
				break;
 800277e:	e00a      	b.n	8002796 <MPU6050_Config+0xea>

		case AFS_SEL_8g:
			accelScalingFactor = 0.000244140625;
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <MPU6050_Config+0x134>)
 8002782:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002786:	601a      	str	r2, [r3, #0]
			break;
 8002788:	e005      	b.n	8002796 <MPU6050_Config+0xea>

		case AFS_SEL_16g:
			accelScalingFactor = 0.00048828125;
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <MPU6050_Config+0x134>)
 800278c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002790:	601a      	str	r2, [r3, #0]
			break;
 8002792:	e000      	b.n	8002796 <MPU6050_Config+0xea>

		default:
			break;
 8002794:	bf00      	nop
	}

	switch (config->Gyro_Full_Scale)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d81a      	bhi.n	80027d4 <MPU6050_Config+0x128>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <MPU6050_Config+0xf8>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027bd 	.word	0x080027bd
 80027ac:	080027c5 	.word	0x080027c5
 80027b0:	080027cd 	.word	0x080027cd
	{
		case FS_SEL_250:
			gyroScalingFactor = 0.00763358778626;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <MPU6050_Config+0x138>)
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <MPU6050_Config+0x13c>)
 80027b8:	601a      	str	r2, [r3, #0]
			break;
 80027ba:	e00c      	b.n	80027d6 <MPU6050_Config+0x12a>

		case FS_SEL_500:
			gyroScalingFactor = 0.01526717557252;
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <MPU6050_Config+0x138>)
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <MPU6050_Config+0x140>)
 80027c0:	601a      	str	r2, [r3, #0]
			break;
 80027c2:	e008      	b.n	80027d6 <MPU6050_Config+0x12a>

		case FS_SEL_1000:
			gyroScalingFactor = 0.030487804878;
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <MPU6050_Config+0x138>)
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <MPU6050_Config+0x144>)
 80027c8:	601a      	str	r2, [r3, #0]
			break;
 80027ca:	e004      	b.n	80027d6 <MPU6050_Config+0x12a>

		case FS_SEL_2000:
			gyroScalingFactor = 0.0609756097561;
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <MPU6050_Config+0x138>)
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <MPU6050_Config+0x148>)
 80027d0:	601a      	str	r2, [r3, #0]
			break;
 80027d2:	e000      	b.n	80027d6 <MPU6050_Config+0x12a>

		default:
			break;
 80027d4:	bf00      	nop
	}

}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200000e8 	.word	0x200000e8
 80027e4:	200000ec 	.word	0x200000ec
 80027e8:	3bfa232d 	.word	0x3bfa232d
 80027ec:	3c7a232d 	.word	0x3c7a232d
 80027f0:	3cf9c190 	.word	0x3cf9c190
 80027f4:	3d79c190 	.word	0x3d79c190

080027f8 <MPU6050_Set_SMPRT_DIV>:
	I2C_Read(SMPLRT_DIV_REG, &Buffer, 1);
	return Buffer;
}

void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4619      	mov	r1, r3
 8002806:	2019      	movs	r0, #25
 8002808:	f7ff ff32 	bl	8002670 <I2C_Write8>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <MPU6050_Get_Accel_RawData>:
	I2C_Write8(CONFIG_REG, Buffer);

}

void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	3301      	adds	r3, #1
 8002822:	2201      	movs	r2, #1
 8002824:	4619      	mov	r1, r3
 8002826:	203a      	movs	r0, #58	; 0x3a
 8002828:	f7ff fefc 	bl	8002624 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 800282c:	7f7b      	ldrb	r3, [r7, #29]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d04f      	beq.n	80028d2 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	2206      	movs	r2, #6
 8002838:	4619      	mov	r1, r3
 800283a:	203b      	movs	r0, #59	; 0x3b
 800283c:	f7ff fef2 	bl	8002624 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8002840:	7d3b      	ldrb	r3, [r7, #20]
 8002842:	b29b      	uxth	r3, r3
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	b29a      	uxth	r2, r3
 8002848:	7d7b      	ldrb	r3, [r7, #21]
 800284a:	b29b      	uxth	r3, r3
 800284c:	4413      	add	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	b21a      	sxth	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8002856:	7dbb      	ldrb	r3, [r7, #22]
 8002858:	b29b      	uxth	r3, r3
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	b29a      	uxth	r2, r3
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	b29b      	uxth	r3, r3
 8002862:	4413      	add	r3, r2
 8002864:	b29b      	uxth	r3, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 800286c:	7e3b      	ldrb	r3, [r7, #24]
 800286e:	b29b      	uxth	r3, r3
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	b29a      	uxth	r2, r3
 8002874:	7e7b      	ldrb	r3, [r7, #25]
 8002876:	b29b      	uxth	r3, r3
 8002878:	4413      	add	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	b21a      	sxth	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	2206      	movs	r2, #6
 8002888:	4619      	mov	r1, r3
 800288a:	2043      	movs	r0, #67	; 0x43
 800288c:	f7ff feca 	bl	8002624 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8002890:	7b3b      	ldrb	r3, [r7, #12]
 8002892:	b29b      	uxth	r3, r3
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	b29a      	uxth	r2, r3
 8002898:	7b7b      	ldrb	r3, [r7, #13]
 800289a:	b29b      	uxth	r3, r3
 800289c:	4413      	add	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MPU6050_Get_Accel_RawData+0xc8>)
 80028a4:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 80028a6:	7bbb      	ldrb	r3, [r7, #14]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	b21a      	sxth	r2, r3
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <MPU6050_Get_Accel_RawData+0xc8>)
 80028ba:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80028bc:	7c3b      	ldrb	r3, [r7, #16]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	7c7b      	ldrb	r3, [r7, #17]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	b21a      	sxth	r2, r3
 80028ce:	4b03      	ldr	r3, [pc, #12]	; (80028dc <MPU6050_Get_Accel_RawData+0xc8>)
 80028d0:	809a      	strh	r2, [r3, #4]
	}
}
 80028d2:	bf00      	nop
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200000f0 	.word	0x200000f0

080028e0 <MPU6050_Get_Gyro_RawData>:

void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <MPU6050_Get_Gyro_RawData+0x34>)
 80028ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MPU6050_Get_Gyro_RawData+0x34>)
 80028f4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <MPU6050_Get_Gyro_RawData+0x34>)
 80028fe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	809a      	strh	r2, [r3, #4]

}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	200000f0 	.word	0x200000f0

08002918 <MPU6050_Get_Cal>:

void MPU6050_Get_Cal()
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
	for(int i=0;i<SAMPLE_NUM;i++)
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	e083      	b.n	8002a2c <MPU6050_Get_Cal+0x114>
	{
		MPU6050_Get_Accel_RawData(&myAccelRaw);
 8002924:	4864      	ldr	r0, [pc, #400]	; (8002ab8 <MPU6050_Get_Cal+0x1a0>)
 8002926:	f7ff ff75 	bl	8002814 <MPU6050_Get_Accel_RawData>
		MPU6050_Get_Gyro_RawData(&myGyroRaw);
 800292a:	4864      	ldr	r0, [pc, #400]	; (8002abc <MPU6050_Get_Cal+0x1a4>)
 800292c:	f7ff ffd8 	bl	80028e0 <MPU6050_Get_Gyro_RawData>
		myGyroCal.x  += ((float)myGyroRaw.x * gyroScalingFactor);
 8002930:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	4b61      	ldr	r3, [pc, #388]	; (8002abc <MPU6050_Get_Cal+0x1a4>)
 8002938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002944:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <MPU6050_Get_Cal+0x1ac>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002952:	4b5b      	ldr	r3, [pc, #364]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002954:	edc3 7a00 	vstr	s15, [r3]
		myGyroCal.y  += ((float)myGyroRaw.y * gyroScalingFactor);
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 800295a:	ed93 7a01 	vldr	s14, [r3, #4]
 800295e:	4b57      	ldr	r3, [pc, #348]	; (8002abc <MPU6050_Get_Cal+0x1a4>)
 8002960:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800296c:	4b55      	ldr	r3, [pc, #340]	; (8002ac4 <MPU6050_Get_Cal+0x1ac>)
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 800297c:	edc3 7a01 	vstr	s15, [r3, #4]
		myGyroCal.z  += ((float)myGyroRaw.z * gyroScalingFactor);
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002982:	ed93 7a02 	vldr	s14, [r3, #8]
 8002986:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <MPU6050_Get_Cal+0x1a4>)
 8002988:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002994:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <MPU6050_Get_Cal+0x1ac>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 80029a4:	edc3 7a02 	vstr	s15, [r3, #8]
		myAccelCal.x += ((float)myAccelRaw.x * accelScalingFactor);
 80029a8:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 80029aa:	ed93 7a00 	vldr	s14, [r3]
 80029ae:	4b42      	ldr	r3, [pc, #264]	; (8002ab8 <MPU6050_Get_Cal+0x1a0>)
 80029b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029bc:	4b43      	ldr	r3, [pc, #268]	; (8002acc <MPU6050_Get_Cal+0x1b4>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
		myAccelCal.y += ((float)myAccelRaw.y * accelScalingFactor);
 80029d0:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 80029d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80029d6:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <MPU6050_Get_Cal+0x1a0>)
 80029d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <MPU6050_Get_Cal+0x1b4>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f2:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 80029f4:	edc3 7a01 	vstr	s15, [r3, #4]
		myAccelCal.z += ((float)myAccelRaw.z * accelScalingFactor);
 80029f8:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 80029fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <MPU6050_Get_Cal+0x1a0>)
 8002a00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <MPU6050_Get_Cal+0x1b4>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 8002a1c:	edc3 7a02 	vstr	s15, [r3, #8]
		HAL_Delay(3);
 8002a20:	2003      	movs	r0, #3
 8002a22:	f001 ff1f 	bl	8004864 <HAL_Delay>
	for(int i=0;i<SAMPLE_NUM;i++)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a32:	f6ff af77 	blt.w	8002924 <MPU6050_Get_Cal+0xc>
	}
	myGyroCal.x  /= SAMPLE_NUM;
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002a38:	ed93 7a00 	vldr	s14, [r3]
 8002a3c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002ad0 <MPU6050_Get_Cal+0x1b8>
 8002a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002a46:	edc3 7a00 	vstr	s15, [r3]
	myGyroCal.y  /= SAMPLE_NUM;
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002a4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a50:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002ad0 <MPU6050_Get_Cal+0x1b8>
 8002a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002a5a:	edc3 7a01 	vstr	s15, [r3, #4]
	myGyroCal.z  /= SAMPLE_NUM;
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002a60:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a64:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002ad0 <MPU6050_Get_Cal+0x1b8>
 8002a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <MPU6050_Get_Cal+0x1a8>)
 8002a6e:	edc3 7a02 	vstr	s15, [r3, #8]
	myAccelCal.x /= SAMPLE_NUM;
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 8002a74:	ed93 7a00 	vldr	s14, [r3]
 8002a78:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002ad0 <MPU6050_Get_Cal+0x1b8>
 8002a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 8002a82:	edc3 7a00 	vstr	s15, [r3]
	myAccelCal.y /= SAMPLE_NUM;
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 8002a88:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a8c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002ad0 <MPU6050_Get_Cal+0x1b8>
 8002a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 8002a96:	edc3 7a01 	vstr	s15, [r3, #4]
	myAccelCal.z /= SAMPLE_NUM;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 8002a9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002aa0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002ad0 <MPU6050_Get_Cal+0x1b8>
 8002aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <MPU6050_Get_Cal+0x1b0>)
 8002aaa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000478 	.word	0x20000478
 8002abc:	200001d0 	.word	0x200001d0
 8002ac0:	20000448 	.word	0x20000448
 8002ac4:	200000ec 	.word	0x200000ec
 8002ac8:	2000046c 	.word	0x2000046c
 8002acc:	200000e8 	.word	0x200000e8
 8002ad0:	447a0000 	.word	0x447a0000
 8002ad4:	00000000 	.word	0x00000000

08002ad8 <MPU6050_Read_Value>:

void MPU6050_Read_Value()
{
 8002ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002adc:	af00      	add	r7, sp, #0
	MPU6050_Get_Accel_RawData(&myAccelRaw);
 8002ade:	48d6      	ldr	r0, [pc, #856]	; (8002e38 <MPU6050_Read_Value+0x360>)
 8002ae0:	f7ff fe98 	bl	8002814 <MPU6050_Get_Accel_RawData>
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8002ae4:	48d5      	ldr	r0, [pc, #852]	; (8002e3c <MPU6050_Read_Value+0x364>)
 8002ae6:	f7ff fefb 	bl	80028e0 <MPU6050_Get_Gyro_RawData>
	myAccelMean.x = ((float)myAccelRaw.x * accelScalingFactor) - myAccelCal.x;
 8002aea:	4bd3      	ldr	r3, [pc, #844]	; (8002e38 <MPU6050_Read_Value+0x360>)
 8002aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af8:	4bd1      	ldr	r3, [pc, #836]	; (8002e40 <MPU6050_Read_Value+0x368>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b02:	4bd0      	ldr	r3, [pc, #832]	; (8002e44 <MPU6050_Read_Value+0x36c>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b0c:	4bce      	ldr	r3, [pc, #824]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002b0e:	edc3 7a00 	vstr	s15, [r3]
	myAccelMean.y = ((float)myAccelRaw.y * accelScalingFactor) - myAccelCal.y;
 8002b12:	4bc9      	ldr	r3, [pc, #804]	; (8002e38 <MPU6050_Read_Value+0x360>)
 8002b14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b20:	4bc7      	ldr	r3, [pc, #796]	; (8002e40 <MPU6050_Read_Value+0x368>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b2a:	4bc6      	ldr	r3, [pc, #792]	; (8002e44 <MPU6050_Read_Value+0x36c>)
 8002b2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b34:	4bc4      	ldr	r3, [pc, #784]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002b36:	edc3 7a01 	vstr	s15, [r3, #4]
    myAccelMean.z = (((float)myAccelRaw.z * accelScalingFactor) - myAccelCal.z) + 1;
 8002b3a:	4bbf      	ldr	r3, [pc, #764]	; (8002e38 <MPU6050_Read_Value+0x360>)
 8002b3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b48:	4bbd      	ldr	r3, [pc, #756]	; (8002e40 <MPU6050_Read_Value+0x368>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b52:	4bbc      	ldr	r3, [pc, #752]	; (8002e44 <MPU6050_Read_Value+0x36c>)
 8002b54:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b64:	4bb8      	ldr	r3, [pc, #736]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002b66:	edc3 7a02 	vstr	s15, [r3, #8]
	myGyroMean.x  = (((float)myGyroRaw.x  * gyroScalingFactor) - myGyroCal.x) * 0.004;
 8002b6a:	4bb4      	ldr	r3, [pc, #720]	; (8002e3c <MPU6050_Read_Value+0x364>)
 8002b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b78:	4bb4      	ldr	r3, [pc, #720]	; (8002e4c <MPU6050_Read_Value+0x374>)
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b82:	4bb3      	ldr	r3, [pc, #716]	; (8002e50 <MPU6050_Read_Value+0x378>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8c:	ee17 0a90 	vmov	r0, s15
 8002b90:	f7fd fc7e 	bl	8000490 <__aeabi_f2d>
 8002b94:	a3a2      	add	r3, pc, #648	; (adr r3, 8002e20 <MPU6050_Read_Value+0x348>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fcd1 	bl	8000540 <__aeabi_dmul>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fd ffc3 	bl	8000b30 <__aeabi_d2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4aa9      	ldr	r2, [pc, #676]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002bae:	6013      	str	r3, [r2, #0]
	myGyroMean.y  = (((float)myGyroRaw.y  * gyroScalingFactor) - myGyroCal.y) * 0.004;
 8002bb0:	4ba2      	ldr	r3, [pc, #648]	; (8002e3c <MPU6050_Read_Value+0x364>)
 8002bb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bbe:	4ba3      	ldr	r3, [pc, #652]	; (8002e4c <MPU6050_Read_Value+0x374>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc8:	4ba1      	ldr	r3, [pc, #644]	; (8002e50 <MPU6050_Read_Value+0x378>)
 8002bca:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd2:	ee17 0a90 	vmov	r0, s15
 8002bd6:	f7fd fc5b 	bl	8000490 <__aeabi_f2d>
 8002bda:	a391      	add	r3, pc, #580	; (adr r3, 8002e20 <MPU6050_Read_Value+0x348>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fcae 	bl	8000540 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fd ffa0 	bl	8000b30 <__aeabi_d2f>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4a98      	ldr	r2, [pc, #608]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002bf4:	6053      	str	r3, [r2, #4]
    myGyroMean.z  = (((float)myGyroRaw.z  * gyroScalingFactor) - myGyroCal.z) * 0.004;
 8002bf6:	4b91      	ldr	r3, [pc, #580]	; (8002e3c <MPU6050_Read_Value+0x364>)
 8002bf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c04:	4b91      	ldr	r3, [pc, #580]	; (8002e4c <MPU6050_Read_Value+0x374>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0e:	4b90      	ldr	r3, [pc, #576]	; (8002e50 <MPU6050_Read_Value+0x378>)
 8002c10:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c18:	ee17 0a90 	vmov	r0, s15
 8002c1c:	f7fd fc38 	bl	8000490 <__aeabi_f2d>
 8002c20:	a37f      	add	r3, pc, #508	; (adr r3, 8002e20 <MPU6050_Read_Value+0x348>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fc8b 	bl	8000540 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f7fd ff7d 	bl	8000b30 <__aeabi_d2f>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4a86      	ldr	r2, [pc, #536]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002c3a:	6093      	str	r3, [r2, #8]

    myGyroMean.x += myGyroMean.y * sin(myGyroMean.z);
 8002c3c:	4b85      	ldr	r3, [pc, #532]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fc25 	bl	8000490 <__aeabi_f2d>
 8002c46:	4604      	mov	r4, r0
 8002c48:	460d      	mov	r5, r1
 8002c4a:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc1e 	bl	8000490 <__aeabi_f2d>
 8002c54:	4680      	mov	r8, r0
 8002c56:	4689      	mov	r9, r1
 8002c58:	4b7e      	ldr	r3, [pc, #504]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc17 	bl	8000490 <__aeabi_f2d>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	ec43 2b10 	vmov	d0, r2, r3
 8002c6a:	f006 fd4d 	bl	8009708 <sin>
 8002c6e:	ec53 2b10 	vmov	r2, r3, d0
 8002c72:	4640      	mov	r0, r8
 8002c74:	4649      	mov	r1, r9
 8002c76:	f7fd fc63 	bl	8000540 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7fd faa7 	bl	80001d4 <__adddf3>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7fd ff4f 	bl	8000b30 <__aeabi_d2f>
 8002c92:	4603      	mov	r3, r0
 8002c94:	4a6f      	ldr	r2, [pc, #444]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002c96:	6013      	str	r3, [r2, #0]
    myGyroMean.y -= myGyroMean.x * sin(myGyroMean.z);
 8002c98:	4b6e      	ldr	r3, [pc, #440]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fbf7 	bl	8000490 <__aeabi_f2d>
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	460d      	mov	r5, r1
 8002ca6:	4b6b      	ldr	r3, [pc, #428]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fbf0 	bl	8000490 <__aeabi_f2d>
 8002cb0:	4680      	mov	r8, r0
 8002cb2:	4689      	mov	r9, r1
 8002cb4:	4b67      	ldr	r3, [pc, #412]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fbe9 	bl	8000490 <__aeabi_f2d>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	ec43 2b10 	vmov	d0, r2, r3
 8002cc6:	f006 fd1f 	bl	8009708 <sin>
 8002cca:	ec53 2b10 	vmov	r2, r3, d0
 8002cce:	4640      	mov	r0, r8
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	f7fd fc35 	bl	8000540 <__aeabi_dmul>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fa77 	bl	80001d0 <__aeabi_dsub>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff21 	bl	8000b30 <__aeabi_d2f>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <MPU6050_Read_Value+0x37c>)
 8002cf2:	6053      	str	r3, [r2, #4]

    accel.pitch = atan(-1*(myAccelMean.x)/sqrt(pow((myAccelMean.y),2) + pow((myAccelMean.z),2)))*RAD_TO_DEG;
 8002cf4:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	eef1 7a67 	vneg.f32	s15, s15
 8002cfe:	ee17 3a90 	vmov	r3, s15
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fbc4 	bl	8000490 <__aeabi_f2d>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fbbd 	bl	8000490 <__aeabi_f2d>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8002e28 <MPU6050_Read_Value+0x350>
 8002d1e:	ec43 2b10 	vmov	d0, r2, r3
 8002d22:	f006 fd81 	bl	8009828 <pow>
 8002d26:	ec59 8b10 	vmov	r8, r9, d0
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fbae 	bl	8000490 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8002e28 <MPU6050_Read_Value+0x350>
 8002d3c:	ec43 2b10 	vmov	d0, r2, r3
 8002d40:	f006 fd72 	bl	8009828 <pow>
 8002d44:	ec53 2b10 	vmov	r2, r3, d0
 8002d48:	4640      	mov	r0, r8
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	f7fd fa42 	bl	80001d4 <__adddf3>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	ec43 2b17 	vmov	d7, r2, r3
 8002d58:	eeb0 0a47 	vmov.f32	s0, s14
 8002d5c:	eef0 0a67 	vmov.f32	s1, s15
 8002d60:	f006 fe10 	bl	8009984 <sqrt>
 8002d64:	ec53 2b10 	vmov	r2, r3, d0
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f7fd fd12 	bl	8000794 <__aeabi_ddiv>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	ec43 2b17 	vmov	d7, r2, r3
 8002d78:	eeb0 0a47 	vmov.f32	s0, s14
 8002d7c:	eef0 0a67 	vmov.f32	s1, s15
 8002d80:	f006 fb16 	bl	80093b0 <atan>
 8002d84:	ec51 0b10 	vmov	r0, r1, d0
 8002d88:	a329      	add	r3, pc, #164	; (adr r3, 8002e30 <MPU6050_Read_Value+0x358>)
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	f7fd fbd7 	bl	8000540 <__aeabi_dmul>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd fec9 	bl	8000b30 <__aeabi_d2f>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4a2d      	ldr	r2, [pc, #180]	; (8002e58 <MPU6050_Read_Value+0x380>)
 8002da2:	6053      	str	r3, [r2, #4]
	accel.roll  = atan((myAccelMean.y)/sqrt(pow((myAccelMean.x),2) + pow((myAccelMean.z),2)))*RAD_TO_DEG;
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fb71 	bl	8000490 <__aeabi_f2d>
 8002dae:	4604      	mov	r4, r0
 8002db0:	460d      	mov	r5, r1
 8002db2:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fb6a 	bl	8000490 <__aeabi_f2d>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8002e28 <MPU6050_Read_Value+0x350>
 8002dc4:	ec43 2b10 	vmov	d0, r2, r3
 8002dc8:	f006 fd2e 	bl	8009828 <pow>
 8002dcc:	ec59 8b10 	vmov	r8, r9, d0
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <MPU6050_Read_Value+0x370>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fb5b 	bl	8000490 <__aeabi_f2d>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002e28 <MPU6050_Read_Value+0x350>
 8002de2:	ec43 2b10 	vmov	d0, r2, r3
 8002de6:	f006 fd1f 	bl	8009828 <pow>
 8002dea:	ec53 2b10 	vmov	r2, r3, d0
 8002dee:	4640      	mov	r0, r8
 8002df0:	4649      	mov	r1, r9
 8002df2:	f7fd f9ef 	bl	80001d4 <__adddf3>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	ec43 2b17 	vmov	d7, r2, r3
 8002dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8002e02:	eef0 0a67 	vmov.f32	s1, s15
 8002e06:	f006 fdbd 	bl	8009984 <sqrt>
 8002e0a:	ec53 2b10 	vmov	r2, r3, d0
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4629      	mov	r1, r5
 8002e12:	f7fd fcbf 	bl	8000794 <__aeabi_ddiv>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	e01f      	b.n	8002e5c <MPU6050_Read_Value+0x384>
 8002e1c:	f3af 8000 	nop.w
 8002e20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e24:	3f70624d 	.word	0x3f70624d
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	40000000 	.word	0x40000000
 8002e30:	1a47a9e3 	.word	0x1a47a9e3
 8002e34:	404ca5dc 	.word	0x404ca5dc
 8002e38:	20000478 	.word	0x20000478
 8002e3c:	200001d0 	.word	0x200001d0
 8002e40:	200000e8 	.word	0x200000e8
 8002e44:	2000046c 	.word	0x2000046c
 8002e48:	2000015c 	.word	0x2000015c
 8002e4c:	200000ec 	.word	0x200000ec
 8002e50:	20000448 	.word	0x20000448
 8002e54:	200000f8 	.word	0x200000f8
 8002e58:	200001c4 	.word	0x200001c4
 8002e5c:	ec43 2b17 	vmov	d7, r2, r3
 8002e60:	eeb0 0a47 	vmov.f32	s0, s14
 8002e64:	eef0 0a67 	vmov.f32	s1, s15
 8002e68:	f006 faa2 	bl	80093b0 <atan>
 8002e6c:	ec51 0b10 	vmov	r0, r1, d0
 8002e70:	a33e      	add	r3, pc, #248	; (adr r3, 8002f6c <MPU6050_Read_Value+0x494>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fb63 	bl	8000540 <__aeabi_dmul>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd fe55 	bl	8000b30 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a35      	ldr	r2, [pc, #212]	; (8002f60 <MPU6050_Read_Value+0x488>)
 8002e8a:	6093      	str	r3, [r2, #8]

	mpu6050.pitch = (0.99 * (mpu6050.pitch + myGyroMean.y)) + (0.01 * accel.pitch);
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <MPU6050_Read_Value+0x48c>)
 8002e8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e92:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <MPU6050_Read_Value+0x490>)
 8002e94:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9c:	ee17 0a90 	vmov	r0, s15
 8002ea0:	f7fd faf6 	bl	8000490 <__aeabi_f2d>
 8002ea4:	a32a      	add	r3, pc, #168	; (adr r3, 8002f50 <MPU6050_Read_Value+0x478>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fb49 	bl	8000540 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4614      	mov	r4, r2
 8002eb4:	461d      	mov	r5, r3
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <MPU6050_Read_Value+0x488>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fae8 	bl	8000490 <__aeabi_f2d>
 8002ec0:	a325      	add	r3, pc, #148	; (adr r3, 8002f58 <MPU6050_Read_Value+0x480>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd fb3b 	bl	8000540 <__aeabi_dmul>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4620      	mov	r0, r4
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	f7fd f97f 	bl	80001d4 <__adddf3>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f7fd fe27 	bl	8000b30 <__aeabi_d2f>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <MPU6050_Read_Value+0x48c>)
 8002ee6:	6053      	str	r3, [r2, #4]
	mpu6050.roll  = (0.99 * (mpu6050.roll + myGyroMean.x)) + (0.01 * accel.roll);
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <MPU6050_Read_Value+0x48c>)
 8002eea:	ed93 7a02 	vldr	s14, [r3, #8]
 8002eee:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <MPU6050_Read_Value+0x490>)
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef8:	ee17 0a90 	vmov	r0, s15
 8002efc:	f7fd fac8 	bl	8000490 <__aeabi_f2d>
 8002f00:	a313      	add	r3, pc, #76	; (adr r3, 8002f50 <MPU6050_Read_Value+0x478>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f7fd fb1b 	bl	8000540 <__aeabi_dmul>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4614      	mov	r4, r2
 8002f10:	461d      	mov	r5, r3
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <MPU6050_Read_Value+0x488>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd faba 	bl	8000490 <__aeabi_f2d>
 8002f1c:	a30e      	add	r3, pc, #56	; (adr r3, 8002f58 <MPU6050_Read_Value+0x480>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fb0d 	bl	8000540 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f951 	bl	80001d4 <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fdf9 	bl	8000b30 <__aeabi_d2f>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <MPU6050_Read_Value+0x48c>)
 8002f42:	6093      	str	r3, [r2, #8]
}
 8002f44:	bf00      	nop
 8002f46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f4a:	bf00      	nop
 8002f4c:	f3af 8000 	nop.w
 8002f50:	7ae147ae 	.word	0x7ae147ae
 8002f54:	3fefae14 	.word	0x3fefae14
 8002f58:	47ae147b 	.word	0x47ae147b
 8002f5c:	3f847ae1 	.word	0x3f847ae1
 8002f60:	200001c4 	.word	0x200001c4
 8002f64:	20000150 	.word	0x20000150
 8002f68:	200000f8 	.word	0x200000f8
 8002f6c:	1a47a9e3 	.word	0x1a47a9e3
 8002f70:	404ca5dc 	.word	0x404ca5dc

08002f74 <aeskCRCCalculator>:

#include "AESK_Data_Pack_lib.h"
#include "Satellite_Data.h"

uint16_t aeskCRCCalculator(uint8_t *frame, size_t framesize)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	uint16_t crc16_data = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	81fb      	strh	r3, [r7, #14]
	uint8_t data = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	733b      	strb	r3, [r7, #12]
	for (uint8_t mlen = 0; mlen < framesize; mlen++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	737b      	strb	r3, [r7, #13]
 8002f8a:	e027      	b.n	8002fdc <aeskCRCCalculator+0x68>
	{
		data = frame[mlen] ^ ((uint8_t) (crc16_data) & (uint8_t) (0xFF));
 8002f8c:	7b7b      	ldrb	r3, [r7, #13]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	89fb      	ldrh	r3, [r7, #14]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	4053      	eors	r3, r2
 8002f9a:	733b      	strb	r3, [r7, #12]
		data ^= data << 4;
 8002f9c:	7b3b      	ldrb	r3, [r7, #12]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	b25a      	sxtb	r2, r3
 8002fa2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002fa6:	4053      	eors	r3, r2
 8002fa8:	b25b      	sxtb	r3, r3
 8002faa:	733b      	strb	r3, [r7, #12]
		crc16_data = ((((uint16_t) data << 8) | ((crc16_data & 0xFF00) >> 8)) ^ (uint8_t) (data >> 4) ^ ((uint16_t) data << 3));
 8002fac:	7b3b      	ldrb	r3, [r7, #12]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	b21a      	sxth	r2, r3
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	7b3b      	ldrb	r3, [r7, #12]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	4053      	eors	r3, r2
 8002fc8:	b21a      	sxth	r2, r3
 8002fca:	7b3b      	ldrb	r3, [r7, #12]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	4053      	eors	r3, r2
 8002fd2:	b21b      	sxth	r3, r3
 8002fd4:	81fb      	strh	r3, [r7, #14]
	for (uint8_t mlen = 0; mlen < framesize; mlen++)
 8002fd6:	7b7b      	ldrb	r3, [r7, #13]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	737b      	strb	r3, [r7, #13]
 8002fdc:	7b7b      	ldrb	r3, [r7, #13]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d8d3      	bhi.n	8002f8c <aeskCRCCalculator+0x18>
	}
	return (crc16_data);
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	0000      	movs	r0, r0
 8002ff4:	0000      	movs	r0, r0
	...

08002ff8 <CrateTelemetryPack>:

void CrateTelemetryPack(Telemetry *telemetry){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	  telemetry->header_1      = HEADER_1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2213      	movs	r2, #19
 8003004:	701a      	strb	r2, [r3, #0]
	  telemetry->header_2      = HEADER_2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2217      	movs	r2, #23
 800300a:	705a      	strb	r2, [r3, #1]
	  telemetry->lenght        = TEL_DATA_LEN;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	222f      	movs	r2, #47	; 0x2f
 8003010:	709a      	strb	r2, [r3, #2]
	  telemetry->pressure      = (uint16_t) (LPS22.Barometer_Pressure * pow(10,EXPONENTIAL_1));
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <CrateTelemetryPack+0x1e8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa3a 	bl	8000490 <__aeabi_f2d>
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <CrateTelemetryPack+0x1ec>)
 8003022:	f7fd fa8d 	bl	8000540 <__aeabi_dmul>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fd5f 	bl	8000af0 <__aeabi_d2uiz>
 8003032:	4603      	mov	r3, r0
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	819a      	strh	r2, [r3, #12]
	  telemetry->altitude      = (uint16_t) (LPS22.Barometer_Altitude * pow(10,EXPONENTIAL_1));
 800303a:	4b69      	ldr	r3, [pc, #420]	; (80031e0 <CrateTelemetryPack+0x1e8>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa26 	bl	8000490 <__aeabi_f2d>
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <CrateTelemetryPack+0x1ec>)
 800304a:	f7fd fa79 	bl	8000540 <__aeabi_dmul>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f7fd fd4b 	bl	8000af0 <__aeabi_d2uiz>
 800305a:	4603      	mov	r3, r0
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	81da      	strh	r2, [r3, #14]
	  telemetry->velocity      = (uint16_t) (LPS22.Barometer_Speed * pow(10,EXPONENTIAL_1));
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <CrateTelemetryPack+0x1e8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fa12 	bl	8000490 <__aeabi_f2d>
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	4b5c      	ldr	r3, [pc, #368]	; (80031e4 <CrateTelemetryPack+0x1ec>)
 8003072:	f7fd fa65 	bl	8000540 <__aeabi_dmul>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fd37 	bl	8000af0 <__aeabi_d2uiz>
 8003082:	4603      	mov	r3, r0
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	821a      	strh	r2, [r3, #16]
//	  telemetry->temperature     = (uint16_t) (36 * pow(10,EXPONENTIAL_1));
	  telemetry->voltage       = (uint16_t) (11 * pow(10,EXPONENTIAL_1));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	226e      	movs	r2, #110	; 0x6e
 800308e:	829a      	strh	r2, [r3, #20]
	  telemetry->gps_latitude  = (uint32_t) (gpsData.latitude_f32 * pow(10,EXPONENTIAL_6));
 8003090:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <CrateTelemetryPack+0x1f0>)
 8003092:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd f9fa 	bl	8000490 <__aeabi_f2d>
 800309c:	a34e      	add	r3, pc, #312	; (adr r3, 80031d8 <CrateTelemetryPack+0x1e0>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd fa4d 	bl	8000540 <__aeabi_dmul>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7fd fd1f 	bl	8000af0 <__aeabi_d2uiz>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
	  telemetry->gps_longitude = (uint32_t) (gpsData.latitude_f32 * pow(10,EXPONENTIAL_6));
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <CrateTelemetryPack+0x1f0>)
 80030ba:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd f9e6 	bl	8000490 <__aeabi_f2d>
 80030c4:	a344      	add	r3, pc, #272	; (adr r3, 80031d8 <CrateTelemetryPack+0x1e0>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f7fd fa39 	bl	8000540 <__aeabi_dmul>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7fd fd0b 	bl	8000af0 <__aeabi_d2uiz>
 80030da:	4602      	mov	r2, r0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	61da      	str	r2, [r3, #28]
	  telemetry->gps_altitude  = (uint32_t) (gpsData.latitude_f32 * pow(10,EXPONENTIAL_6));
 80030e0:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <CrateTelemetryPack+0x1f0>)
 80030e2:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd f9d2 	bl	8000490 <__aeabi_f2d>
 80030ec:	a33a      	add	r3, pc, #232	; (adr r3, 80031d8 <CrateTelemetryPack+0x1e0>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd fa25 	bl	8000540 <__aeabi_dmul>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7fd fcf7 	bl	8000af0 <__aeabi_d2uiz>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	621a      	str	r2, [r3, #32]
	  telemetry->yaw		   = (uint16_t) ((mpu6050.yaw + 90) * pow(10,EXPONENTIAL_1));
 8003108:	4b38      	ldr	r3, [pc, #224]	; (80031ec <CrateTelemetryPack+0x1f4>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80031f0 <CrateTelemetryPack+0x1f8>
 8003112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003116:	ee17 0a90 	vmov	r0, s15
 800311a:	f7fd f9b9 	bl	8000490 <__aeabi_f2d>
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <CrateTelemetryPack+0x1ec>)
 8003124:	f7fd fa0c 	bl	8000540 <__aeabi_dmul>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	f7fd fcde 	bl	8000af0 <__aeabi_d2uiz>
 8003134:	4603      	mov	r3, r0
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	859a      	strh	r2, [r3, #44]	; 0x2c
	  telemetry->pitch		   = (uint16_t) ((mpu6050.pitch + 90) * pow(10,EXPONENTIAL_1));
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <CrateTelemetryPack+0x1f4>)
 800313e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003142:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80031f0 <CrateTelemetryPack+0x1f8>
 8003146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800314a:	ee17 0a90 	vmov	r0, s15
 800314e:	f7fd f99f 	bl	8000490 <__aeabi_f2d>
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <CrateTelemetryPack+0x1ec>)
 8003158:	f7fd f9f2 	bl	8000540 <__aeabi_dmul>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f7fd fcc4 	bl	8000af0 <__aeabi_d2uiz>
 8003168:	4603      	mov	r3, r0
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
	  telemetry->roll		   = (uint16_t) ((mpu6050.roll + 90) * pow(10,EXPONENTIAL_1));
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <CrateTelemetryPack+0x1f4>)
 8003172:	edd3 7a02 	vldr	s15, [r3, #8]
 8003176:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80031f0 <CrateTelemetryPack+0x1f8>
 800317a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800317e:	ee17 0a90 	vmov	r0, s15
 8003182:	f7fd f985 	bl	8000490 <__aeabi_f2d>
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <CrateTelemetryPack+0x1ec>)
 800318c:	f7fd f9d8 	bl	8000540 <__aeabi_dmul>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	f7fd fcaa 	bl	8000af0 <__aeabi_d2uiz>
 800319c:	4603      	mov	r3, r0
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a
	  telemetry->num_turn	   = (uint16_t) (10 * pow(10,EXPONENTIAL_1));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2264      	movs	r2, #100	; 0x64
 80031a8:	85da      	strh	r2, [r3, #46]	; 0x2e
	  telemetry->power		   = (uint16_t) (125 * pow(10,EXPONENTIAL_1));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80031b0:	861a      	strh	r2, [r3, #48]	; 0x30
	  telemetry->rssi	  	   = 0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	  telemetry->last_command   = 0;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	  telemetry->last_C_state   = 0;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	  PackageTelemetryPack(telemetry);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f812 	bl	80031f4 <PackageTelemetryPack>
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	00000000 	.word	0x00000000
 80031dc:	412e8480 	.word	0x412e8480
 80031e0:	20000138 	.word	0x20000138
 80031e4:	40240000 	.word	0x40240000
 80031e8:	200001dc 	.word	0x200001dc
 80031ec:	20000150 	.word	0x20000150
 80031f0:	42b40000 	.word	0x42b40000

080031f4 <PackageTelemetryPack>:

void PackageTelemetryPack(Telemetry *telemetry){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	81fb      	strh	r3, [r7, #14]
	AESK_UINT8toUINT8_LE(&telemetry->header_1, Telemetry_Package, &index);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f107 020e 	add.w	r2, r7, #14
 8003206:	4968      	ldr	r1, [pc, #416]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd feb1 	bl	8000f70 <AESK_UINT8toUINT8_LE>
	AESK_UINT8toUINT8_LE(&telemetry->header_2, Telemetry_Package,	&index);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3301      	adds	r3, #1
 8003212:	f107 020e 	add.w	r2, r7, #14
 8003216:	4964      	ldr	r1, [pc, #400]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd fea9 	bl	8000f70 <AESK_UINT8toUINT8_LE>
	AESK_UINT8toUINT8_LE(&telemetry->lenght, Telemetry_Package, &index);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3302      	adds	r3, #2
 8003222:	f107 020e 	add.w	r2, r7, #14
 8003226:	4960      	ldr	r1, [pc, #384]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fea1 	bl	8000f70 <AESK_UINT8toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->team_num, Telemetry_Package, &index);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	f107 020e 	add.w	r2, r7, #14
 8003236:	495c      	ldr	r1, [pc, #368]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fe45 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->pack_num, Telemetry_Package, &index);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3306      	adds	r3, #6
 8003242:	f107 020e 	add.w	r2, r7, #14
 8003246:	4958      	ldr	r1, [pc, #352]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd fe3d 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT32toUINT8_LE(&telemetry->time, Telemetry_Package, &index);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3308      	adds	r3, #8
 8003252:	f107 020e 	add.w	r2, r7, #14
 8003256:	4954      	ldr	r1, [pc, #336]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fe57 	bl	8000f0c <AESK_UINT32toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->pressure, Telemetry_Package, &index);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	330c      	adds	r3, #12
 8003262:	f107 020e 	add.w	r2, r7, #14
 8003266:	4950      	ldr	r1, [pc, #320]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd fe2d 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->altitude, Telemetry_Package, &index);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	330e      	adds	r3, #14
 8003272:	f107 020e 	add.w	r2, r7, #14
 8003276:	494c      	ldr	r1, [pc, #304]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fe25 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->velocity, Telemetry_Package, &index);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3310      	adds	r3, #16
 8003282:	f107 020e 	add.w	r2, r7, #14
 8003286:	4948      	ldr	r1, [pc, #288]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd fe1d 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->temperature, Telemetry_Package, &index);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3312      	adds	r3, #18
 8003292:	f107 020e 	add.w	r2, r7, #14
 8003296:	4944      	ldr	r1, [pc, #272]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd fe15 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->voltage, Telemetry_Package,&index);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3314      	adds	r3, #20
 80032a2:	f107 020e 	add.w	r2, r7, #14
 80032a6:	4940      	ldr	r1, [pc, #256]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd fe0d 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT32toUINT8_LE(&telemetry->gps_latitude, Telemetry_Package, &index);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3318      	adds	r3, #24
 80032b2:	f107 020e 	add.w	r2, r7, #14
 80032b6:	493c      	ldr	r1, [pc, #240]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fe27 	bl	8000f0c <AESK_UINT32toUINT8_LE>
	AESK_UINT32toUINT8_LE(&telemetry->gps_longitude, Telemetry_Package, &index);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	331c      	adds	r3, #28
 80032c2:	f107 020e 	add.w	r2, r7, #14
 80032c6:	4938      	ldr	r1, [pc, #224]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fe1f 	bl	8000f0c <AESK_UINT32toUINT8_LE>
	AESK_UINT32toUINT8_LE(&telemetry->gps_altitude, Telemetry_Package, &index);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3320      	adds	r3, #32
 80032d2:	f107 020e 	add.w	r2, r7, #14
 80032d6:	4934      	ldr	r1, [pc, #208]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd fe17 	bl	8000f0c <AESK_UINT32toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->stm_satellite_status.all, Telemetry_Package, &index);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3324      	adds	r3, #36	; 0x24
 80032e2:	f107 020e 	add.w	r2, r7, #14
 80032e6:	4930      	ldr	r1, [pc, #192]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd fded 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->esp_satellite_status.all, Telemetry_Package, &index);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3326      	adds	r3, #38	; 0x26
 80032f2:	f107 020e 	add.w	r2, r7, #14
 80032f6:	492c      	ldr	r1, [pc, #176]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd fde5 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->pitch, Telemetry_Package, &index);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3328      	adds	r3, #40	; 0x28
 8003302:	f107 020e 	add.w	r2, r7, #14
 8003306:	4928      	ldr	r1, [pc, #160]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fddd 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->roll, Telemetry_Package, &index);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	332a      	adds	r3, #42	; 0x2a
 8003312:	f107 020e 	add.w	r2, r7, #14
 8003316:	4924      	ldr	r1, [pc, #144]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fdd5 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->yaw, Telemetry_Package, &index);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	332c      	adds	r3, #44	; 0x2c
 8003322:	f107 020e 	add.w	r2, r7, #14
 8003326:	4920      	ldr	r1, [pc, #128]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fdcd 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->num_turn, Telemetry_Package, &index);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	332e      	adds	r3, #46	; 0x2e
 8003332:	f107 020e 	add.w	r2, r7, #14
 8003336:	491c      	ldr	r1, [pc, #112]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd fdc5 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT16toUINT8_LE(&telemetry->power, Telemetry_Package,&index);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3330      	adds	r3, #48	; 0x30
 8003342:	f107 020e 	add.w	r2, r7, #14
 8003346:	4918      	ldr	r1, [pc, #96]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fdbd 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
	AESK_UINT8toUINT8_LE(&telemetry->rssi, Telemetry_Package, &index);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3332      	adds	r3, #50	; 0x32
 8003352:	f107 020e 	add.w	r2, r7, #14
 8003356:	4914      	ldr	r1, [pc, #80]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd fe09 	bl	8000f70 <AESK_UINT8toUINT8_LE>
	AESK_UINT8toUINT8_LE(&telemetry->last_command, Telemetry_Package, &index);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3333      	adds	r3, #51	; 0x33
 8003362:	f107 020e 	add.w	r2, r7, #14
 8003366:	4910      	ldr	r1, [pc, #64]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd fe01 	bl	8000f70 <AESK_UINT8toUINT8_LE>
	AESK_UINT8toUINT8_LE(&telemetry->last_C_state, Telemetry_Package, &index);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3334      	adds	r3, #52	; 0x34
 8003372:	f107 020e 	add.w	r2, r7, #14
 8003376:	490c      	ldr	r1, [pc, #48]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fdf9 	bl	8000f70 <AESK_UINT8toUINT8_LE>
	telemetry->CrC = aeskCRCCalculator((Telemetry_Package + 3), TEL_DATA_LEN);
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <PackageTelemetryPack+0x1b8>)
 8003380:	212f      	movs	r1, #47	; 0x2f
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fdf6 	bl	8002f74 <aeskCRCCalculator>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	86da      	strh	r2, [r3, #54]	; 0x36
	AESK_UINT16toUINT8_LE(&telemetry->CrC, Telemetry_Package,&index);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3336      	adds	r3, #54	; 0x36
 8003394:	f107 020e 	add.w	r2, r7, #14
 8003398:	4903      	ldr	r1, [pc, #12]	; (80033a8 <PackageTelemetryPack+0x1b4>)
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd fd94 	bl	8000ec8 <AESK_UINT16toUINT8_LE>
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000104 	.word	0x20000104
 80033ac:	20000107 	.word	0x20000107

080033b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033b8:	f001 f9e2 	bl	8004780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033bc:	f000 f91a 	bl	80035f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c0:	f000 fc60 	bl	8003c84 <MX_GPIO_Init>
  MX_DMA_Init();
 80033c4:	f000 fc18 	bl	8003bf8 <MX_DMA_Init>
  MX_I2C1_Init();
 80033c8:	f000 fa74 	bl	80038b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80033cc:	f000 faa0 	bl	8003910 <MX_I2C2_Init>
  MX_I2C3_Init();
 80033d0:	f000 facc 	bl	800396c <MX_I2C3_Init>
  MX_TIM1_Init();
 80033d4:	f000 faf8 	bl	80039c8 <MX_TIM1_Init>
  MX_UART5_Init();
 80033d8:	f000 fbba 	bl	8003b50 <MX_UART5_Init>
  MX_ADC1_Init();
 80033dc:	f000 f974 	bl	80036c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80033e0:	f000 f9c4 	bl	800376c <MX_ADC2_Init>
  MX_ADC3_Init();
 80033e4:	f000 fa14 	bl	8003810 <MX_ADC3_Init>
  MX_USART6_UART_Init();
 80033e8:	f000 fbdc 	bl	8003ba4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80033ec:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <main+0x214>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	709a      	strb	r2, [r3, #2]
  myMpuConfig.ClockSource = Internal_8MHz;
 80033f2:	4b74      	ldr	r3, [pc, #464]	; (80035c4 <main+0x214>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80033f8:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <main+0x214>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	70da      	strb	r2, [r3, #3]
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80033fe:	4b71      	ldr	r3, [pc, #452]	; (80035c4 <main+0x214>)
 8003400:	2201      	movs	r2, #1
 8003402:	705a      	strb	r2, [r3, #1]
  myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <main+0x214>)
 8003406:	2200      	movs	r2, #0
 8003408:	711a      	strb	r2, [r3, #4]
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//  InitMotorLib(&htim1);
  MPU6050_Init(&hi2c2);
 800340a:	486f      	ldr	r0, [pc, #444]	; (80035c8 <main+0x218>)
 800340c:	f7ff f8fa 	bl	8002604 <MPU6050_Init>
  MPU6050_Config(&myMpuConfig);
 8003410:	486c      	ldr	r0, [pc, #432]	; (80035c4 <main+0x214>)
 8003412:	f7ff f94b 	bl	80026ac <MPU6050_Config>
  MPU6050_Get_Cal();
 8003416:	f7ff fa7f 	bl	8002918 <MPU6050_Get_Cal>
//  BarometerInit();
//  InitESC();
//  ManyometerInit();
//  HMC5883LInit();
  Uart_DMA_Receive_Start(&huart5, &esp32_buf);
 800341a:	496c      	ldr	r1, [pc, #432]	; (80035cc <main+0x21c>)
 800341c:	486c      	ldr	r0, [pc, #432]	; (80035d0 <main+0x220>)
 800341e:	f7fd fdc1 	bl	8000fa4 <Uart_DMA_Receive_Start>
  Uart_DMA_Receive_Start(&huart6, &uart_buf);
 8003422:	496c      	ldr	r1, [pc, #432]	; (80035d4 <main+0x224>)
 8003424:	486c      	ldr	r0, [pc, #432]	; (80035d8 <main+0x228>)
 8003426:	f7fd fdbd 	bl	8000fa4 <Uart_DMA_Receive_Start>
//  ManyometerInit();
//  Magno_Offset_Calc();
  myBmpConfig.Over_Sample_Setting = OSS_0;
 800342a:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <main+0x22c>)
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
  BMP180_Config(&myBmpConfig);
 8003430:	486a      	ldr	r0, [pc, #424]	; (80035dc <main+0x22c>)
 8003432:	f7fd fe87 	bl	8001144 <BMP180_Config>
  BMP180_Get_Cal();
 8003436:	f7fd fe95 	bl	8001164 <BMP180_Get_Cal>
  ZeroPBarometer();
 800343a:	f7fd ff1d 	bl	8001278 <ZeroPBarometer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(tt.tasks.task_1000_Hz == 1){
 800343e:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <main+0x230>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <main+0xa6>
//		  MOTOR_DUTY_CYCLE(&htim1, SERVO_PITCH, duty);
//		  angle = DutytoAngle(duty);
//		  __HAL_TIM_GET_COMPARE();
//		  htim1->Instance->CCR1 = dutydeneme;

		  tt.tasks.task_1000_Hz = 0;
 800344c:	4a64      	ldr	r2, [pc, #400]	; (80035e0 <main+0x230>)
 800344e:	7813      	ldrb	r3, [r2, #0]
 8003450:	f36f 0300 	bfc	r3, #0, #1
 8003454:	7013      	strb	r3, [r2, #0]
	  }
	  if(tt.tasks.task_250_Hz == 1){
 8003456:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <main+0x230>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d006      	beq.n	8003472 <main+0xc2>
//		  uint16_t read_Byte = read_DMA_Buffer(&huart5, &esp32_buf, tempBuf);
//		  if(read_Byte)
//		  {
//			  ESP32_Data_Control(&esp32_data, tempBuf, read_Byte);
//		  }
		  MPU6050_Read_Value();
 8003464:	f7ff fb38 	bl	8002ad8 <MPU6050_Read_Value>
//		  ServoRotate();
		  tt.tasks.task_250_Hz = 0;
 8003468:	4a5d      	ldr	r2, [pc, #372]	; (80035e0 <main+0x230>)
 800346a:	7813      	ldrb	r3, [r2, #0]
 800346c:	f36f 0341 	bfc	r3, #1, #1
 8003470:	7013      	strb	r3, [r2, #0]
	  }
	  if(tt.tasks.task_200_Hz == 1){
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <main+0x230>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <main+0xda>

		  tt.tasks.task_200_Hz = 0;
 8003480:	4a57      	ldr	r2, [pc, #348]	; (80035e0 <main+0x230>)
 8003482:	7813      	ldrb	r3, [r2, #0]
 8003484:	f36f 0382 	bfc	r3, #2, #1
 8003488:	7013      	strb	r3, [r2, #0]
	  }
	  if(tt.tasks.task_100_Hz == 1){
 800348a:	4b55      	ldr	r3, [pc, #340]	; (80035e0 <main+0x230>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d02d      	beq.n	80034f4 <main+0x144>
		  switch(count)
 8003498:	4b52      	ldr	r3, [pc, #328]	; (80035e4 <main+0x234>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d01c      	beq.n	80034da <main+0x12a>
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	dc22      	bgt.n	80034ea <main+0x13a>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <main+0xfe>
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d009      	beq.n	80034c0 <main+0x110>
 80034ac:	e01d      	b.n	80034ea <main+0x13a>
		  {
		  	  case WFIRST_TIME:
		  		BMP180_Set_TempRaw_Data();
 80034ae:	f7fe f933 	bl	8001718 <BMP180_Set_TempRaw_Data>
		  		count += 2;
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <main+0x234>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	3302      	adds	r3, #2
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b4a      	ldr	r3, [pc, #296]	; (80035e4 <main+0x234>)
 80034bc:	701a      	strb	r2, [r3, #0]
		  		break;
 80034be:	e014      	b.n	80034ea <main+0x13a>
		  	  case STEP_ONE:
		  		BMP180_Get_PressRaw_Data();
 80034c0:	f7fe fb9c 	bl	8001bfc <BMP180_Get_PressRaw_Data>
		  		BMP180_Get_True_Data();
 80034c4:	f7fe f960 	bl	8001788 <BMP180_Get_True_Data>
		  		BMP180_Set_TempRaw_Data();
 80034c8:	f7fe f926 	bl	8001718 <BMP180_Set_TempRaw_Data>
		  		count++;
 80034cc:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <main+0x234>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <main+0x234>)
 80034d6:	701a      	strb	r2, [r3, #0]
		  		break;
 80034d8:	e007      	b.n	80034ea <main+0x13a>
		  	  case STEP_TWO:
		  		BMP180_Get_TempRaw_Data();
 80034da:	f7fe f935 	bl	8001748 <BMP180_Get_TempRaw_Data>
		  		BMP180_Set_PressRaw_Data();
 80034de:	f7fe fb6d 	bl	8001bbc <BMP180_Set_PressRaw_Data>
		  		count = 1;
 80034e2:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <main+0x234>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
		  		break;
 80034e8:	bf00      	nop
		  }
		  tt.tasks.task_100_Hz = 0;
 80034ea:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <main+0x230>)
 80034ec:	7813      	ldrb	r3, [r2, #0]
 80034ee:	f36f 03c3 	bfc	r3, #3, #1
 80034f2:	7013      	strb	r3, [r2, #0]
	  }
	  if(tt.tasks.task_75_Hz == 1){
 80034f4:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <main+0x230>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <main+0x15c>
//		  ManyometerReadValue();
		  //HMC5883LReadValue();
//		  BarometerReadValues();
//		  BarometerAltitude();
		  tt.tasks.task_75_Hz = 0;
 8003502:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <main+0x230>)
 8003504:	7813      	ldrb	r3, [r2, #0]
 8003506:	f36f 1304 	bfc	r3, #4, #1
 800350a:	7013      	strb	r3, [r2, #0]
	  }
	  if(tt.tasks.task_50_Hz == 1){
 800350c:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <main+0x230>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <main+0x174>

		  tt.tasks.task_50_Hz = 0;
 800351a:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <main+0x230>)
 800351c:	7813      	ldrb	r3, [r2, #0]
 800351e:	f36f 1345 	bfc	r3, #5, #1
 8003522:	7013      	strb	r3, [r2, #0]
	  }
	  if(tt.tasks.task_20_Hz == 1){
 8003524:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <main+0x230>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <main+0x18c>

		  tt.tasks.task_20_Hz = 0;
 8003532:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <main+0x230>)
 8003534:	7813      	ldrb	r3, [r2, #0]
 8003536:	f36f 1386 	bfc	r3, #6, #1
 800353a:	7013      	strb	r3, [r2, #0]
	  }
	  if(tt.tasks.task_10_Hz == 1){
 800353c:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <main+0x230>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <main+0x1a4>
//		  ManyometerReadValue();
//		  HAL_ADC_Start_IT(&hadc2);
		  tt.tasks.task_10_Hz = 0;
 800354a:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <main+0x230>)
 800354c:	7813      	ldrb	r3, [r2, #0]
 800354e:	f36f 13c7 	bfc	r3, #7, #1
 8003552:	7013      	strb	r3, [r2, #0]
	  }
	  if(tt.tasks.task_2_Hz == 1){
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <main+0x230>)
 8003556:	785b      	ldrb	r3, [r3, #1]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <main+0x1cc>
		  CrateTelemetryPack(&telemetry);
 8003562:	4821      	ldr	r0, [pc, #132]	; (80035e8 <main+0x238>)
 8003564:	f7ff fd48 	bl	8002ff8 <CrateTelemetryPack>
		  HAL_UART_Transmit_DMA(&huart5, Telemetry_Package, (uint16_t)sizeof(Telemetry_Package));
 8003568:	2234      	movs	r2, #52	; 0x34
 800356a:	4920      	ldr	r1, [pc, #128]	; (80035ec <main+0x23c>)
 800356c:	4818      	ldr	r0, [pc, #96]	; (80035d0 <main+0x220>)
 800356e:	f005 fab7 	bl	8008ae0 <HAL_UART_Transmit_DMA>
		  tt.tasks.task_2_Hz = 0;
 8003572:	4a1b      	ldr	r2, [pc, #108]	; (80035e0 <main+0x230>)
 8003574:	7853      	ldrb	r3, [r2, #1]
 8003576:	f36f 0300 	bfc	r3, #0, #1
 800357a:	7053      	strb	r3, [r2, #1]
	  }
	  if(tt.tasks.task_1_Hz == 1){
 800357c:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <main+0x230>)
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	f43f af59 	beq.w	800343e <main+0x8e>
		  uint8_t tempBuf[1024];
		  uint16_t read_Byte = read_DMA_Buffer(&huart6, &uart_buf, tempBuf);
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	461a      	mov	r2, r3
 8003590:	4910      	ldr	r1, [pc, #64]	; (80035d4 <main+0x224>)
 8003592:	4811      	ldr	r0, [pc, #68]	; (80035d8 <main+0x228>)
 8003594:	f7fd fd35 	bl	8001002 <read_DMA_Buffer>
 8003598:	4603      	mov	r3, r0
 800359a:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
		  if(read_Byte)
 800359e:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <main+0x206>
		  {
			 GPS_Data_Control(&gpsData, tempBuf, read_Byte);
 80035a6:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	480f      	ldr	r0, [pc, #60]	; (80035f0 <main+0x240>)
 80035b2:	f7fe fb99 	bl	8001ce8 <GPS_Data_Control>
		  }
		  tt.tasks.task_1_Hz = 0;
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <main+0x230>)
 80035b8:	7853      	ldrb	r3, [r2, #1]
 80035ba:	f36f 0341 	bfc	r3, #1, #1
 80035be:	7053      	strb	r3, [r2, #1]
	  if(tt.tasks.task_1000_Hz == 1){
 80035c0:	e73d      	b.n	800343e <main+0x8e>
 80035c2:	bf00      	nop
 80035c4:	200010d0 	.word	0x200010d0
 80035c8:	20000de8 	.word	0x20000de8
 80035cc:	20000884 	.word	0x20000884
 80035d0:	20000e74 	.word	0x20000e74
 80035d4:	20000480 	.word	0x20000480
 80035d8:	20001000 	.word	0x20001000
 80035dc:	20000fb0 	.word	0x20000fb0
 80035e0:	20000fac 	.word	0x20000fac
 80035e4:	20000ffc 	.word	0x20000ffc
 80035e8:	20000e3c 	.word	0x20000e3c
 80035ec:	20000104 	.word	0x20000104
 80035f0:	200001dc 	.word	0x200001dc

080035f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b094      	sub	sp, #80	; 0x50
 80035f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035fa:	f107 0320 	add.w	r3, r7, #32
 80035fe:	2230      	movs	r2, #48	; 0x30
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f005 fecc 	bl	80093a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <SystemClock_Config+0xcc>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4a27      	ldr	r2, [pc, #156]	; (80036c0 <SystemClock_Config+0xcc>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	6413      	str	r3, [r2, #64]	; 0x40
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <SystemClock_Config+0xcc>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003634:	2300      	movs	r3, #0
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <SystemClock_Config+0xd0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <SystemClock_Config+0xd0>)
 800363e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <SystemClock_Config+0xd0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003650:	2301      	movs	r3, #1
 8003652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800365a:	2302      	movs	r3, #2
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800365e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003664:	230f      	movs	r3, #15
 8003666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003668:	2360      	movs	r3, #96	; 0x60
 800366a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800366c:	2302      	movs	r3, #2
 800366e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003670:	2304      	movs	r3, #4
 8003672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003674:	f107 0320 	add.w	r3, r7, #32
 8003678:	4618      	mov	r0, r3
 800367a:	f003 ffb9 	bl	80075f0 <HAL_RCC_OscConfig>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003684:	f000 fb82 	bl	8003d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003688:	230f      	movs	r3, #15
 800368a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800368c:	2302      	movs	r3, #2
 800368e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8003690:	23a0      	movs	r3, #160	; 0xa0
 8003692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800369a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800369e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fa1a 	bl	8007ae0 <HAL_RCC_ClockConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80036b2:	f000 fb6b 	bl	8003d8c <Error_Handler>
  }
}
 80036b6:	bf00      	nop
 80036b8:	3750      	adds	r7, #80	; 0x50
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000

080036c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036ce:	463b      	mov	r3, r7
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80036da:	4b21      	ldr	r3, [pc, #132]	; (8003760 <MX_ADC1_Init+0x98>)
 80036dc:	4a21      	ldr	r2, [pc, #132]	; (8003764 <MX_ADC1_Init+0x9c>)
 80036de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <MX_ADC1_Init+0x98>)
 80036e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <MX_ADC1_Init+0x98>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <MX_ADC1_Init+0x98>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <MX_ADC1_Init+0x98>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036fa:	4b19      	ldr	r3, [pc, #100]	; (8003760 <MX_ADC1_Init+0x98>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <MX_ADC1_Init+0x98>)
 8003704:	2200      	movs	r2, #0
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <MX_ADC1_Init+0x98>)
 800370a:	4a17      	ldr	r2, [pc, #92]	; (8003768 <MX_ADC1_Init+0xa0>)
 800370c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <MX_ADC1_Init+0x98>)
 8003710:	2200      	movs	r2, #0
 8003712:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <MX_ADC1_Init+0x98>)
 8003716:	2201      	movs	r2, #1
 8003718:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <MX_ADC1_Init+0x98>)
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <MX_ADC1_Init+0x98>)
 8003724:	2201      	movs	r2, #1
 8003726:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003728:	480d      	ldr	r0, [pc, #52]	; (8003760 <MX_ADC1_Init+0x98>)
 800372a:	f001 f8bf 	bl	80048ac <HAL_ADC_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003734:	f000 fb2a 	bl	8003d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003738:	2302      	movs	r3, #2
 800373a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800373c:	2301      	movs	r3, #1
 800373e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003744:	463b      	mov	r3, r7
 8003746:	4619      	mov	r1, r3
 8003748:	4805      	ldr	r0, [pc, #20]	; (8003760 <MX_ADC1_Init+0x98>)
 800374a:	f001 fa47 	bl	8004bdc <HAL_ADC_ConfigChannel>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003754:	f000 fb1a 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000f18 	.word	0x20000f18
 8003764:	40012000 	.word	0x40012000
 8003768:	0f000001 	.word	0x0f000001

0800376c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003772:	463b      	mov	r3, r7
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800377e:	4b21      	ldr	r3, [pc, #132]	; (8003804 <MX_ADC2_Init+0x98>)
 8003780:	4a21      	ldr	r2, [pc, #132]	; (8003808 <MX_ADC2_Init+0x9c>)
 8003782:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003784:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <MX_ADC2_Init+0x98>)
 8003786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800378a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <MX_ADC2_Init+0x98>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <MX_ADC2_Init+0x98>)
 8003794:	2200      	movs	r2, #0
 8003796:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <MX_ADC2_Init+0x98>)
 800379a:	2200      	movs	r2, #0
 800379c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800379e:	4b19      	ldr	r3, [pc, #100]	; (8003804 <MX_ADC2_Init+0x98>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <MX_ADC2_Init+0x98>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <MX_ADC2_Init+0x98>)
 80037ae:	4a17      	ldr	r2, [pc, #92]	; (800380c <MX_ADC2_Init+0xa0>)
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037b2:	4b14      	ldr	r3, [pc, #80]	; (8003804 <MX_ADC2_Init+0x98>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <MX_ADC2_Init+0x98>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80037be:	4b11      	ldr	r3, [pc, #68]	; (8003804 <MX_ADC2_Init+0x98>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037c6:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <MX_ADC2_Init+0x98>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80037cc:	480d      	ldr	r0, [pc, #52]	; (8003804 <MX_ADC2_Init+0x98>)
 80037ce:	f001 f86d 	bl	80048ac <HAL_ADC_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80037d8:	f000 fad8 	bl	8003d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80037dc:	2303      	movs	r3, #3
 80037de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037e0:	2301      	movs	r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80037e8:	463b      	mov	r3, r7
 80037ea:	4619      	mov	r1, r3
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_ADC2_Init+0x98>)
 80037ee:	f001 f9f5 	bl	8004bdc <HAL_ADC_ConfigChannel>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80037f8:	f000 fac8 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000da0 	.word	0x20000da0
 8003808:	40012100 	.word	0x40012100
 800380c:	0f000001 	.word	0x0f000001

08003810 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003816:	463b      	mov	r3, r7
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003822:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003824:	4a21      	ldr	r2, [pc, #132]	; (80038ac <MX_ADC3_Init+0x9c>)
 8003826:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <MX_ADC3_Init+0x98>)
 800382a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800382e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800383c:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <MX_ADC3_Init+0x98>)
 800383e:	2200      	movs	r2, #0
 8003840:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003842:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <MX_ADC3_Init+0x98>)
 800384c:	2200      	movs	r2, #0
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003852:	4a17      	ldr	r2, [pc, #92]	; (80038b0 <MX_ADC3_Init+0xa0>)
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003858:	2200      	movs	r2, #0
 800385a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <MX_ADC3_Init+0x98>)
 800385e:	2201      	movs	r2, #1
 8003860:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <MX_ADC3_Init+0x98>)
 800386c:	2201      	movs	r2, #1
 800386e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003870:	480d      	ldr	r0, [pc, #52]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003872:	f001 f81b 	bl	80048ac <HAL_ADC_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800387c:	f000 fa86 	bl	8003d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003880:	230d      	movs	r3, #13
 8003882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003884:	2301      	movs	r3, #1
 8003886:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800388c:	463b      	mov	r3, r7
 800388e:	4619      	mov	r1, r3
 8003890:	4805      	ldr	r0, [pc, #20]	; (80038a8 <MX_ADC3_Init+0x98>)
 8003892:	f001 f9a3 	bl	8004bdc <HAL_ADC_ConfigChannel>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800389c:	f000 fa76 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000f60 	.word	0x20000f60
 80038ac:	40012200 	.word	0x40012200
 80038b0:	0f000001 	.word	0x0f000001

080038b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <MX_I2C1_Init+0x50>)
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <MX_I2C1_Init+0x54>)
 80038bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <MX_I2C1_Init+0x50>)
 80038c0:	4a12      	ldr	r2, [pc, #72]	; (800390c <MX_I2C1_Init+0x58>)
 80038c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <MX_I2C1_Init+0x50>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <MX_I2C1_Init+0x50>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <MX_I2C1_Init+0x50>)
 80038d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <MX_I2C1_Init+0x50>)
 80038da:	2200      	movs	r2, #0
 80038dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <MX_I2C1_Init+0x50>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <MX_I2C1_Init+0x50>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <MX_I2C1_Init+0x50>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038f0:	4804      	ldr	r0, [pc, #16]	; (8003904 <MX_I2C1_Init+0x50>)
 80038f2:	f002 fa49 	bl	8005d88 <HAL_I2C_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038fc:	f000 fa46 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000168 	.word	0x20000168
 8003908:	40005400 	.word	0x40005400
 800390c:	000186a0 	.word	0x000186a0

08003910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <MX_I2C2_Init+0x50>)
 8003916:	4a13      	ldr	r2, [pc, #76]	; (8003964 <MX_I2C2_Init+0x54>)
 8003918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800391a:	4b11      	ldr	r3, [pc, #68]	; (8003960 <MX_I2C2_Init+0x50>)
 800391c:	4a12      	ldr	r2, [pc, #72]	; (8003968 <MX_I2C2_Init+0x58>)
 800391e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <MX_I2C2_Init+0x50>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003926:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <MX_I2C2_Init+0x50>)
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <MX_I2C2_Init+0x50>)
 800392e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003932:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <MX_I2C2_Init+0x50>)
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <MX_I2C2_Init+0x50>)
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <MX_I2C2_Init+0x50>)
 8003942:	2200      	movs	r2, #0
 8003944:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <MX_I2C2_Init+0x50>)
 8003948:	2200      	movs	r2, #0
 800394a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800394c:	4804      	ldr	r0, [pc, #16]	; (8003960 <MX_I2C2_Init+0x50>)
 800394e:	f002 fa1b 	bl	8005d88 <HAL_I2C_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003958:	f000 fa18 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000de8 	.word	0x20000de8
 8003964:	40005800 	.word	0x40005800
 8003968:	000186a0 	.word	0x000186a0

0800396c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <MX_I2C3_Init+0x50>)
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <MX_I2C3_Init+0x54>)
 8003974:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <MX_I2C3_Init+0x50>)
 8003978:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <MX_I2C3_Init+0x58>)
 800397a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <MX_I2C3_Init+0x50>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <MX_I2C3_Init+0x50>)
 8003984:	2200      	movs	r2, #0
 8003986:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <MX_I2C3_Init+0x50>)
 800398a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800398e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <MX_I2C3_Init+0x50>)
 8003992:	2200      	movs	r2, #0
 8003994:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <MX_I2C3_Init+0x50>)
 8003998:	2200      	movs	r2, #0
 800399a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <MX_I2C3_Init+0x50>)
 800399e:	2200      	movs	r2, #0
 80039a0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <MX_I2C3_Init+0x50>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <MX_I2C3_Init+0x50>)
 80039aa:	f002 f9ed 	bl	8005d88 <HAL_I2C_Init>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80039b4:	f000 f9ea 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000ce0 	.word	0x20000ce0
 80039c0:	40005c00 	.word	0x40005c00
 80039c4:	000186a0 	.word	0x000186a0

080039c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b096      	sub	sp, #88	; 0x58
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	615a      	str	r2, [r3, #20]
 80039f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	2220      	movs	r2, #32
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f005 fccd 	bl	80093a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a06:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a08:	4a50      	ldr	r2, [pc, #320]	; (8003b4c <MX_TIM1_Init+0x184>)
 8003a0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8003a0c:	4b4e      	ldr	r3, [pc, #312]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a0e:	22a7      	movs	r2, #167	; 0xa7
 8003a10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a12:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003a18:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a1a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a20:	4b49      	ldr	r3, [pc, #292]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a26:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a2c:	4b46      	ldr	r3, [pc, #280]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a32:	4845      	ldr	r0, [pc, #276]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a34:	f004 fa24 	bl	8007e80 <HAL_TIM_Base_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003a3e:	f000 f9a5 	bl	8003d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	483e      	ldr	r0, [pc, #248]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a50:	f004 fb7c 	bl	800814c <HAL_TIM_ConfigClockSource>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003a5a:	f000 f997 	bl	8003d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a5e:	483a      	ldr	r0, [pc, #232]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a60:	f004 fa5d 	bl	8007f1e <HAL_TIM_PWM_Init>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003a6a:	f000 f98f 	bl	8003d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4832      	ldr	r0, [pc, #200]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003a7e:	f004 ff13 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003a88:	f000 f980 	bl	8003d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a8c:	2360      	movs	r3, #96	; 0x60
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aac:	2200      	movs	r2, #0
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4825      	ldr	r0, [pc, #148]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003ab2:	f004 fa8d 	bl	8007fd0 <HAL_TIM_PWM_ConfigChannel>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003abc:	f000 f966 	bl	8003d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	481f      	ldr	r0, [pc, #124]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003aca:	f004 fa81 	bl	8007fd0 <HAL_TIM_PWM_ConfigChannel>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003ad4:	f000 f95a 	bl	8003d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003adc:	2208      	movs	r2, #8
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4819      	ldr	r0, [pc, #100]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003ae2:	f004 fa75 	bl	8007fd0 <HAL_TIM_PWM_ConfigChannel>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003aec:	f000 f94e 	bl	8003d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af4:	220c      	movs	r2, #12
 8003af6:	4619      	mov	r1, r3
 8003af8:	4813      	ldr	r0, [pc, #76]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003afa:	f004 fa69 	bl	8007fd0 <HAL_TIM_PWM_ConfigChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003b04:	f000 f942 	bl	8003d8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4807      	ldr	r0, [pc, #28]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003b2c:	f004 ff38 	bl	80089a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003b36:	f000 f929 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b3a:	4803      	ldr	r0, [pc, #12]	; (8003b48 <MX_TIM1_Init+0x180>)
 8003b3c:	f000 fb08 	bl	8004150 <HAL_TIM_MspPostInit>

}
 8003b40:	bf00      	nop
 8003b42:	3758      	adds	r7, #88	; 0x58
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000fb4 	.word	0x20000fb4
 8003b4c:	40010000 	.word	0x40010000

08003b50 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003b54:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b56:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <MX_UART5_Init+0x50>)
 8003b58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003b62:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003b86:	4805      	ldr	r0, [pc, #20]	; (8003b9c <MX_UART5_Init+0x4c>)
 8003b88:	f004 ff5c 	bl	8008a44 <HAL_UART_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003b92:	f000 f8fb 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000e74 	.word	0x20000e74
 8003ba0:	40005000 	.word	0x40005000

08003ba4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <MX_USART6_UART_Init+0x50>)
 8003bac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003bb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bca:	220c      	movs	r2, #12
 8003bcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003bda:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <MX_USART6_UART_Init+0x4c>)
 8003bdc:	f004 ff32 	bl	8008a44 <HAL_UART_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003be6:	f000 f8d1 	bl	8003d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20001000 	.word	0x20001000
 8003bf4:	40011400 	.word	0x40011400

08003bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <MX_DMA_Init+0x88>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <MX_DMA_Init+0x88>)
 8003c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <MX_DMA_Init+0x88>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <MX_DMA_Init+0x88>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <MX_DMA_Init+0x88>)
 8003c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <MX_DMA_Init+0x88>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	200b      	movs	r0, #11
 8003c3c:	f001 fad1 	bl	80051e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c40:	200b      	movs	r0, #11
 8003c42:	f001 faea 	bl	800521a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	202f      	movs	r0, #47	; 0x2f
 8003c4c:	f001 fac9 	bl	80051e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003c50:	202f      	movs	r0, #47	; 0x2f
 8003c52:	f001 fae2 	bl	800521a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2039      	movs	r0, #57	; 0x39
 8003c5c:	f001 fac1 	bl	80051e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003c60:	2039      	movs	r0, #57	; 0x39
 8003c62:	f001 fada 	bl	800521a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2100      	movs	r1, #0
 8003c6a:	2045      	movs	r0, #69	; 0x45
 8003c6c:	f001 fab9 	bl	80051e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003c70:	2045      	movs	r0, #69	; 0x45
 8003c72:	f001 fad2 	bl	800521a <HAL_NVIC_EnableIRQ>

}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	; 0x30
 8003c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8a:	f107 031c 	add.w	r3, r7, #28
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a25      	ldr	r2, [pc, #148]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003cf8:	f043 0310 	orr.w	r3, r3, #16
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003d14:	f043 0302 	orr.w	r3, r3, #2
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003d30:	f043 0308 	orr.w	r3, r3, #8
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <MX_GPIO_Init+0xec>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2110      	movs	r1, #16
 8003d46:	480b      	ldr	r0, [pc, #44]	; (8003d74 <MX_GPIO_Init+0xf0>)
 8003d48:	f002 f804 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d50:	2301      	movs	r3, #1
 8003d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003d5c:	f107 031c 	add.w	r3, r7, #28
 8003d60:	4619      	mov	r1, r3
 8003d62:	4804      	ldr	r0, [pc, #16]	; (8003d74 <MX_GPIO_Init+0xf0>)
 8003d64:	f001 fe5a 	bl	8005a1c <HAL_GPIO_Init>

}
 8003d68:	bf00      	nop
 8003d6a:	3730      	adds	r7, #48	; 0x30
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40020800 	.word	0x40020800

08003d78 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
//	if(hadc == &hadc2)
//	{
//		telemetry.temperature = Get_Temperature(hadc);
//
//	}
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d90:	b672      	cpsid	i
}
 8003d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d94:	e7fe      	b.n	8003d94 <Error_Handler+0x8>
	...

08003d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_MspInit+0x4c>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <HAL_MspInit+0x4c>)
 8003da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dac:	6453      	str	r3, [r2, #68]	; 0x44
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <HAL_MspInit+0x4c>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_MspInit+0x4c>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <HAL_MspInit+0x4c>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_MspInit+0x4c>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800

08003de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08e      	sub	sp, #56	; 0x38
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a51      	ldr	r2, [pc, #324]	; (8003f4c <HAL_ADC_MspInit+0x164>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d130      	bne.n	8003e6c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	4a4f      	ldr	r2, [pc, #316]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1a:	4b4d      	ldr	r3, [pc, #308]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a48      	ldr	r2, [pc, #288]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ACS71240_Pin;
 8003e42:	2304      	movs	r3, #4
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e46:	2303      	movs	r3, #3
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ACS71240_GPIO_Port, &GPIO_InitStruct);
 8003e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e52:	4619      	mov	r1, r3
 8003e54:	483f      	ldr	r0, [pc, #252]	; (8003f54 <HAL_ADC_MspInit+0x16c>)
 8003e56:	f001 fde1 	bl	8005a1c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	2012      	movs	r0, #18
 8003e60:	f001 f9bf 	bl	80051e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e64:	2012      	movs	r0, #18
 8003e66:	f001 f9d8 	bl	800521a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003e6a:	e06a      	b.n	8003f42 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <HAL_ADC_MspInit+0x170>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d130      	bne.n	8003ed8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e84:	6453      	str	r3, [r2, #68]	; 0x44
 8003e86:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LM35_Pin;
 8003eae:	2308      	movs	r3, #8
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8003eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4824      	ldr	r0, [pc, #144]	; (8003f54 <HAL_ADC_MspInit+0x16c>)
 8003ec2:	f001 fdab 	bl	8005a1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2100      	movs	r1, #0
 8003eca:	2012      	movs	r0, #18
 8003ecc:	f001 f989 	bl	80051e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003ed0:	2012      	movs	r0, #18
 8003ed2:	f001 f9a2 	bl	800521a <HAL_NVIC_EnableIRQ>
}
 8003ed6:	e034      	b.n	8003f42 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1f      	ldr	r2, [pc, #124]	; (8003f5c <HAL_ADC_MspInit+0x174>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d12f      	bne.n	8003f42 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <HAL_ADC_MspInit+0x168>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BAT_VOLT_Pin;
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BAT_VOLT_GPIO_Port, &GPIO_InitStruct);
 8003f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	480c      	ldr	r0, [pc, #48]	; (8003f60 <HAL_ADC_MspInit+0x178>)
 8003f2e:	f001 fd75 	bl	8005a1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2100      	movs	r1, #0
 8003f36:	2012      	movs	r0, #18
 8003f38:	f001 f953 	bl	80051e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003f3c:	2012      	movs	r0, #18
 8003f3e:	f001 f96c 	bl	800521a <HAL_NVIC_EnableIRQ>
}
 8003f42:	bf00      	nop
 8003f44:	3738      	adds	r7, #56	; 0x38
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40012000 	.word	0x40012000
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40020000 	.word	0x40020000
 8003f58:	40012100 	.word	0x40012100
 8003f5c:	40012200 	.word	0x40012200
 8003f60:	40020800 	.word	0x40020800

08003f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08e      	sub	sp, #56	; 0x38
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a5b      	ldr	r2, [pc, #364]	; (80040f0 <HAL_I2C_MspInit+0x18c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d12c      	bne.n	8003fe0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	4b5a      	ldr	r3, [pc, #360]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	4a59      	ldr	r2, [pc, #356]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	6313      	str	r3, [r2, #48]	; 0x30
 8003f96:	4b57      	ldr	r3, [pc, #348]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LPS_SCL_Pin|LPS_SDA_Pin;
 8003fa2:	23c0      	movs	r3, #192	; 0xc0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fa6:	2312      	movs	r3, #18
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003faa:	2301      	movs	r3, #1
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fba:	4619      	mov	r1, r3
 8003fbc:	484e      	ldr	r0, [pc, #312]	; (80040f8 <HAL_I2C_MspInit+0x194>)
 8003fbe:	f001 fd2d 	bl	8005a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a4a      	ldr	r2, [pc, #296]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd2:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003fde:	e083      	b.n	80040e8 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a45      	ldr	r2, [pc, #276]	; (80040fc <HAL_I2C_MspInit+0x198>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d12d      	bne.n	8004046 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a40      	ldr	r2, [pc, #256]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004006:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400c:	2312      	movs	r3, #18
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004010:	2301      	movs	r3, #1
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004018:	2304      	movs	r3, #4
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004020:	4619      	mov	r1, r3
 8004022:	4835      	ldr	r0, [pc, #212]	; (80040f8 <HAL_I2C_MspInit+0x194>)
 8004024:	f001 fcfa 	bl	8005a1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	4a30      	ldr	r2, [pc, #192]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8004032:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004036:	6413      	str	r3, [r2, #64]	; 0x40
 8004038:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	697b      	ldr	r3, [r7, #20]
}
 8004044:	e050      	b.n	80040e8 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2d      	ldr	r2, [pc, #180]	; (8004100 <HAL_I2C_MspInit+0x19c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d14b      	bne.n	80040e8 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	6313      	str	r3, [r2, #48]	; 0x30
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6313      	str	r3, [r2, #48]	; 0x30
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HMC_SDA_Pin;
 8004088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800408e:	2312      	movs	r3, #18
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004092:	2301      	movs	r3, #1
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004096:	2303      	movs	r3, #3
 8004098:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800409a:	2304      	movs	r3, #4
 800409c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HMC_SDA_GPIO_Port, &GPIO_InitStruct);
 800409e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a2:	4619      	mov	r1, r3
 80040a4:	4817      	ldr	r0, [pc, #92]	; (8004104 <HAL_I2C_MspInit+0x1a0>)
 80040a6:	f001 fcb9 	bl	8005a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HMC_SCL_Pin;
 80040aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040b0:	2312      	movs	r3, #18
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040b4:	2301      	movs	r3, #1
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040bc:	2304      	movs	r3, #4
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HMC_SCL_GPIO_Port, &GPIO_InitStruct);
 80040c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c4:	4619      	mov	r1, r3
 80040c6:	4810      	ldr	r0, [pc, #64]	; (8004108 <HAL_I2C_MspInit+0x1a4>)
 80040c8:	f001 fca8 	bl	8005a1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 80040d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040da:	6413      	str	r3, [r2, #64]	; 0x40
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_I2C_MspInit+0x190>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]
}
 80040e8:	bf00      	nop
 80040ea:	3738      	adds	r7, #56	; 0x38
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40005400 	.word	0x40005400
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40020400 	.word	0x40020400
 80040fc:	40005800 	.word	0x40005800
 8004100:	40005c00 	.word	0x40005c00
 8004104:	40020800 	.word	0x40020800
 8004108:	40020000 	.word	0x40020000

0800410c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <HAL_TIM_Base_MspInit+0x3c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d10d      	bne.n	800413a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_TIM_Base_MspInit+0x40>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_TIM_Base_MspInit+0x40>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	6453      	str	r3, [r2, #68]	; 0x44
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_TIM_Base_MspInit+0x40>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40023800 	.word	0x40023800

08004150 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	f107 030c 	add.w	r3, r7, #12
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <HAL_TIM_MspPostInit+0x68>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d11e      	bne.n	80041b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <HAL_TIM_MspPostInit+0x6c>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_TIM_MspPostInit+0x6c>)
 800417c:	f043 0310 	orr.w	r3, r3, #16
 8004180:	6313      	str	r3, [r2, #48]	; 0x30
 8004182:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <HAL_TIM_MspPostInit+0x6c>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_TIM1_CH1_Pin|SERVO_TIM1_CH2_Pin|SERVO_TIM1_CH3_Pin|SERVO_TIM1_CH4_Pin;
 800418e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004192:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004194:	2302      	movs	r3, #2
 8004196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419c:	2300      	movs	r3, #0
 800419e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041a0:	2301      	movs	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041a4:	f107 030c 	add.w	r3, r7, #12
 80041a8:	4619      	mov	r1, r3
 80041aa:	4805      	ldr	r0, [pc, #20]	; (80041c0 <HAL_TIM_MspPostInit+0x70>)
 80041ac:	f001 fc36 	bl	8005a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80041b0:	bf00      	nop
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40021000 	.word	0x40021000

080041c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	; 0x30
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041cc:	f107 031c 	add.w	r3, r7, #28
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4aa0      	ldr	r2, [pc, #640]	; (8004464 <HAL_UART_MspInit+0x2a0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	f040 80aa 	bne.w	800433c <HAL_UART_MspInit+0x178>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	4b9e      	ldr	r3, [pc, #632]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	4a9d      	ldr	r2, [pc, #628]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 80041f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f6:	6413      	str	r3, [r2, #64]	; 0x40
 80041f8:	4b9b      	ldr	r3, [pc, #620]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	4b97      	ldr	r3, [pc, #604]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	4a96      	ldr	r2, [pc, #600]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	6313      	str	r3, [r2, #48]	; 0x30
 8004214:	4b94      	ldr	r3, [pc, #592]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	4b90      	ldr	r3, [pc, #576]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	4a8f      	ldr	r2, [pc, #572]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 800422a:	f043 0308 	orr.w	r3, r3, #8
 800422e:	6313      	str	r3, [r2, #48]	; 0x30
 8004230:	4b8d      	ldr	r3, [pc, #564]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_STM_TX_Pin;
 800423c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004242:	2302      	movs	r3, #2
 8004244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004246:	2301      	movs	r3, #1
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424a:	2303      	movs	r3, #3
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800424e:	2308      	movs	r3, #8
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESP_RX_STM_TX_GPIO_Port, &GPIO_InitStruct);
 8004252:	f107 031c 	add.w	r3, r7, #28
 8004256:	4619      	mov	r1, r3
 8004258:	4884      	ldr	r0, [pc, #528]	; (800446c <HAL_UART_MspInit+0x2a8>)
 800425a:	f001 fbdf 	bl	8005a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_TX_STM_RX_Pin;
 800425e:	2304      	movs	r3, #4
 8004260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004262:	2302      	movs	r3, #2
 8004264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004266:	2301      	movs	r3, #1
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426a:	2303      	movs	r3, #3
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800426e:	2308      	movs	r3, #8
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESP_TX_STM_RX_GPIO_Port, &GPIO_InitStruct);
 8004272:	f107 031c 	add.w	r3, r7, #28
 8004276:	4619      	mov	r1, r3
 8004278:	487d      	ldr	r0, [pc, #500]	; (8004470 <HAL_UART_MspInit+0x2ac>)
 800427a:	f001 fbcf 	bl	8005a1c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800427e:	4b7d      	ldr	r3, [pc, #500]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 8004280:	4a7d      	ldr	r2, [pc, #500]	; (8004478 <HAL_UART_MspInit+0x2b4>)
 8004282:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8004284:	4b7b      	ldr	r3, [pc, #492]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 8004286:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800428a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800428c:	4b79      	ldr	r3, [pc, #484]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 800428e:	2240      	movs	r2, #64	; 0x40
 8004290:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004292:	4b78      	ldr	r3, [pc, #480]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 8004294:	2200      	movs	r2, #0
 8004296:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004298:	4b76      	ldr	r3, [pc, #472]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 800429a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800429e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042a0:	4b74      	ldr	r3, [pc, #464]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042a6:	4b73      	ldr	r3, [pc, #460]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 80042ac:	4b71      	ldr	r3, [pc, #452]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 80042ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042b2:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042b4:	4b6f      	ldr	r3, [pc, #444]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042ba:	4b6e      	ldr	r3, [pc, #440]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 80042bc:	2200      	movs	r2, #0
 80042be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80042c0:	486c      	ldr	r0, [pc, #432]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 80042c2:	f000 ffcb 	bl	800525c <HAL_DMA_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80042cc:	f7ff fd5e 	bl	8003d8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a68      	ldr	r2, [pc, #416]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
 80042d6:	4a67      	ldr	r2, [pc, #412]	; (8004474 <HAL_UART_MspInit+0x2b0>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80042dc:	4b67      	ldr	r3, [pc, #412]	; (800447c <HAL_UART_MspInit+0x2b8>)
 80042de:	4a68      	ldr	r2, [pc, #416]	; (8004480 <HAL_UART_MspInit+0x2bc>)
 80042e0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80042e2:	4b66      	ldr	r3, [pc, #408]	; (800447c <HAL_UART_MspInit+0x2b8>)
 80042e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042e8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042ea:	4b64      	ldr	r3, [pc, #400]	; (800447c <HAL_UART_MspInit+0x2b8>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042f0:	4b62      	ldr	r3, [pc, #392]	; (800447c <HAL_UART_MspInit+0x2b8>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042f6:	4b61      	ldr	r3, [pc, #388]	; (800447c <HAL_UART_MspInit+0x2b8>)
 80042f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042fc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042fe:	4b5f      	ldr	r3, [pc, #380]	; (800447c <HAL_UART_MspInit+0x2b8>)
 8004300:	2200      	movs	r2, #0
 8004302:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004304:	4b5d      	ldr	r3, [pc, #372]	; (800447c <HAL_UART_MspInit+0x2b8>)
 8004306:	2200      	movs	r2, #0
 8004308:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800430a:	4b5c      	ldr	r3, [pc, #368]	; (800447c <HAL_UART_MspInit+0x2b8>)
 800430c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004310:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004312:	4b5a      	ldr	r3, [pc, #360]	; (800447c <HAL_UART_MspInit+0x2b8>)
 8004314:	2200      	movs	r2, #0
 8004316:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004318:	4b58      	ldr	r3, [pc, #352]	; (800447c <HAL_UART_MspInit+0x2b8>)
 800431a:	2200      	movs	r2, #0
 800431c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800431e:	4857      	ldr	r0, [pc, #348]	; (800447c <HAL_UART_MspInit+0x2b8>)
 8004320:	f000 ff9c 	bl	800525c <HAL_DMA_Init>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800432a:	f7ff fd2f 	bl	8003d8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_UART_MspInit+0x2b8>)
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
 8004334:	4a51      	ldr	r2, [pc, #324]	; (800447c <HAL_UART_MspInit+0x2b8>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800433a:	e08f      	b.n	800445c <HAL_UART_MspInit+0x298>
  else if(huart->Instance==USART6)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a50      	ldr	r2, [pc, #320]	; (8004484 <HAL_UART_MspInit+0x2c0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	f040 808a 	bne.w	800445c <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	4b46      	ldr	r3, [pc, #280]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	4a45      	ldr	r2, [pc, #276]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 8004352:	f043 0320 	orr.w	r3, r3, #32
 8004356:	6453      	str	r3, [r2, #68]	; 0x44
 8004358:	4b43      	ldr	r3, [pc, #268]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 800435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	4b3f      	ldr	r3, [pc, #252]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	4a3e      	ldr	r2, [pc, #248]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 800436e:	f043 0304 	orr.w	r3, r3, #4
 8004372:	6313      	str	r3, [r2, #48]	; 0x30
 8004374:	4b3c      	ldr	r3, [pc, #240]	; (8004468 <HAL_UART_MspInit+0x2a4>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004380:	23c0      	movs	r3, #192	; 0xc0
 8004382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004384:	2302      	movs	r3, #2
 8004386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800438c:	2303      	movs	r3, #3
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004390:	2308      	movs	r3, #8
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004394:	f107 031c 	add.w	r3, r7, #28
 8004398:	4619      	mov	r1, r3
 800439a:	4834      	ldr	r0, [pc, #208]	; (800446c <HAL_UART_MspInit+0x2a8>)
 800439c:	f001 fb3e 	bl	8005a1c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80043a0:	4b39      	ldr	r3, [pc, #228]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043a2:	4a3a      	ldr	r2, [pc, #232]	; (800448c <HAL_UART_MspInit+0x2c8>)
 80043a4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80043a6:	4b38      	ldr	r3, [pc, #224]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043a8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80043ac:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043ae:	4b36      	ldr	r3, [pc, #216]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b4:	4b34      	ldr	r3, [pc, #208]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043ba:	4b33      	ldr	r3, [pc, #204]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043c0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043c8:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80043ce:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043d6:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043d8:	2200      	movs	r2, #0
 80043da:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043de:	2200      	movs	r2, #0
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80043e2:	4829      	ldr	r0, [pc, #164]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043e4:	f000 ff3a 	bl	800525c <HAL_DMA_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80043ee:	f7ff fccd 	bl	8003d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a24      	ldr	r2, [pc, #144]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
 80043f8:	4a23      	ldr	r2, [pc, #140]	; (8004488 <HAL_UART_MspInit+0x2c4>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <HAL_UART_MspInit+0x2d0>)
 8004402:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004404:	4b22      	ldr	r3, [pc, #136]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004406:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800440a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004412:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004414:	2200      	movs	r2, #0
 8004416:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 800441a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800441e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004422:	2200      	movs	r2, #0
 8004424:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 800442c:	4b18      	ldr	r3, [pc, #96]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 800442e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004432:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004436:	2200      	movs	r2, #0
 8004438:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 800443c:	2200      	movs	r2, #0
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004440:	4813      	ldr	r0, [pc, #76]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004442:	f000 ff0b 	bl	800525c <HAL_DMA_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 800444c:	f7ff fc9e 	bl	8003d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004454:	635a      	str	r2, [r3, #52]	; 0x34
 8004456:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <HAL_UART_MspInit+0x2cc>)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800445c:	bf00      	nop
 800445e:	3730      	adds	r7, #48	; 0x30
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40005000 	.word	0x40005000
 8004468:	40023800 	.word	0x40023800
 800446c:	40020800 	.word	0x40020800
 8004470:	40020c00 	.word	0x40020c00
 8004474:	200010d8 	.word	0x200010d8
 8004478:	400260b8 	.word	0x400260b8
 800447c:	20001070 	.word	0x20001070
 8004480:	40026010 	.word	0x40026010
 8004484:	40011400 	.word	0x40011400
 8004488:	20000d40 	.word	0x20000d40
 800448c:	40026428 	.word	0x40026428
 8004490:	20000eb8 	.word	0x20000eb8
 8004494:	400264a0 	.word	0x400264a0

08004498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800449c:	e7fe      	b.n	800449c <NMI_Handler+0x4>

0800449e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a2:	e7fe      	b.n	80044a2 <HardFault_Handler+0x4>

080044a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044a8:	e7fe      	b.n	80044a8 <MemManage_Handler+0x4>

080044aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044ae:	e7fe      	b.n	80044ae <BusFault_Handler+0x4>

080044b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044b4:	e7fe      	b.n	80044b4 <UsageFault_Handler+0x4>

080044b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044d2:	b480      	push	{r7}
 80044d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e4:	f000 f99e 	bl	8004824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80044e8:	f000 feb1 	bl	800524e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80044ec:	bf00      	nop
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <DMA1_Stream0_IRQHandler+0x10>)
 80044f6:	f001 f827 	bl	8005548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20001070 	.word	0x20001070

08004504 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004508:	4805      	ldr	r0, [pc, #20]	; (8004520 <ADC_IRQHandler+0x1c>)
 800450a:	f000 fa12 	bl	8004932 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800450e:	4805      	ldr	r0, [pc, #20]	; (8004524 <ADC_IRQHandler+0x20>)
 8004510:	f000 fa0f 	bl	8004932 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004514:	4804      	ldr	r0, [pc, #16]	; (8004528 <ADC_IRQHandler+0x24>)
 8004516:	f000 fa0c 	bl	8004932 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800451a:	bf00      	nop
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000f18 	.word	0x20000f18
 8004524:	20000da0 	.word	0x20000da0
 8004528:	20000f60 	.word	0x20000f60

0800452c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <DMA1_Stream7_IRQHandler+0x10>)
 8004532:	f001 f809 	bl	8005548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	200010d8 	.word	0x200010d8

08004540 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004544:	4802      	ldr	r0, [pc, #8]	; (8004550 <DMA2_Stream1_IRQHandler+0x10>)
 8004546:	f000 ffff 	bl	8005548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000d40 	.word	0x20000d40

08004554 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004558:	4802      	ldr	r0, [pc, #8]	; (8004564 <DMA2_Stream6_IRQHandler+0x10>)
 800455a:	f000 fff5 	bl	8005548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000eb8 	.word	0x20000eb8

08004568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SystemInit+0x20>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <SystemInit+0x20>)
 8004574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <HAL_SYSTICK_Callback>:
#include "stdint.h"
#include "systick.h"

uint8_t counter;

void HAL_SYSTICK_Callback(void){
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
	counter_1ms++;
 8004590:	4b60      	ldr	r3, [pc, #384]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 800459a:	801a      	strh	r2, [r3, #0]
	if(counter_1ms){
 800459c:	4b5d      	ldr	r3, [pc, #372]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_SYSTICK_Callback+0x22>
		tt.tasks.task_1000_Hz = 1;
 80045a4:	4a5c      	ldr	r2, [pc, #368]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 80045a6:	7813      	ldrb	r3, [r2, #0]
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	7013      	strb	r3, [r2, #0]
	}

	if(counter_1ms % 4 == 0){
 80045ae:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_SYSTICK_Callback+0x3a>
		tt.tasks.task_250_Hz = 1;
 80045bc:	4a56      	ldr	r2, [pc, #344]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 80045be:	7813      	ldrb	r3, [r2, #0]
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	7013      	strb	r3, [r2, #0]
	}

	if(counter_1ms % 5 == 0){
 80045c6:	4b53      	ldr	r3, [pc, #332]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	4b54      	ldr	r3, [pc, #336]	; (800471c <HAL_SYSTICK_Callback+0x190>)
 80045cc:	fba3 1302 	umull	r1, r3, r3, r2
 80045d0:	0899      	lsrs	r1, r3, #2
 80045d2:	460b      	mov	r3, r1
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <HAL_SYSTICK_Callback+0x5e>
		tt.tasks.task_200_Hz = 1;
 80045e0:	4a4d      	ldr	r2, [pc, #308]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 80045e2:	7813      	ldrb	r3, [r2, #0]
 80045e4:	f043 0304 	orr.w	r3, r3, #4
 80045e8:	7013      	strb	r3, [r2, #0]
	}

	if(counter_1ms % 10 == 0){
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_SYSTICK_Callback+0x190>)
 80045f0:	fba3 1302 	umull	r1, r3, r3, r2
 80045f4:	08d9      	lsrs	r1, r3, #3
 80045f6:	460b      	mov	r3, r1
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <HAL_SYSTICK_Callback+0x84>
		tt.tasks.task_100_Hz = 1;
 8004606:	4a44      	ldr	r2, [pc, #272]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 8004608:	7813      	ldrb	r3, [r2, #0]
 800460a:	f043 0308 	orr.w	r3, r3, #8
 800460e:	7013      	strb	r3, [r2, #0]
	}

	if(counter_1ms % 40 == 0){
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 8004612:	881a      	ldrh	r2, [r3, #0]
 8004614:	4b41      	ldr	r3, [pc, #260]	; (800471c <HAL_SYSTICK_Callback+0x190>)
 8004616:	fba3 1302 	umull	r1, r3, r3, r2
 800461a:	0959      	lsrs	r1, r3, #5
 800461c:	460b      	mov	r3, r1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d111      	bne.n	8004650 <HAL_SYSTICK_Callback+0xc4>
		counter++;
 800462c:	4b3c      	ldr	r3, [pc, #240]	; (8004720 <HAL_SYSTICK_Callback+0x194>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b3a      	ldr	r3, [pc, #232]	; (8004720 <HAL_SYSTICK_Callback+0x194>)
 8004636:	701a      	strb	r2, [r3, #0]
		if(counter == 3){
 8004638:	4b39      	ldr	r3, [pc, #228]	; (8004720 <HAL_SYSTICK_Callback+0x194>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d107      	bne.n	8004650 <HAL_SYSTICK_Callback+0xc4>
			tt.tasks.task_75_Hz = 1;
 8004640:	4a35      	ldr	r2, [pc, #212]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 8004642:	7813      	ldrb	r3, [r2, #0]
 8004644:	f043 0310 	orr.w	r3, r3, #16
 8004648:	7013      	strb	r3, [r2, #0]
			counter = 0;
 800464a:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_SYSTICK_Callback+0x194>)
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(counter_1ms % 20 == 0){
 8004650:	4b30      	ldr	r3, [pc, #192]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_SYSTICK_Callback+0x190>)
 8004656:	fba3 1302 	umull	r1, r3, r3, r2
 800465a:	0919      	lsrs	r1, r3, #4
 800465c:	460b      	mov	r3, r1
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <HAL_SYSTICK_Callback+0xea>
		tt.tasks.task_50_Hz = 1;
 800466c:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 800466e:	7813      	ldrb	r3, [r2, #0]
 8004670:	f043 0320 	orr.w	r3, r3, #32
 8004674:	7013      	strb	r3, [r2, #0]
	}
	if(counter_1ms % 50 == 0){
 8004676:	4b27      	ldr	r3, [pc, #156]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <HAL_SYSTICK_Callback+0x198>)
 800467c:	fba2 1203 	umull	r1, r2, r2, r3
 8004680:	0912      	lsrs	r2, r2, #4
 8004682:	2132      	movs	r1, #50	; 0x32
 8004684:	fb01 f202 	mul.w	r2, r1, r2
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <HAL_SYSTICK_Callback+0x10e>
		tt.tasks.task_20_Hz = 1;
 8004690:	4a21      	ldr	r2, [pc, #132]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 8004692:	7813      	ldrb	r3, [r2, #0]
 8004694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004698:	7013      	strb	r3, [r2, #0]
	}
	if(counter_1ms % 100 == 0){
 800469a:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <HAL_SYSTICK_Callback+0x198>)
 80046a0:	fba2 1203 	umull	r1, r2, r2, r3
 80046a4:	0952      	lsrs	r2, r2, #5
 80046a6:	2164      	movs	r1, #100	; 0x64
 80046a8:	fb01 f202 	mul.w	r2, r1, r2
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d104      	bne.n	80046be <HAL_SYSTICK_Callback+0x132>
		tt.tasks.task_10_Hz = 1;
 80046b4:	4a18      	ldr	r2, [pc, #96]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 80046b6:	7813      	ldrb	r3, [r2, #0]
 80046b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046bc:	7013      	strb	r3, [r2, #0]
	}
	if(counter_1ms % 500 == 0){
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <HAL_SYSTICK_Callback+0x19c>)
 80046c4:	fba2 1203 	umull	r1, r2, r2, r3
 80046c8:	0952      	lsrs	r2, r2, #5
 80046ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80046ce:	fb01 f202 	mul.w	r2, r1, r2
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <HAL_SYSTICK_Callback+0x158>
		tt.tasks.task_2_Hz = 1;
 80046da:	4a0f      	ldr	r2, [pc, #60]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 80046dc:	7853      	ldrb	r3, [r2, #1]
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	7053      	strb	r3, [r2, #1]
	}
	if(counter_1ms % 1000 == 0){
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_SYSTICK_Callback+0x188>)
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	4a0f      	ldr	r2, [pc, #60]	; (8004728 <HAL_SYSTICK_Callback+0x19c>)
 80046ea:	fba2 1203 	umull	r1, r2, r2, r3
 80046ee:	0992      	lsrs	r2, r2, #6
 80046f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046f4:	fb01 f202 	mul.w	r2, r1, r2
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d104      	bne.n	800470a <HAL_SYSTICK_Callback+0x17e>
		tt.tasks.task_1_Hz = 1;
 8004700:	4a05      	ldr	r2, [pc, #20]	; (8004718 <HAL_SYSTICK_Callback+0x18c>)
 8004702:	7853      	ldrb	r3, [r2, #1]
 8004704:	f043 0302 	orr.w	r3, r3, #2
 8004708:	7053      	strb	r3, [r2, #1]
	}
}
 800470a:	bf00      	nop
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	20000fa8 	.word	0x20000fa8
 8004718:	20000fac 	.word	0x20000fac
 800471c:	cccccccd 	.word	0xcccccccd
 8004720:	20001138 	.word	0x20001138
 8004724:	51eb851f 	.word	0x51eb851f
 8004728:	10624dd3 	.word	0x10624dd3

0800472c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800472c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004730:	480d      	ldr	r0, [pc, #52]	; (8004768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004732:	490e      	ldr	r1, [pc, #56]	; (800476c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004734:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004738:	e002      	b.n	8004740 <LoopCopyDataInit>

0800473a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800473a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800473c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800473e:	3304      	adds	r3, #4

08004740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004744:	d3f9      	bcc.n	800473a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004748:	4c0b      	ldr	r4, [pc, #44]	; (8004778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800474a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800474c:	e001      	b.n	8004752 <LoopFillZerobss>

0800474e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800474e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004750:	3204      	adds	r2, #4

08004752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004754:	d3fb      	bcc.n	800474e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004756:	f7ff ff07 	bl	8004568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800475a:	f004 fdef 	bl	800933c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800475e:	f7fe fe27 	bl	80033b0 <main>
  bx  lr    
 8004762:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800476c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004770:	0800bbd8 	.word	0x0800bbd8
  ldr r2, =_sbss
 8004774:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004778:	20001140 	.word	0x20001140

0800477c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800477c:	e7fe      	b.n	800477c <CAN1_RX0_IRQHandler>
	...

08004780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <HAL_Init+0x40>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0d      	ldr	r2, [pc, #52]	; (80047c0 <HAL_Init+0x40>)
 800478a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800478e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_Init+0x40>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <HAL_Init+0x40>)
 8004796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800479a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <HAL_Init+0x40>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a07      	ldr	r2, [pc, #28]	; (80047c0 <HAL_Init+0x40>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047a8:	2003      	movs	r0, #3
 80047aa:	f000 fd0f 	bl	80051cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ae:	2000      	movs	r0, #0
 80047b0:	f000 f808 	bl	80047c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047b4:	f7ff faf0 	bl	8003d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00

080047c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047cc:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_InitTick+0x54>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_InitTick+0x58>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	4619      	mov	r1, r3
 80047d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047da:	fbb3 f3f1 	udiv	r3, r3, r1
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fd27 	bl	8005236 <HAL_SYSTICK_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e00e      	b.n	8004810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b0f      	cmp	r3, #15
 80047f6:	d80a      	bhi.n	800480e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047f8:	2200      	movs	r2, #0
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	f000 fcef 	bl	80051e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004804:	4a06      	ldr	r2, [pc, #24]	; (8004820 <HAL_InitTick+0x5c>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e000      	b.n	8004810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20000000 	.word	0x20000000
 800481c:	20000008 	.word	0x20000008
 8004820:	20000004 	.word	0x20000004

08004824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_IncTick+0x20>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_IncTick+0x24>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4413      	add	r3, r2
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <HAL_IncTick+0x24>)
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000008 	.word	0x20000008
 8004848:	2000113c 	.word	0x2000113c

0800484c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return uwTick;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <HAL_GetTick+0x14>)
 8004852:	681b      	ldr	r3, [r3, #0]
}
 8004854:	4618      	mov	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	2000113c 	.word	0x2000113c

08004864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800486c:	f7ff ffee 	bl	800484c <HAL_GetTick>
 8004870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d005      	beq.n	800488a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800487e:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <HAL_Delay+0x44>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800488a:	bf00      	nop
 800488c:	f7ff ffde 	bl	800484c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	429a      	cmp	r2, r3
 800489a:	d8f7      	bhi.n	800488c <HAL_Delay+0x28>
  {
  }
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000008 	.word	0x20000008

080048ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e033      	b.n	800492a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fa8c 	bl	8003de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d118      	bne.n	800491c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048f2:	f023 0302 	bic.w	r3, r3, #2
 80048f6:	f043 0202 	orr.w	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa8e 	bl	8004e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	f043 0201 	orr.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
 800491a:	e001      	b.n	8004920 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d049      	beq.n	8004a08 <HAL_ADC_IRQHandler+0xd6>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d046      	beq.n	8004a08 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d12b      	bne.n	80049f8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d127      	bne.n	80049f8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d006      	beq.n	80049c4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d119      	bne.n	80049f8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0220 	bic.w	r2, r2, #32
 80049d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d105      	bne.n	80049f8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f043 0201 	orr.w	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff f9bd 	bl	8003d78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0212 	mvn.w	r2, #18
 8004a06:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d057      	beq.n	8004aea <HAL_ADC_IRQHandler+0x1b8>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d054      	beq.n	8004aea <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d139      	bne.n	8004ada <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d12b      	bne.n	8004ada <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d124      	bne.n	8004ada <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11d      	bne.n	8004ada <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d119      	bne.n	8004ada <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f043 0201 	orr.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa9c 	bl	8005018 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 020c 	mvn.w	r2, #12
 8004ae8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d017      	beq.n	8004b4c <HAL_ADC_IRQHandler+0x21a>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d014      	beq.n	8004b4c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10d      	bne.n	8004b4c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f839 	bl	8004bb4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0201 	mvn.w	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	bf0c      	ite	eq
 8004b5a:	2301      	moveq	r3, #1
 8004b5c:	2300      	movne	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b70:	bf0c      	ite	eq
 8004b72:	2301      	moveq	r3, #1
 8004b74:	2300      	movne	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <HAL_ADC_IRQHandler+0x27a>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d012      	beq.n	8004bac <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	f043 0202 	orr.w	r2, r3, #2
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0220 	mvn.w	r2, #32
 8004b9a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f813 	bl	8004bc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0220 	mvn.w	r2, #32
 8004baa:	601a      	str	r2, [r3, #0]
  }
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x1c>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e105      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x228>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d925      	bls.n	8004c54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68d9      	ldr	r1, [r3, #12]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	4613      	mov	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3b1e      	subs	r3, #30
 8004c1e:	2207      	movs	r2, #7
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43da      	mvns	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68d9      	ldr	r1, [r3, #12]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4618      	mov	r0, r3
 8004c40:	4603      	mov	r3, r0
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4403      	add	r3, r0
 8004c46:	3b1e      	subs	r3, #30
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	e022      	b.n	8004c9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6919      	ldr	r1, [r3, #16]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	4613      	mov	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	4413      	add	r3, r2
 8004c68:	2207      	movs	r2, #7
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	400a      	ands	r2, r1
 8004c76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6919      	ldr	r1, [r3, #16]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	4618      	mov	r0, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4403      	add	r3, r0
 8004c90:	409a      	lsls	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d824      	bhi.n	8004cec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3b05      	subs	r3, #5
 8004cb4:	221f      	movs	r2, #31
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43da      	mvns	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	3b05      	subs	r3, #5
 8004cde:	fa00 f203 	lsl.w	r2, r0, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8004cea:	e04c      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d824      	bhi.n	8004d3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	3b23      	subs	r3, #35	; 0x23
 8004d06:	221f      	movs	r2, #31
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	400a      	ands	r2, r1
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	4618      	mov	r0, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3b23      	subs	r3, #35	; 0x23
 8004d30:	fa00 f203 	lsl.w	r2, r0, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d3c:	e023      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3b41      	subs	r3, #65	; 0x41
 8004d50:	221f      	movs	r2, #31
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43da      	mvns	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	3b41      	subs	r3, #65	; 0x41
 8004d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_ADC_ConfigChannel+0x234>)
 8004d88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <HAL_ADC_ConfigChannel+0x238>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d109      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x1cc>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b12      	cmp	r3, #18
 8004d9a:	d105      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_ADC_ConfigChannel+0x238>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d123      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x21e>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d003      	beq.n	8004dc2 <HAL_ADC_ConfigChannel+0x1e6>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b11      	cmp	r3, #17
 8004dc0:	d11b      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d111      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_ADC_ConfigChannel+0x23c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <HAL_ADC_ConfigChannel+0x240>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	0c9a      	lsrs	r2, r3, #18
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004dec:	e002      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f9      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40012300 	.word	0x40012300
 8004e14:	40012000 	.word	0x40012000
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	431bde83 	.word	0x431bde83

08004e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e28:	4b79      	ldr	r3, [pc, #484]	; (8005010 <ADC_Init+0x1f0>)
 8004e2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6859      	ldr	r1, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	021a      	lsls	r2, r3, #8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6859      	ldr	r1, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6899      	ldr	r1, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	4a58      	ldr	r2, [pc, #352]	; (8005014 <ADC_Init+0x1f4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d022      	beq.n	8004efe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ec6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6899      	ldr	r1, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6899      	ldr	r1, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	e00f      	b.n	8004f1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0202 	bic.w	r2, r2, #2
 8004f2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6899      	ldr	r1, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	7e1b      	ldrb	r3, [r3, #24]
 8004f38:	005a      	lsls	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	3b01      	subs	r3, #1
 8004f78:	035a      	lsls	r2, r3, #13
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	e007      	b.n	8004f94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	051a      	lsls	r2, r3, #20
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fd6:	025a      	lsls	r2, r3, #9
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6899      	ldr	r1, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	029a      	lsls	r2, r3, #10
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	609a      	str	r2, [r3, #8]
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40012300 	.word	0x40012300
 8005014:	0f000001 	.word	0x0f000001

08005018 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <__NVIC_SetPriorityGrouping+0x44>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005048:	4013      	ands	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800505c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800505e:	4a04      	ldr	r2, [pc, #16]	; (8005070 <__NVIC_SetPriorityGrouping+0x44>)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	60d3      	str	r3, [r2, #12]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	e000ed00 	.word	0xe000ed00

08005074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <__NVIC_GetPriorityGrouping+0x18>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	f003 0307 	and.w	r3, r3, #7
}
 8005082:	4618      	mov	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	e000ed00 	.word	0xe000ed00

08005090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800509a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	db0b      	blt.n	80050ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	f003 021f 	and.w	r2, r3, #31
 80050a8:	4907      	ldr	r1, [pc, #28]	; (80050c8 <__NVIC_EnableIRQ+0x38>)
 80050aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	2001      	movs	r0, #1
 80050b2:	fa00 f202 	lsl.w	r2, r0, r2
 80050b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	e000e100 	.word	0xe000e100

080050cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	6039      	str	r1, [r7, #0]
 80050d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	db0a      	blt.n	80050f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	490c      	ldr	r1, [pc, #48]	; (8005118 <__NVIC_SetPriority+0x4c>)
 80050e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ea:	0112      	lsls	r2, r2, #4
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	440b      	add	r3, r1
 80050f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050f4:	e00a      	b.n	800510c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	4908      	ldr	r1, [pc, #32]	; (800511c <__NVIC_SetPriority+0x50>)
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	3b04      	subs	r3, #4
 8005104:	0112      	lsls	r2, r2, #4
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	440b      	add	r3, r1
 800510a:	761a      	strb	r2, [r3, #24]
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	e000e100 	.word	0xe000e100
 800511c:	e000ed00 	.word	0xe000ed00

08005120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005120:	b480      	push	{r7}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f1c3 0307 	rsb	r3, r3, #7
 800513a:	2b04      	cmp	r3, #4
 800513c:	bf28      	it	cs
 800513e:	2304      	movcs	r3, #4
 8005140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3304      	adds	r3, #4
 8005146:	2b06      	cmp	r3, #6
 8005148:	d902      	bls.n	8005150 <NVIC_EncodePriority+0x30>
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3b03      	subs	r3, #3
 800514e:	e000      	b.n	8005152 <NVIC_EncodePriority+0x32>
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43da      	mvns	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	401a      	ands	r2, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005168:	f04f 31ff 	mov.w	r1, #4294967295
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	fa01 f303 	lsl.w	r3, r1, r3
 8005172:	43d9      	mvns	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005178:	4313      	orrs	r3, r2
         );
}
 800517a:	4618      	mov	r0, r3
 800517c:	3724      	adds	r7, #36	; 0x24
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3b01      	subs	r3, #1
 8005194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005198:	d301      	bcc.n	800519e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800519a:	2301      	movs	r3, #1
 800519c:	e00f      	b.n	80051be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800519e:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <SysTick_Config+0x40>)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051a6:	210f      	movs	r1, #15
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	f7ff ff8e 	bl	80050cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <SysTick_Config+0x40>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051b6:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <SysTick_Config+0x40>)
 80051b8:	2207      	movs	r2, #7
 80051ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	e000e010 	.word	0xe000e010

080051cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff ff29 	bl	800502c <__NVIC_SetPriorityGrouping>
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b086      	sub	sp, #24
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	4603      	mov	r3, r0
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051f4:	f7ff ff3e 	bl	8005074 <__NVIC_GetPriorityGrouping>
 80051f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	6978      	ldr	r0, [r7, #20]
 8005200:	f7ff ff8e 	bl	8005120 <NVIC_EncodePriority>
 8005204:	4602      	mov	r2, r0
 8005206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff ff5d 	bl	80050cc <__NVIC_SetPriority>
}
 8005212:	bf00      	nop
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	4603      	mov	r3, r0
 8005222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff ff31 	bl	8005090 <__NVIC_EnableIRQ>
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ffa2 	bl	8005188 <SysTick_Config>
 8005244:	4603      	mov	r3, r0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005252:	f7ff f99b 	bl	800458c <HAL_SYSTICK_Callback>
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005268:	f7ff faf0 	bl	800484c <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e099      	b.n	80053ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005298:	e00f      	b.n	80052ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800529a:	f7ff fad7 	bl	800484c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	d908      	bls.n	80052ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2203      	movs	r2, #3
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e078      	b.n	80053ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e8      	bne.n	800529a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4b38      	ldr	r3, [pc, #224]	; (80053b4 <HAL_DMA_Init+0x158>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b04      	cmp	r3, #4
 8005312:	d107      	bne.n	8005324 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	4313      	orrs	r3, r2
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0307 	bic.w	r3, r3, #7
 800533a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	2b04      	cmp	r3, #4
 800534c:	d117      	bne.n	800537e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fadf 	bl	8005924 <DMA_CheckFifoParam>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2240      	movs	r2, #64	; 0x40
 8005370:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800537a:	2301      	movs	r3, #1
 800537c:	e016      	b.n	80053ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa96 	bl	80058b8 <DMA_CalcBaseAndBitshift>
 800538c:	4603      	mov	r3, r0
 800538e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005394:	223f      	movs	r2, #63	; 0x3f
 8005396:	409a      	lsls	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	f010803f 	.word	0xf010803f

080053b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_DMA_Start_IT+0x26>
 80053da:	2302      	movs	r3, #2
 80053dc:	e040      	b.n	8005460 <HAL_DMA_Start_IT+0xa8>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d12f      	bne.n	8005452 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fa28 	bl	800585c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005410:	223f      	movs	r2, #63	; 0x3f
 8005412:	409a      	lsls	r2, r3
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0216 	orr.w	r2, r2, #22
 8005426:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0208 	orr.w	r2, r2, #8
 800543e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e005      	b.n	800545e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800545a:	2302      	movs	r3, #2
 800545c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005474:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005476:	f7ff f9e9 	bl	800484c <HAL_GetTick>
 800547a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d008      	beq.n	800549a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2280      	movs	r2, #128	; 0x80
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e052      	b.n	8005540 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0216 	bic.w	r2, r2, #22
 80054a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <HAL_DMA_Abort+0x62>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0208 	bic.w	r2, r2, #8
 80054d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ea:	e013      	b.n	8005514 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054ec:	f7ff f9ae 	bl	800484c <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d90c      	bls.n	8005514 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2203      	movs	r2, #3
 800550c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e015      	b.n	8005540 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e4      	bne.n	80054ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005526:	223f      	movs	r2, #63	; 0x3f
 8005528:	409a      	lsls	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005554:	4b92      	ldr	r3, [pc, #584]	; (80057a0 <HAL_DMA_IRQHandler+0x258>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a92      	ldr	r2, [pc, #584]	; (80057a4 <HAL_DMA_IRQHandler+0x25c>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	0a9b      	lsrs	r3, r3, #10
 8005560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005572:	2208      	movs	r2, #8
 8005574:	409a      	lsls	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01a      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d013      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0204 	bic.w	r2, r2, #4
 800559a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a0:	2208      	movs	r2, #8
 80055a2:	409a      	lsls	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	2201      	movs	r2, #1
 80055ba:	409a      	lsls	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d012      	beq.n	80055ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d6:	2201      	movs	r2, #1
 80055d8:	409a      	lsls	r2, r3
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	f043 0202 	orr.w	r2, r3, #2
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ee:	2204      	movs	r2, #4
 80055f0:	409a      	lsls	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d012      	beq.n	8005620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	2204      	movs	r2, #4
 800560e:	409a      	lsls	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	f043 0204 	orr.w	r2, r3, #4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005624:	2210      	movs	r2, #16
 8005626:	409a      	lsls	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d043      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d03c      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	2210      	movs	r2, #16
 8005644:	409a      	lsls	r2, r3
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d018      	beq.n	800568a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d024      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	4798      	blx	r3
 8005676:	e01f      	b.n	80056b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01b      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
 8005688:	e016      	b.n	80056b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d107      	bne.n	80056a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0208 	bic.w	r2, r2, #8
 80056a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	2220      	movs	r2, #32
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 808e 	beq.w	80057e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8086 	beq.w	80057e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	2220      	movs	r2, #32
 80056e0:	409a      	lsls	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d136      	bne.n	8005760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0216 	bic.w	r2, r2, #22
 8005700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_DMA_IRQHandler+0x1da>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0208 	bic.w	r2, r2, #8
 8005730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	223f      	movs	r2, #63	; 0x3f
 8005738:	409a      	lsls	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005752:	2b00      	cmp	r3, #0
 8005754:	d07d      	beq.n	8005852 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
        }
        return;
 800575e:	e078      	b.n	8005852 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01c      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d108      	bne.n	800578e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	2b00      	cmp	r3, #0
 8005782:	d030      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	e02b      	b.n	80057e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d027      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
 800579e:	e022      	b.n	80057e6 <HAL_DMA_IRQHandler+0x29e>
 80057a0:	20000000 	.word	0x20000000
 80057a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10f      	bne.n	80057d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0210 	bic.w	r2, r2, #16
 80057c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d032      	beq.n	8005854 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d022      	beq.n	8005840 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2205      	movs	r2, #5
 80057fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	3301      	adds	r3, #1
 8005816:	60bb      	str	r3, [r7, #8]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	429a      	cmp	r2, r3
 800581c:	d307      	bcc.n	800582e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f2      	bne.n	8005812 <HAL_DMA_IRQHandler+0x2ca>
 800582c:	e000      	b.n	8005830 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800582e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
 8005850:	e000      	b.n	8005854 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005852:	bf00      	nop
    }
  }
}
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop

0800585c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d108      	bne.n	800589c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800589a:	e007      	b.n	80058ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	3b10      	subs	r3, #16
 80058c8:	4a14      	ldr	r2, [pc, #80]	; (800591c <DMA_CalcBaseAndBitshift+0x64>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	091b      	lsrs	r3, r3, #4
 80058d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058d2:	4a13      	ldr	r2, [pc, #76]	; (8005920 <DMA_CalcBaseAndBitshift+0x68>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d909      	bls.n	80058fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	1d1a      	adds	r2, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	659a      	str	r2, [r3, #88]	; 0x58
 80058f8:	e007      	b.n	800590a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	aaaaaaab 	.word	0xaaaaaaab
 8005920:	0800b8ec 	.word	0x0800b8ec

08005924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d11f      	bne.n	800597e <DMA_CheckFifoParam+0x5a>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d856      	bhi.n	80059f2 <DMA_CheckFifoParam+0xce>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <DMA_CheckFifoParam+0x28>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	0800595d 	.word	0x0800595d
 8005950:	0800596f 	.word	0x0800596f
 8005954:	0800595d 	.word	0x0800595d
 8005958:	080059f3 	.word	0x080059f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d046      	beq.n	80059f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800596c:	e043      	b.n	80059f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005976:	d140      	bne.n	80059fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800597c:	e03d      	b.n	80059fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005986:	d121      	bne.n	80059cc <DMA_CheckFifoParam+0xa8>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d837      	bhi.n	80059fe <DMA_CheckFifoParam+0xda>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <DMA_CheckFifoParam+0x70>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059a5 	.word	0x080059a5
 8005998:	080059ab 	.word	0x080059ab
 800599c:	080059a5 	.word	0x080059a5
 80059a0:	080059bd 	.word	0x080059bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	e030      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d025      	beq.n	8005a02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ba:	e022      	b.n	8005a02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059c4:	d11f      	bne.n	8005a06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059ca:	e01c      	b.n	8005a06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d903      	bls.n	80059da <DMA_CheckFifoParam+0xb6>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d003      	beq.n	80059e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059d8:	e018      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
      break;
 80059de:	e015      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00e      	beq.n	8005a0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e00b      	b.n	8005a0a <DMA_CheckFifoParam+0xe6>
      break;
 80059f2:	bf00      	nop
 80059f4:	e00a      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 80059f6:	bf00      	nop
 80059f8:	e008      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 80059fa:	bf00      	nop
 80059fc:	e006      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 80059fe:	bf00      	nop
 8005a00:	e004      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 8005a02:	bf00      	nop
 8005a04:	e002      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;   
 8005a06:	bf00      	nop
 8005a08:	e000      	b.n	8005a0c <DMA_CheckFifoParam+0xe8>
      break;
 8005a0a:	bf00      	nop
    }
  } 
  
  return status; 
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop

08005a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b089      	sub	sp, #36	; 0x24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	e16b      	b.n	8005d10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a38:	2201      	movs	r2, #1
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	f040 815a 	bne.w	8005d0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d005      	beq.n	8005a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d130      	bne.n	8005ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	2203      	movs	r2, #3
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	4013      	ands	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f003 0201 	and.w	r2, r3, #1
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d017      	beq.n	8005b0c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d123      	bne.n	8005b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	08da      	lsrs	r2, r3, #3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3208      	adds	r2, #8
 8005b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	220f      	movs	r2, #15
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	08da      	lsrs	r2, r3, #3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3208      	adds	r2, #8
 8005b5a:	69b9      	ldr	r1, [r7, #24]
 8005b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 0203 	and.w	r2, r3, #3
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80b4 	beq.w	8005d0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	4b60      	ldr	r3, [pc, #384]	; (8005d28 <HAL_GPIO_Init+0x30c>)
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	4a5f      	ldr	r2, [pc, #380]	; (8005d28 <HAL_GPIO_Init+0x30c>)
 8005bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8005bb2:	4b5d      	ldr	r3, [pc, #372]	; (8005d28 <HAL_GPIO_Init+0x30c>)
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bbe:	4a5b      	ldr	r2, [pc, #364]	; (8005d2c <HAL_GPIO_Init+0x310>)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	089b      	lsrs	r3, r3, #2
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	220f      	movs	r2, #15
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4013      	ands	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a52      	ldr	r2, [pc, #328]	; (8005d30 <HAL_GPIO_Init+0x314>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d02b      	beq.n	8005c42 <HAL_GPIO_Init+0x226>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a51      	ldr	r2, [pc, #324]	; (8005d34 <HAL_GPIO_Init+0x318>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d025      	beq.n	8005c3e <HAL_GPIO_Init+0x222>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a50      	ldr	r2, [pc, #320]	; (8005d38 <HAL_GPIO_Init+0x31c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01f      	beq.n	8005c3a <HAL_GPIO_Init+0x21e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a4f      	ldr	r2, [pc, #316]	; (8005d3c <HAL_GPIO_Init+0x320>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d019      	beq.n	8005c36 <HAL_GPIO_Init+0x21a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a4e      	ldr	r2, [pc, #312]	; (8005d40 <HAL_GPIO_Init+0x324>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <HAL_GPIO_Init+0x216>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a4d      	ldr	r2, [pc, #308]	; (8005d44 <HAL_GPIO_Init+0x328>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00d      	beq.n	8005c2e <HAL_GPIO_Init+0x212>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a4c      	ldr	r2, [pc, #304]	; (8005d48 <HAL_GPIO_Init+0x32c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <HAL_GPIO_Init+0x20e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a4b      	ldr	r2, [pc, #300]	; (8005d4c <HAL_GPIO_Init+0x330>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <HAL_GPIO_Init+0x20a>
 8005c22:	2307      	movs	r3, #7
 8005c24:	e00e      	b.n	8005c44 <HAL_GPIO_Init+0x228>
 8005c26:	2308      	movs	r3, #8
 8005c28:	e00c      	b.n	8005c44 <HAL_GPIO_Init+0x228>
 8005c2a:	2306      	movs	r3, #6
 8005c2c:	e00a      	b.n	8005c44 <HAL_GPIO_Init+0x228>
 8005c2e:	2305      	movs	r3, #5
 8005c30:	e008      	b.n	8005c44 <HAL_GPIO_Init+0x228>
 8005c32:	2304      	movs	r3, #4
 8005c34:	e006      	b.n	8005c44 <HAL_GPIO_Init+0x228>
 8005c36:	2303      	movs	r3, #3
 8005c38:	e004      	b.n	8005c44 <HAL_GPIO_Init+0x228>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e002      	b.n	8005c44 <HAL_GPIO_Init+0x228>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_GPIO_Init+0x228>
 8005c42:	2300      	movs	r3, #0
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	f002 0203 	and.w	r2, r2, #3
 8005c4a:	0092      	lsls	r2, r2, #2
 8005c4c:	4093      	lsls	r3, r2
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c54:	4935      	ldr	r1, [pc, #212]	; (8005d2c <HAL_GPIO_Init+0x310>)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c62:	4b3b      	ldr	r3, [pc, #236]	; (8005d50 <HAL_GPIO_Init+0x334>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c86:	4a32      	ldr	r2, [pc, #200]	; (8005d50 <HAL_GPIO_Init+0x334>)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c8c:	4b30      	ldr	r3, [pc, #192]	; (8005d50 <HAL_GPIO_Init+0x334>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cb0:	4a27      	ldr	r2, [pc, #156]	; (8005d50 <HAL_GPIO_Init+0x334>)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cb6:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <HAL_GPIO_Init+0x334>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cda:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <HAL_GPIO_Init+0x334>)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_GPIO_Init+0x334>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d04:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <HAL_GPIO_Init+0x334>)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	f67f ae90 	bls.w	8005a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	3724      	adds	r7, #36	; 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40013800 	.word	0x40013800
 8005d30:	40020000 	.word	0x40020000
 8005d34:	40020400 	.word	0x40020400
 8005d38:	40020800 	.word	0x40020800
 8005d3c:	40020c00 	.word	0x40020c00
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40021400 	.word	0x40021400
 8005d48:	40021800 	.word	0x40021800
 8005d4c:	40021c00 	.word	0x40021c00
 8005d50:	40013c00 	.word	0x40013c00

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d70:	e003      	b.n	8005d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	041a      	lsls	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	619a      	str	r2, [r3, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e12b      	b.n	8005ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fe f8d8 	bl	8003f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2224      	movs	r2, #36	; 0x24
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dec:	f002 f820 	bl	8007e30 <HAL_RCC_GetPCLK1Freq>
 8005df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	4a81      	ldr	r2, [pc, #516]	; (8005ffc <HAL_I2C_Init+0x274>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d807      	bhi.n	8005e0c <HAL_I2C_Init+0x84>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a80      	ldr	r2, [pc, #512]	; (8006000 <HAL_I2C_Init+0x278>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	bf94      	ite	ls
 8005e04:	2301      	movls	r3, #1
 8005e06:	2300      	movhi	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e006      	b.n	8005e1a <HAL_I2C_Init+0x92>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a7d      	ldr	r2, [pc, #500]	; (8006004 <HAL_I2C_Init+0x27c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	bf94      	ite	ls
 8005e14:	2301      	movls	r3, #1
 8005e16:	2300      	movhi	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e0e7      	b.n	8005ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a78      	ldr	r2, [pc, #480]	; (8006008 <HAL_I2C_Init+0x280>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	0c9b      	lsrs	r3, r3, #18
 8005e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a6a      	ldr	r2, [pc, #424]	; (8005ffc <HAL_I2C_Init+0x274>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d802      	bhi.n	8005e5c <HAL_I2C_Init+0xd4>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	e009      	b.n	8005e70 <HAL_I2C_Init+0xe8>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	4a69      	ldr	r2, [pc, #420]	; (800600c <HAL_I2C_Init+0x284>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	099b      	lsrs	r3, r3, #6
 8005e6e:	3301      	adds	r3, #1
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	430b      	orrs	r3, r1
 8005e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	495c      	ldr	r1, [pc, #368]	; (8005ffc <HAL_I2C_Init+0x274>)
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	d819      	bhi.n	8005ec4 <HAL_I2C_Init+0x13c>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	1e59      	subs	r1, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e9e:	1c59      	adds	r1, r3, #1
 8005ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ea4:	400b      	ands	r3, r1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_I2C_Init+0x138>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1e59      	subs	r1, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eb8:	3301      	adds	r3, #1
 8005eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ebe:	e051      	b.n	8005f64 <HAL_I2C_Init+0x1dc>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	e04f      	b.n	8005f64 <HAL_I2C_Init+0x1dc>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d111      	bne.n	8005ef0 <HAL_I2C_Init+0x168>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1e58      	subs	r0, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6859      	ldr	r1, [r3, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	440b      	add	r3, r1
 8005eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ede:	3301      	adds	r3, #1
 8005ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	e012      	b.n	8005f16 <HAL_I2C_Init+0x18e>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1e58      	subs	r0, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6859      	ldr	r1, [r3, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	0099      	lsls	r1, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f06:	3301      	adds	r3, #1
 8005f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_Init+0x196>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e022      	b.n	8005f64 <HAL_I2C_Init+0x1dc>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10e      	bne.n	8005f44 <HAL_I2C_Init+0x1bc>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1e58      	subs	r0, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6859      	ldr	r1, [r3, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	440b      	add	r3, r1
 8005f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f42:	e00f      	b.n	8005f64 <HAL_I2C_Init+0x1dc>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	1e58      	subs	r0, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6859      	ldr	r1, [r3, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	0099      	lsls	r1, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	6809      	ldr	r1, [r1, #0]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6911      	ldr	r1, [r2, #16]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68d2      	ldr	r2, [r2, #12]
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	000186a0 	.word	0x000186a0
 8006000:	001e847f 	.word	0x001e847f
 8006004:	003d08ff 	.word	0x003d08ff
 8006008:	431bde83 	.word	0x431bde83
 800600c:	10624dd3 	.word	0x10624dd3

08006010 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	461a      	mov	r2, r3
 800601c:	460b      	mov	r3, r1
 800601e:	817b      	strh	r3, [r7, #10]
 8006020:	4613      	mov	r3, r2
 8006022:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006024:	f7fe fc12 	bl	800484c <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b20      	cmp	r3, #32
 8006034:	f040 80e0 	bne.w	80061f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2319      	movs	r3, #25
 800603e:	2201      	movs	r2, #1
 8006040:	4970      	ldr	r1, [pc, #448]	; (8006204 <HAL_I2C_Master_Transmit+0x1f4>)
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 f8f6 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800604e:	2302      	movs	r3, #2
 8006050:	e0d3      	b.n	80061fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_I2C_Master_Transmit+0x50>
 800605c:	2302      	movs	r3, #2
 800605e:	e0cc      	b.n	80061fa <HAL_I2C_Master_Transmit+0x1ea>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	d007      	beq.n	8006086 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0201 	orr.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006094:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2221      	movs	r2, #33	; 0x21
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2210      	movs	r2, #16
 80060a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	893a      	ldrh	r2, [r7, #8]
 80060b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4a50      	ldr	r2, [pc, #320]	; (8006208 <HAL_I2C_Master_Transmit+0x1f8>)
 80060c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060c8:	8979      	ldrh	r1, [r7, #10]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	6a3a      	ldr	r2, [r7, #32]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 fde2 	bl	8006c98 <I2C_MasterRequestWrite>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e08d      	b.n	80061fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060de:	2300      	movs	r3, #0
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80060f4:	e066      	b.n	80061c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	6a39      	ldr	r1, [r7, #32]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f001 f970 	bl	80073e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b04      	cmp	r3, #4
 800610c:	d107      	bne.n	800611e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800611c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e06b      	b.n	80061fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b04      	cmp	r3, #4
 800615e:	d11b      	bne.n	8006198 <HAL_I2C_Master_Transmit+0x188>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	d017      	beq.n	8006198 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	6a39      	ldr	r1, [r7, #32]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f001 f960 	bl	8007462 <I2C_WaitOnBTFFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d107      	bne.n	80061c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e01a      	b.n	80061fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d194      	bne.n	80060f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	e000      	b.n	80061fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
  }
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	00100002 	.word	0x00100002
 8006208:	ffff0000 	.word	0xffff0000

0800620c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	; 0x30
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	461a      	mov	r2, r3
 8006218:	460b      	mov	r3, r1
 800621a:	817b      	strh	r3, [r7, #10]
 800621c:	4613      	mov	r3, r2
 800621e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006220:	f7fe fb14 	bl	800484c <HAL_GetTick>
 8006224:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b20      	cmp	r3, #32
 8006230:	f040 820b 	bne.w	800664a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	2319      	movs	r3, #25
 800623a:	2201      	movs	r2, #1
 800623c:	497c      	ldr	r1, [pc, #496]	; (8006430 <HAL_I2C_Master_Receive+0x224>)
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fff8 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
 800624c:	e1fe      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_I2C_Master_Receive+0x50>
 8006258:	2302      	movs	r3, #2
 800625a:	e1f7      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b01      	cmp	r3, #1
 8006270:	d007      	beq.n	8006282 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0201 	orr.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006290:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2222      	movs	r2, #34	; 0x22
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2210      	movs	r2, #16
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	893a      	ldrh	r2, [r7, #8]
 80062b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4a5c      	ldr	r2, [pc, #368]	; (8006434 <HAL_I2C_Master_Receive+0x228>)
 80062c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062c4:	8979      	ldrh	r1, [r7, #10]
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fd66 	bl	8006d9c <I2C_MasterRequestRead>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e1b8      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d113      	bne.n	800630a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e2:	2300      	movs	r3, #0
 80062e4:	623b      	str	r3, [r7, #32]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	623b      	str	r3, [r7, #32]
 80062f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e18c      	b.n	8006624 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630e:	2b01      	cmp	r3, #1
 8006310:	d11b      	bne.n	800634a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e16c      	b.n	8006624 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634e:	2b02      	cmp	r3, #2
 8006350:	d11b      	bne.n	800638a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006360:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006372:	2300      	movs	r3, #0
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	e14c      	b.n	8006624 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063b0:	e138      	b.n	8006624 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	f200 80f1 	bhi.w	800659e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d123      	bne.n	800640c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f001 f88b 	bl	80074e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e139      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	855a      	strh	r2, [r3, #42]	; 0x2a
 800640a:	e10b      	b.n	8006624 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006410:	2b02      	cmp	r3, #2
 8006412:	d14e      	bne.n	80064b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	2200      	movs	r2, #0
 800641c:	4906      	ldr	r1, [pc, #24]	; (8006438 <HAL_I2C_Master_Receive+0x22c>)
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 ff08 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e10e      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
 800642e:	bf00      	nop
 8006430:	00100002 	.word	0x00100002
 8006434:	ffff0000 	.word	0xffff0000
 8006438:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064b0:	e0b8      	b.n	8006624 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	2200      	movs	r2, #0
 80064ba:	4966      	ldr	r1, [pc, #408]	; (8006654 <HAL_I2C_Master_Receive+0x448>)
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 feb9 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0bf      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	2200      	movs	r2, #0
 8006516:	494f      	ldr	r1, [pc, #316]	; (8006654 <HAL_I2C_Master_Receive+0x448>)
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fe8b 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e091      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b01      	subs	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800659c:	e042      	b.n	8006624 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 ff9e 	bl	80074e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e04c      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d118      	bne.n	8006624 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	f47f aec2 	bne.w	80063b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e000      	b.n	800664c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800664a:	2302      	movs	r3, #2
  }
}
 800664c:	4618      	mov	r0, r3
 800664e:	3728      	adds	r7, #40	; 0x28
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	00010004 	.word	0x00010004

08006658 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	4608      	mov	r0, r1
 8006662:	4611      	mov	r1, r2
 8006664:	461a      	mov	r2, r3
 8006666:	4603      	mov	r3, r0
 8006668:	817b      	strh	r3, [r7, #10]
 800666a:	460b      	mov	r3, r1
 800666c:	813b      	strh	r3, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006672:	f7fe f8eb 	bl	800484c <HAL_GetTick>
 8006676:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b20      	cmp	r3, #32
 8006682:	f040 80d9 	bne.w	8006838 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	2319      	movs	r3, #25
 800668c:	2201      	movs	r2, #1
 800668e:	496d      	ldr	r1, [pc, #436]	; (8006844 <HAL_I2C_Mem_Write+0x1ec>)
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fdcf 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800669c:	2302      	movs	r3, #2
 800669e:	e0cc      	b.n	800683a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_I2C_Mem_Write+0x56>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e0c5      	b.n	800683a <HAL_I2C_Mem_Write+0x1e2>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d007      	beq.n	80066d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0201 	orr.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2221      	movs	r2, #33	; 0x21
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2240      	movs	r2, #64	; 0x40
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a3a      	ldr	r2, [r7, #32]
 80066fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a4d      	ldr	r2, [pc, #308]	; (8006848 <HAL_I2C_Mem_Write+0x1f0>)
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006716:	88f8      	ldrh	r0, [r7, #6]
 8006718:	893a      	ldrh	r2, [r7, #8]
 800671a:	8979      	ldrh	r1, [r7, #10]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	4603      	mov	r3, r0
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 fc06 	bl	8006f38 <I2C_RequestMemoryWrite>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d052      	beq.n	80067d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e081      	b.n	800683a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fe50 	bl	80073e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00d      	beq.n	8006762 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	2b04      	cmp	r3, #4
 800674c:	d107      	bne.n	800675e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e06b      	b.n	800683a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	781a      	ldrb	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b04      	cmp	r3, #4
 800679e:	d11b      	bne.n	80067d8 <HAL_I2C_Mem_Write+0x180>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d017      	beq.n	80067d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1aa      	bne.n	8006736 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fe3c 	bl	8007462 <I2C_WaitOnBTFFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00d      	beq.n	800680c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d107      	bne.n	8006808 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006806:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e016      	b.n	800683a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	e000      	b.n	800683a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006838:	2302      	movs	r3, #2
  }
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	00100002 	.word	0x00100002
 8006848:	ffff0000 	.word	0xffff0000

0800684c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08c      	sub	sp, #48	; 0x30
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	4608      	mov	r0, r1
 8006856:	4611      	mov	r1, r2
 8006858:	461a      	mov	r2, r3
 800685a:	4603      	mov	r3, r0
 800685c:	817b      	strh	r3, [r7, #10]
 800685e:	460b      	mov	r3, r1
 8006860:	813b      	strh	r3, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006866:	f7fd fff1 	bl	800484c <HAL_GetTick>
 800686a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b20      	cmp	r3, #32
 8006876:	f040 8208 	bne.w	8006c8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	2319      	movs	r3, #25
 8006880:	2201      	movs	r2, #1
 8006882:	497b      	ldr	r1, [pc, #492]	; (8006a70 <HAL_I2C_Mem_Read+0x224>)
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fcd5 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006890:	2302      	movs	r3, #2
 8006892:	e1fb      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_I2C_Mem_Read+0x56>
 800689e:	2302      	movs	r3, #2
 80068a0:	e1f4      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d007      	beq.n	80068c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2222      	movs	r2, #34	; 0x22
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2240      	movs	r2, #64	; 0x40
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a5b      	ldr	r2, [pc, #364]	; (8006a74 <HAL_I2C_Mem_Read+0x228>)
 8006908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800690a:	88f8      	ldrh	r0, [r7, #6]
 800690c:	893a      	ldrh	r2, [r7, #8]
 800690e:	8979      	ldrh	r1, [r7, #10]
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	4603      	mov	r3, r0
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fba2 	bl	8007064 <I2C_RequestMemoryRead>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e1b0      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692e:	2b00      	cmp	r3, #0
 8006930:	d113      	bne.n	800695a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006932:	2300      	movs	r3, #0
 8006934:	623b      	str	r3, [r7, #32]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	623b      	str	r3, [r7, #32]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	623b      	str	r3, [r7, #32]
 8006946:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e184      	b.n	8006c64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695e:	2b01      	cmp	r3, #1
 8006960:	d11b      	bne.n	800699a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e164      	b.n	8006c64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d11b      	bne.n	80069da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c2:	2300      	movs	r3, #0
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	e144      	b.n	8006c64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80069f0:	e138      	b.n	8006c64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	f200 80f1 	bhi.w	8006bde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d123      	bne.n	8006a4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fd6b 	bl	80074e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e139      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a4a:	e10b      	b.n	8006c64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d14e      	bne.n	8006af2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	4906      	ldr	r1, [pc, #24]	; (8006a78 <HAL_I2C_Mem_Read+0x22c>)
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 fbe8 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d008      	beq.n	8006a7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e10e      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
 8006a6e:	bf00      	nop
 8006a70:	00100002 	.word	0x00100002
 8006a74:	ffff0000 	.word	0xffff0000
 8006a78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006af0:	e0b8      	b.n	8006c64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2200      	movs	r2, #0
 8006afa:	4966      	ldr	r1, [pc, #408]	; (8006c94 <HAL_I2C_Mem_Read+0x448>)
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fb99 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0bf      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2200      	movs	r2, #0
 8006b56:	494f      	ldr	r1, [pc, #316]	; (8006c94 <HAL_I2C_Mem_Read+0x448>)
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fb6b 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e091      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bdc:	e042      	b.n	8006c64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 fc7e 	bl	80074e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e04c      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d118      	bne.n	8006c64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f47f aec2 	bne.w	80069f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e000      	b.n	8006c8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006c8a:	2302      	movs	r3, #2
  }
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3728      	adds	r7, #40	; 0x28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	00010004 	.word	0x00010004

08006c98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	607a      	str	r2, [r7, #4]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d006      	beq.n	8006cc2 <I2C_MasterRequestWrite+0x2a>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d003      	beq.n	8006cc2 <I2C_MasterRequestWrite+0x2a>
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cc0:	d108      	bne.n	8006cd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	e00b      	b.n	8006cec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	2b12      	cmp	r3, #18
 8006cda:	d107      	bne.n	8006cec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fa9b 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00d      	beq.n	8006d20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d12:	d103      	bne.n	8006d1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e035      	b.n	8006d8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d28:	d108      	bne.n	8006d3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d2a:	897b      	ldrh	r3, [r7, #10]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d38:	611a      	str	r2, [r3, #16]
 8006d3a:	e01b      	b.n	8006d74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d3c:	897b      	ldrh	r3, [r7, #10]
 8006d3e:	11db      	asrs	r3, r3, #7
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 0306 	and.w	r3, r3, #6
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f063 030f 	orn	r3, r3, #15
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	490e      	ldr	r1, [pc, #56]	; (8006d94 <I2C_MasterRequestWrite+0xfc>)
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fac1 	bl	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e010      	b.n	8006d8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4907      	ldr	r1, [pc, #28]	; (8006d98 <I2C_MasterRequestWrite+0x100>)
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fab1 	bl	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	00010008 	.word	0x00010008
 8006d98:	00010002 	.word	0x00010002

08006d9c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	460b      	mov	r3, r1
 8006daa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d006      	beq.n	8006dd6 <I2C_MasterRequestRead+0x3a>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d003      	beq.n	8006dd6 <I2C_MasterRequestRead+0x3a>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006dd4:	d108      	bne.n	8006de8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e00b      	b.n	8006e00 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	2b11      	cmp	r3, #17
 8006dee:	d107      	bne.n	8006e00 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fa11 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e26:	d103      	bne.n	8006e30 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e079      	b.n	8006f28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e3c:	d108      	bne.n	8006e50 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e3e:	897b      	ldrh	r3, [r7, #10]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	611a      	str	r2, [r3, #16]
 8006e4e:	e05f      	b.n	8006f10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e50:	897b      	ldrh	r3, [r7, #10]
 8006e52:	11db      	asrs	r3, r3, #7
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f003 0306 	and.w	r3, r3, #6
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f063 030f 	orn	r3, r3, #15
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4930      	ldr	r1, [pc, #192]	; (8006f30 <I2C_MasterRequestRead+0x194>)
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fa37 	bl	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e054      	b.n	8006f28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006e7e:	897b      	ldrh	r3, [r7, #10]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4929      	ldr	r1, [pc, #164]	; (8006f34 <I2C_MasterRequestRead+0x198>)
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fa27 	bl	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e044      	b.n	8006f28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f9af 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00d      	beq.n	8006ef8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eea:	d103      	bne.n	8006ef4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e017      	b.n	8006f28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006ef8:	897b      	ldrh	r3, [r7, #10]
 8006efa:	11db      	asrs	r3, r3, #7
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f003 0306 	and.w	r3, r3, #6
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f063 030e 	orn	r3, r3, #14
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	4907      	ldr	r1, [pc, #28]	; (8006f34 <I2C_MasterRequestRead+0x198>)
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f9e3 	bl	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	00010008 	.word	0x00010008
 8006f34:	00010002 	.word	0x00010002

08006f38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	4608      	mov	r0, r1
 8006f42:	4611      	mov	r1, r2
 8006f44:	461a      	mov	r2, r3
 8006f46:	4603      	mov	r3, r0
 8006f48:	817b      	strh	r3, [r7, #10]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	813b      	strh	r3, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f960 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00d      	beq.n	8006f96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f88:	d103      	bne.n	8006f92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e05f      	b.n	8007056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f96:	897b      	ldrh	r3, [r7, #10]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	6a3a      	ldr	r2, [r7, #32]
 8006faa:	492d      	ldr	r1, [pc, #180]	; (8007060 <I2C_RequestMemoryWrite+0x128>)
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f998 	bl	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e04c      	b.n	8007056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd4:	6a39      	ldr	r1, [r7, #32]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fa02 	bl	80073e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00d      	beq.n	8006ffe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d107      	bne.n	8006ffa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e02b      	b.n	8007056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ffe:	88fb      	ldrh	r3, [r7, #6]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d105      	bne.n	8007010 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007004:	893b      	ldrh	r3, [r7, #8]
 8007006:	b2da      	uxtb	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	611a      	str	r2, [r3, #16]
 800700e:	e021      	b.n	8007054 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007010:	893b      	ldrh	r3, [r7, #8]
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	b29b      	uxth	r3, r3
 8007016:	b2da      	uxtb	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800701e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007020:	6a39      	ldr	r1, [r7, #32]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f9dc 	bl	80073e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00d      	beq.n	800704a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	2b04      	cmp	r3, #4
 8007034:	d107      	bne.n	8007046 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007044:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e005      	b.n	8007056 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800704a:	893b      	ldrh	r3, [r7, #8]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	00010002 	.word	0x00010002

08007064 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4603      	mov	r3, r0
 8007074:	817b      	strh	r3, [r7, #10]
 8007076:	460b      	mov	r3, r1
 8007078:	813b      	strh	r3, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800708c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800709c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f8c2 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00d      	beq.n	80070d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c4:	d103      	bne.n	80070ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e0aa      	b.n	8007228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070d2:	897b      	ldrh	r3, [r7, #10]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	6a3a      	ldr	r2, [r7, #32]
 80070e6:	4952      	ldr	r1, [pc, #328]	; (8007230 <I2C_RequestMemoryRead+0x1cc>)
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f8fa 	bl	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e097      	b.n	8007228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800710e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007110:	6a39      	ldr	r1, [r7, #32]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f964 	bl	80073e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00d      	beq.n	800713a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	2b04      	cmp	r3, #4
 8007124:	d107      	bne.n	8007136 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007134:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e076      	b.n	8007228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800713a:	88fb      	ldrh	r3, [r7, #6]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d105      	bne.n	800714c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007140:	893b      	ldrh	r3, [r7, #8]
 8007142:	b2da      	uxtb	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	611a      	str	r2, [r3, #16]
 800714a:	e021      	b.n	8007190 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800714c:	893b      	ldrh	r3, [r7, #8]
 800714e:	0a1b      	lsrs	r3, r3, #8
 8007150:	b29b      	uxth	r3, r3
 8007152:	b2da      	uxtb	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800715a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715c:	6a39      	ldr	r1, [r7, #32]
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f93e 	bl	80073e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00d      	beq.n	8007186 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	2b04      	cmp	r3, #4
 8007170:	d107      	bne.n	8007182 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007180:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e050      	b.n	8007228 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007192:	6a39      	ldr	r1, [r7, #32]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f923 	bl	80073e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00d      	beq.n	80071bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d107      	bne.n	80071b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e035      	b.n	8007228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f82b 	bl	8007234 <I2C_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d103      	bne.n	80071fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e013      	b.n	8007228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007200:	897b      	ldrh	r3, [r7, #10]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	b2da      	uxtb	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	6a3a      	ldr	r2, [r7, #32]
 8007214:	4906      	ldr	r1, [pc, #24]	; (8007230 <I2C_RequestMemoryRead+0x1cc>)
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f863 	bl	80072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	00010002 	.word	0x00010002

08007234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	4613      	mov	r3, r2
 8007242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007244:	e025      	b.n	8007292 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d021      	beq.n	8007292 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800724e:	f7fd fafd 	bl	800484c <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <I2C_WaitOnFlagUntilTimeout+0x30>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d116      	bne.n	8007292 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f043 0220 	orr.w	r2, r3, #32
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e023      	b.n	80072da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	d10d      	bne.n	80072b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	43da      	mvns	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4013      	ands	r3, r2
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bf0c      	ite	eq
 80072ae:	2301      	moveq	r3, #1
 80072b0:	2300      	movne	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	e00c      	b.n	80072d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	43da      	mvns	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4013      	ands	r3, r2
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d0b6      	beq.n	8007246 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072f0:	e051      	b.n	8007396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007300:	d123      	bne.n	800734a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007310:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800731a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f043 0204 	orr.w	r2, r3, #4
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e046      	b.n	80073d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d021      	beq.n	8007396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007352:	f7fd fa7b 	bl	800484c <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	429a      	cmp	r2, r3
 8007360:	d302      	bcc.n	8007368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d116      	bne.n	8007396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f043 0220 	orr.w	r2, r3, #32
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e020      	b.n	80073d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	0c1b      	lsrs	r3, r3, #16
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d10c      	bne.n	80073ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	43da      	mvns	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4013      	ands	r3, r2
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bf14      	ite	ne
 80073b2:	2301      	movne	r3, #1
 80073b4:	2300      	moveq	r3, #0
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	e00b      	b.n	80073d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	43da      	mvns	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4013      	ands	r3, r2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	bf14      	ite	ne
 80073cc:	2301      	movne	r3, #1
 80073ce:	2300      	moveq	r3, #0
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d18d      	bne.n	80072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073ec:	e02d      	b.n	800744a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f8ce 	bl	8007590 <I2C_IsAcknowledgeFailed>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e02d      	b.n	800745a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d021      	beq.n	800744a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007406:	f7fd fa21 	bl	800484c <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	429a      	cmp	r2, r3
 8007414:	d302      	bcc.n	800741c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d116      	bne.n	800744a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f043 0220 	orr.w	r2, r3, #32
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e007      	b.n	800745a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d1ca      	bne.n	80073ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800746e:	e02d      	b.n	80074cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f88d 	bl	8007590 <I2C_IsAcknowledgeFailed>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e02d      	b.n	80074dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d021      	beq.n	80074cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007488:	f7fd f9e0 	bl	800484c <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	429a      	cmp	r2, r3
 8007496:	d302      	bcc.n	800749e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d116      	bne.n	80074cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e007      	b.n	80074dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d1ca      	bne.n	8007470 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074f0:	e042      	b.n	8007578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d119      	bne.n	8007534 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0210 	mvn.w	r2, #16
 8007508:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2220      	movs	r2, #32
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e029      	b.n	8007588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007534:	f7fd f98a 	bl	800484c <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	d302      	bcc.n	800754a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d116      	bne.n	8007578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	f043 0220 	orr.w	r2, r3, #32
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e007      	b.n	8007588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007582:	2b40      	cmp	r3, #64	; 0x40
 8007584:	d1b5      	bne.n	80074f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a6:	d11b      	bne.n	80075e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	f043 0204 	orr.w	r2, r3, #4
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e000      	b.n	80075e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e264      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d075      	beq.n	80076fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800760e:	4ba3      	ldr	r3, [pc, #652]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 030c 	and.w	r3, r3, #12
 8007616:	2b04      	cmp	r3, #4
 8007618:	d00c      	beq.n	8007634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800761a:	4ba0      	ldr	r3, [pc, #640]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007622:	2b08      	cmp	r3, #8
 8007624:	d112      	bne.n	800764c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007626:	4b9d      	ldr	r3, [pc, #628]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800762e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007632:	d10b      	bne.n	800764c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007634:	4b99      	ldr	r3, [pc, #612]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d05b      	beq.n	80076f8 <HAL_RCC_OscConfig+0x108>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d157      	bne.n	80076f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e23f      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007654:	d106      	bne.n	8007664 <HAL_RCC_OscConfig+0x74>
 8007656:	4b91      	ldr	r3, [pc, #580]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a90      	ldr	r2, [pc, #576]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800765c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e01d      	b.n	80076a0 <HAL_RCC_OscConfig+0xb0>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800766c:	d10c      	bne.n	8007688 <HAL_RCC_OscConfig+0x98>
 800766e:	4b8b      	ldr	r3, [pc, #556]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a8a      	ldr	r2, [pc, #552]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	4b88      	ldr	r3, [pc, #544]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a87      	ldr	r2, [pc, #540]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	e00b      	b.n	80076a0 <HAL_RCC_OscConfig+0xb0>
 8007688:	4b84      	ldr	r3, [pc, #528]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a83      	ldr	r2, [pc, #524]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800768e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	4b81      	ldr	r3, [pc, #516]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a80      	ldr	r2, [pc, #512]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800769a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800769e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d013      	beq.n	80076d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a8:	f7fd f8d0 	bl	800484c <HAL_GetTick>
 80076ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076b0:	f7fd f8cc 	bl	800484c <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b64      	cmp	r3, #100	; 0x64
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e204      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076c2:	4b76      	ldr	r3, [pc, #472]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0f0      	beq.n	80076b0 <HAL_RCC_OscConfig+0xc0>
 80076ce:	e014      	b.n	80076fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d0:	f7fd f8bc 	bl	800484c <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076d8:	f7fd f8b8 	bl	800484c <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b64      	cmp	r3, #100	; 0x64
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e1f0      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ea:	4b6c      	ldr	r3, [pc, #432]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1f0      	bne.n	80076d8 <HAL_RCC_OscConfig+0xe8>
 80076f6:	e000      	b.n	80076fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d063      	beq.n	80077ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007706:	4b65      	ldr	r3, [pc, #404]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00b      	beq.n	800772a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007712:	4b62      	ldr	r3, [pc, #392]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800771a:	2b08      	cmp	r3, #8
 800771c:	d11c      	bne.n	8007758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800771e:	4b5f      	ldr	r3, [pc, #380]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d116      	bne.n	8007758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800772a:	4b5c      	ldr	r3, [pc, #368]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d005      	beq.n	8007742 <HAL_RCC_OscConfig+0x152>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d001      	beq.n	8007742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e1c4      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007742:	4b56      	ldr	r3, [pc, #344]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	4952      	ldr	r1, [pc, #328]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007752:	4313      	orrs	r3, r2
 8007754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007756:	e03a      	b.n	80077ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d020      	beq.n	80077a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007760:	4b4f      	ldr	r3, [pc, #316]	; (80078a0 <HAL_RCC_OscConfig+0x2b0>)
 8007762:	2201      	movs	r2, #1
 8007764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007766:	f7fd f871 	bl	800484c <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800776c:	e008      	b.n	8007780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800776e:	f7fd f86d 	bl	800484c <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d901      	bls.n	8007780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e1a5      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007780:	4b46      	ldr	r3, [pc, #280]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	2b00      	cmp	r3, #0
 800778a:	d0f0      	beq.n	800776e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800778c:	4b43      	ldr	r3, [pc, #268]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	4940      	ldr	r1, [pc, #256]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800779c:	4313      	orrs	r3, r2
 800779e:	600b      	str	r3, [r1, #0]
 80077a0:	e015      	b.n	80077ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077a2:	4b3f      	ldr	r3, [pc, #252]	; (80078a0 <HAL_RCC_OscConfig+0x2b0>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a8:	f7fd f850 	bl	800484c <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077b0:	f7fd f84c 	bl	800484c <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e184      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077c2:	4b36      	ldr	r3, [pc, #216]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1f0      	bne.n	80077b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0308 	and.w	r3, r3, #8
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d030      	beq.n	800783c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d016      	beq.n	8007810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077e2:	4b30      	ldr	r3, [pc, #192]	; (80078a4 <HAL_RCC_OscConfig+0x2b4>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e8:	f7fd f830 	bl	800484c <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077f0:	f7fd f82c 	bl	800484c <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e164      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007802:	4b26      	ldr	r3, [pc, #152]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0x200>
 800780e:	e015      	b.n	800783c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007810:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <HAL_RCC_OscConfig+0x2b4>)
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007816:	f7fd f819 	bl	800484c <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800781c:	e008      	b.n	8007830 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800781e:	f7fd f815 	bl	800484c <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e14d      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007830:	4b1a      	ldr	r3, [pc, #104]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f0      	bne.n	800781e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80a0 	beq.w	800798a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800784e:	4b13      	ldr	r3, [pc, #76]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10f      	bne.n	800787a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	4a0e      	ldr	r2, [pc, #56]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 8007864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007868:	6413      	str	r3, [r2, #64]	; 0x40
 800786a:	4b0c      	ldr	r3, [pc, #48]	; (800789c <HAL_RCC_OscConfig+0x2ac>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007872:	60bb      	str	r3, [r7, #8]
 8007874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800787a:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <HAL_RCC_OscConfig+0x2b8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d121      	bne.n	80078ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <HAL_RCC_OscConfig+0x2b8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a07      	ldr	r2, [pc, #28]	; (80078a8 <HAL_RCC_OscConfig+0x2b8>)
 800788c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007892:	f7fc ffdb 	bl	800484c <HAL_GetTick>
 8007896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007898:	e011      	b.n	80078be <HAL_RCC_OscConfig+0x2ce>
 800789a:	bf00      	nop
 800789c:	40023800 	.word	0x40023800
 80078a0:	42470000 	.word	0x42470000
 80078a4:	42470e80 	.word	0x42470e80
 80078a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ac:	f7fc ffce 	bl	800484c <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e106      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078be:	4b85      	ldr	r3, [pc, #532]	; (8007ad4 <HAL_RCC_OscConfig+0x4e4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d106      	bne.n	80078e0 <HAL_RCC_OscConfig+0x2f0>
 80078d2:	4b81      	ldr	r3, [pc, #516]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 80078d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d6:	4a80      	ldr	r2, [pc, #512]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 80078d8:	f043 0301 	orr.w	r3, r3, #1
 80078dc:	6713      	str	r3, [r2, #112]	; 0x70
 80078de:	e01c      	b.n	800791a <HAL_RCC_OscConfig+0x32a>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	d10c      	bne.n	8007902 <HAL_RCC_OscConfig+0x312>
 80078e8:	4b7b      	ldr	r3, [pc, #492]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 80078ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ec:	4a7a      	ldr	r2, [pc, #488]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 80078ee:	f043 0304 	orr.w	r3, r3, #4
 80078f2:	6713      	str	r3, [r2, #112]	; 0x70
 80078f4:	4b78      	ldr	r3, [pc, #480]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 80078f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f8:	4a77      	ldr	r2, [pc, #476]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007900:	e00b      	b.n	800791a <HAL_RCC_OscConfig+0x32a>
 8007902:	4b75      	ldr	r3, [pc, #468]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	4a74      	ldr	r2, [pc, #464]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	6713      	str	r3, [r2, #112]	; 0x70
 800790e:	4b72      	ldr	r3, [pc, #456]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	4a71      	ldr	r2, [pc, #452]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007914:	f023 0304 	bic.w	r3, r3, #4
 8007918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d015      	beq.n	800794e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007922:	f7fc ff93 	bl	800484c <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007928:	e00a      	b.n	8007940 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800792a:	f7fc ff8f 	bl	800484c <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f241 3288 	movw	r2, #5000	; 0x1388
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e0c5      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007940:	4b65      	ldr	r3, [pc, #404]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0ee      	beq.n	800792a <HAL_RCC_OscConfig+0x33a>
 800794c:	e014      	b.n	8007978 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800794e:	f7fc ff7d 	bl	800484c <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007954:	e00a      	b.n	800796c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007956:	f7fc ff79 	bl	800484c <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	f241 3288 	movw	r2, #5000	; 0x1388
 8007964:	4293      	cmp	r3, r2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e0af      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800796c:	4b5a      	ldr	r3, [pc, #360]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 800796e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1ee      	bne.n	8007956 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d105      	bne.n	800798a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800797e:	4b56      	ldr	r3, [pc, #344]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	4a55      	ldr	r2, [pc, #340]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 809b 	beq.w	8007aca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007994:	4b50      	ldr	r3, [pc, #320]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 030c 	and.w	r3, r3, #12
 800799c:	2b08      	cmp	r3, #8
 800799e:	d05c      	beq.n	8007a5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d141      	bne.n	8007a2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a8:	4b4c      	ldr	r3, [pc, #304]	; (8007adc <HAL_RCC_OscConfig+0x4ec>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ae:	f7fc ff4d 	bl	800484c <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b6:	f7fc ff49 	bl	800484c <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e081      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c8:	4b43      	ldr	r3, [pc, #268]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f0      	bne.n	80079b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	69da      	ldr	r2, [r3, #28]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	019b      	lsls	r3, r3, #6
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	3b01      	subs	r3, #1
 80079ee:	041b      	lsls	r3, r3, #16
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	061b      	lsls	r3, r3, #24
 80079f8:	4937      	ldr	r1, [pc, #220]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079fe:	4b37      	ldr	r3, [pc, #220]	; (8007adc <HAL_RCC_OscConfig+0x4ec>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a04:	f7fc ff22 	bl	800484c <HAL_GetTick>
 8007a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a0a:	e008      	b.n	8007a1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a0c:	f7fc ff1e 	bl	800484c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e056      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0f0      	beq.n	8007a0c <HAL_RCC_OscConfig+0x41c>
 8007a2a:	e04e      	b.n	8007aca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a2c:	4b2b      	ldr	r3, [pc, #172]	; (8007adc <HAL_RCC_OscConfig+0x4ec>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a32:	f7fc ff0b 	bl	800484c <HAL_GetTick>
 8007a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a38:	e008      	b.n	8007a4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a3a:	f7fc ff07 	bl	800484c <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d901      	bls.n	8007a4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e03f      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a4c:	4b22      	ldr	r3, [pc, #136]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1f0      	bne.n	8007a3a <HAL_RCC_OscConfig+0x44a>
 8007a58:	e037      	b.n	8007aca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e032      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a66:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <HAL_RCC_OscConfig+0x4e8>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d028      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d121      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d11a      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a96:	4013      	ands	r3, r2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d111      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	085b      	lsrs	r3, r3, #1
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d107      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d001      	beq.n	8007aca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40007000 	.word	0x40007000
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	42470060 	.word	0x42470060

08007ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e0cc      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007af4:	4b68      	ldr	r3, [pc, #416]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d90c      	bls.n	8007b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b02:	4b65      	ldr	r3, [pc, #404]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0a:	4b63      	ldr	r3, [pc, #396]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d001      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e0b8      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d020      	beq.n	8007b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b34:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	4a58      	ldr	r2, [pc, #352]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b4c:	4b53      	ldr	r3, [pc, #332]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	4a52      	ldr	r2, [pc, #328]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b58:	4b50      	ldr	r3, [pc, #320]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	494d      	ldr	r1, [pc, #308]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d044      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d107      	bne.n	8007b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b7e:	4b47      	ldr	r3, [pc, #284]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d119      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e07f      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d003      	beq.n	8007b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d107      	bne.n	8007bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b9e:	4b3f      	ldr	r3, [pc, #252]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e06f      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bae:	4b3b      	ldr	r3, [pc, #236]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e067      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bbe:	4b37      	ldr	r3, [pc, #220]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f023 0203 	bic.w	r2, r3, #3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	4934      	ldr	r1, [pc, #208]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bd0:	f7fc fe3c 	bl	800484c <HAL_GetTick>
 8007bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd6:	e00a      	b.n	8007bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bd8:	f7fc fe38 	bl	800484c <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e04f      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bee:	4b2b      	ldr	r3, [pc, #172]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 020c 	and.w	r2, r3, #12
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1eb      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d20c      	bcs.n	8007c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0e:	4b22      	ldr	r3, [pc, #136]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c16:	4b20      	ldr	r3, [pc, #128]	; (8007c98 <HAL_RCC_ClockConfig+0x1b8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d001      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e032      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d008      	beq.n	8007c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c34:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	4916      	ldr	r1, [pc, #88]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	490e      	ldr	r1, [pc, #56]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c66:	f000 f821 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	091b      	lsrs	r3, r3, #4
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	490a      	ldr	r1, [pc, #40]	; (8007ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c78:	5ccb      	ldrb	r3, [r1, r3]
 8007c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c82:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fc fd9c 	bl	80047c4 <HAL_InitTick>

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40023c00 	.word	0x40023c00
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	0800b8d4 	.word	0x0800b8d4
 8007ca4:	20000000 	.word	0x20000000
 8007ca8:	20000004 	.word	0x20000004

08007cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cac:	b5b0      	push	{r4, r5, r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	6079      	str	r1, [r7, #4]
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	60f9      	str	r1, [r7, #12]
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cc2:	4952      	ldr	r1, [pc, #328]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8007cc4:	6889      	ldr	r1, [r1, #8]
 8007cc6:	f001 010c 	and.w	r1, r1, #12
 8007cca:	2908      	cmp	r1, #8
 8007ccc:	d00d      	beq.n	8007cea <HAL_RCC_GetSysClockFreq+0x3e>
 8007cce:	2908      	cmp	r1, #8
 8007cd0:	f200 8094 	bhi.w	8007dfc <HAL_RCC_GetSysClockFreq+0x150>
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d002      	beq.n	8007cde <HAL_RCC_GetSysClockFreq+0x32>
 8007cd8:	2904      	cmp	r1, #4
 8007cda:	d003      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8007cdc:	e08e      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cde:	4b4c      	ldr	r3, [pc, #304]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x164>)
 8007ce0:	60bb      	str	r3, [r7, #8]
       break;
 8007ce2:	e08e      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ce4:	4b4b      	ldr	r3, [pc, #300]	; (8007e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8007ce6:	60bb      	str	r3, [r7, #8]
      break;
 8007ce8:	e08b      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cea:	4948      	ldr	r1, [pc, #288]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8007cec:	6849      	ldr	r1, [r1, #4]
 8007cee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007cf2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cf4:	4945      	ldr	r1, [pc, #276]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8007cf6:	6849      	ldr	r1, [r1, #4]
 8007cf8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d024      	beq.n	8007d4a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d00:	4942      	ldr	r1, [pc, #264]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d02:	6849      	ldr	r1, [r1, #4]
 8007d04:	0989      	lsrs	r1, r1, #6
 8007d06:	4608      	mov	r0, r1
 8007d08:	f04f 0100 	mov.w	r1, #0
 8007d0c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007d10:	f04f 0500 	mov.w	r5, #0
 8007d14:	ea00 0204 	and.w	r2, r0, r4
 8007d18:	ea01 0305 	and.w	r3, r1, r5
 8007d1c:	493d      	ldr	r1, [pc, #244]	; (8007e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d1e:	fb01 f003 	mul.w	r0, r1, r3
 8007d22:	2100      	movs	r1, #0
 8007d24:	fb01 f102 	mul.w	r1, r1, r2
 8007d28:	1844      	adds	r4, r0, r1
 8007d2a:	493a      	ldr	r1, [pc, #232]	; (8007e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d2c:	fba2 0101 	umull	r0, r1, r2, r1
 8007d30:	1863      	adds	r3, r4, r1
 8007d32:	4619      	mov	r1, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	f7f8 ff48 	bl	8000bd0 <__aeabi_uldivmod>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4613      	mov	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e04a      	b.n	8007de0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d4a:	4b30      	ldr	r3, [pc, #192]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	099b      	lsrs	r3, r3, #6
 8007d50:	461a      	mov	r2, r3
 8007d52:	f04f 0300 	mov.w	r3, #0
 8007d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d5a:	f04f 0100 	mov.w	r1, #0
 8007d5e:	ea02 0400 	and.w	r4, r2, r0
 8007d62:	ea03 0501 	and.w	r5, r3, r1
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f04f 0200 	mov.w	r2, #0
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	014b      	lsls	r3, r1, #5
 8007d74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d78:	0142      	lsls	r2, r0, #5
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	1b00      	subs	r0, r0, r4
 8007d80:	eb61 0105 	sbc.w	r1, r1, r5
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	018b      	lsls	r3, r1, #6
 8007d8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d92:	0182      	lsls	r2, r0, #6
 8007d94:	1a12      	subs	r2, r2, r0
 8007d96:	eb63 0301 	sbc.w	r3, r3, r1
 8007d9a:	f04f 0000 	mov.w	r0, #0
 8007d9e:	f04f 0100 	mov.w	r1, #0
 8007da2:	00d9      	lsls	r1, r3, #3
 8007da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007da8:	00d0      	lsls	r0, r2, #3
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	1912      	adds	r2, r2, r4
 8007db0:	eb45 0303 	adc.w	r3, r5, r3
 8007db4:	f04f 0000 	mov.w	r0, #0
 8007db8:	f04f 0100 	mov.w	r1, #0
 8007dbc:	0299      	lsls	r1, r3, #10
 8007dbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007dc2:	0290      	lsls	r0, r2, #10
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4619      	mov	r1, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	f7f8 fefc 	bl	8000bd0 <__aeabi_uldivmod>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4613      	mov	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	0c1b      	lsrs	r3, r3, #16
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	3301      	adds	r3, #1
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	60bb      	str	r3, [r7, #8]
      break;
 8007dfa:	e002      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dfc:	4b04      	ldr	r3, [pc, #16]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x164>)
 8007dfe:	60bb      	str	r3, [r7, #8]
      break;
 8007e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e02:	68bb      	ldr	r3, [r7, #8]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e0c:	40023800 	.word	0x40023800
 8007e10:	00f42400 	.word	0x00f42400
 8007e14:	017d7840 	.word	0x017d7840

08007e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e1c:	4b03      	ldr	r3, [pc, #12]	; (8007e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000000 	.word	0x20000000

08007e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e34:	f7ff fff0 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	0a9b      	lsrs	r3, r3, #10
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	4903      	ldr	r1, [pc, #12]	; (8007e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e46:	5ccb      	ldrb	r3, [r1, r3]
 8007e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	40023800 	.word	0x40023800
 8007e54:	0800b8e4 	.word	0x0800b8e4

08007e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e5c:	f7ff ffdc 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8007e60:	4602      	mov	r2, r0
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	0b5b      	lsrs	r3, r3, #13
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	4903      	ldr	r1, [pc, #12]	; (8007e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e6e:	5ccb      	ldrb	r3, [r1, r3]
 8007e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	40023800 	.word	0x40023800
 8007e7c:	0800b8e4 	.word	0x0800b8e4

08007e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e041      	b.n	8007f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d106      	bne.n	8007eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fc f930 	bl	800410c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	f000 fa08 	bl	80082d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e041      	b.n	8007fb4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f839 	bl	8007fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	f000 f9b9 	bl	80082d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e0ac      	b.n	8008144 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b0c      	cmp	r3, #12
 8007ff6:	f200 809f 	bhi.w	8008138 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007ffa:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008035 	.word	0x08008035
 8008004:	08008139 	.word	0x08008139
 8008008:	08008139 	.word	0x08008139
 800800c:	08008139 	.word	0x08008139
 8008010:	08008075 	.word	0x08008075
 8008014:	08008139 	.word	0x08008139
 8008018:	08008139 	.word	0x08008139
 800801c:	08008139 	.word	0x08008139
 8008020:	080080b7 	.word	0x080080b7
 8008024:	08008139 	.word	0x08008139
 8008028:	08008139 	.word	0x08008139
 800802c:	08008139 	.word	0x08008139
 8008030:	080080f7 	.word	0x080080f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f9ea 	bl	8008414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0208 	orr.w	r2, r2, #8
 800804e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0204 	bic.w	r2, r2, #4
 800805e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6999      	ldr	r1, [r3, #24]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	619a      	str	r2, [r3, #24]
      break;
 8008072:	e062      	b.n	800813a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fa3a 	bl	80084f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800808e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699a      	ldr	r2, [r3, #24]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800809e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6999      	ldr	r1, [r3, #24]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	021a      	lsls	r2, r3, #8
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	619a      	str	r2, [r3, #24]
      break;
 80080b4:	e041      	b.n	800813a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fa8f 	bl	80085e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69da      	ldr	r2, [r3, #28]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f042 0208 	orr.w	r2, r2, #8
 80080d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0204 	bic.w	r2, r2, #4
 80080e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69d9      	ldr	r1, [r3, #28]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	61da      	str	r2, [r3, #28]
      break;
 80080f4:	e021      	b.n	800813a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fae3 	bl	80086c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69da      	ldr	r2, [r3, #28]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69da      	ldr	r2, [r3, #28]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69d9      	ldr	r1, [r3, #28]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	021a      	lsls	r2, r3, #8
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	61da      	str	r2, [r3, #28]
      break;
 8008136:	e000      	b.n	800813a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800815c:	2b01      	cmp	r3, #1
 800815e:	d101      	bne.n	8008164 <HAL_TIM_ConfigClockSource+0x18>
 8008160:	2302      	movs	r3, #2
 8008162:	e0b3      	b.n	80082cc <HAL_TIM_ConfigClockSource+0x180>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800818a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819c:	d03e      	beq.n	800821c <HAL_TIM_ConfigClockSource+0xd0>
 800819e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081a2:	f200 8087 	bhi.w	80082b4 <HAL_TIM_ConfigClockSource+0x168>
 80081a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081aa:	f000 8085 	beq.w	80082b8 <HAL_TIM_ConfigClockSource+0x16c>
 80081ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b2:	d87f      	bhi.n	80082b4 <HAL_TIM_ConfigClockSource+0x168>
 80081b4:	2b70      	cmp	r3, #112	; 0x70
 80081b6:	d01a      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0xa2>
 80081b8:	2b70      	cmp	r3, #112	; 0x70
 80081ba:	d87b      	bhi.n	80082b4 <HAL_TIM_ConfigClockSource+0x168>
 80081bc:	2b60      	cmp	r3, #96	; 0x60
 80081be:	d050      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x116>
 80081c0:	2b60      	cmp	r3, #96	; 0x60
 80081c2:	d877      	bhi.n	80082b4 <HAL_TIM_ConfigClockSource+0x168>
 80081c4:	2b50      	cmp	r3, #80	; 0x50
 80081c6:	d03c      	beq.n	8008242 <HAL_TIM_ConfigClockSource+0xf6>
 80081c8:	2b50      	cmp	r3, #80	; 0x50
 80081ca:	d873      	bhi.n	80082b4 <HAL_TIM_ConfigClockSource+0x168>
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d058      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x136>
 80081d0:	2b40      	cmp	r3, #64	; 0x40
 80081d2:	d86f      	bhi.n	80082b4 <HAL_TIM_ConfigClockSource+0x168>
 80081d4:	2b30      	cmp	r3, #48	; 0x30
 80081d6:	d064      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x156>
 80081d8:	2b30      	cmp	r3, #48	; 0x30
 80081da:	d86b      	bhi.n	80082b4 <HAL_TIM_ConfigClockSource+0x168>
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d060      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x156>
 80081e0:	2b20      	cmp	r3, #32
 80081e2:	d867      	bhi.n	80082b4 <HAL_TIM_ConfigClockSource+0x168>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d05c      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x156>
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	d05a      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80081ec:	e062      	b.n	80082b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6899      	ldr	r1, [r3, #8]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f000 fb33 	bl	8008868 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008210:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	609a      	str	r2, [r3, #8]
      break;
 800821a:	e04e      	b.n	80082ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	6899      	ldr	r1, [r3, #8]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f000 fb1c 	bl	8008868 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800823e:	609a      	str	r2, [r3, #8]
      break;
 8008240:	e03b      	b.n	80082ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	6859      	ldr	r1, [r3, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	461a      	mov	r2, r3
 8008250:	f000 fa90 	bl	8008774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2150      	movs	r1, #80	; 0x50
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fae9 	bl	8008832 <TIM_ITRx_SetConfig>
      break;
 8008260:	e02b      	b.n	80082ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	6859      	ldr	r1, [r3, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	461a      	mov	r2, r3
 8008270:	f000 faaf 	bl	80087d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2160      	movs	r1, #96	; 0x60
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fad9 	bl	8008832 <TIM_ITRx_SetConfig>
      break;
 8008280:	e01b      	b.n	80082ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6859      	ldr	r1, [r3, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	461a      	mov	r2, r3
 8008290:	f000 fa70 	bl	8008774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2140      	movs	r1, #64	; 0x40
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fac9 	bl	8008832 <TIM_ITRx_SetConfig>
      break;
 80082a0:	e00b      	b.n	80082ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f000 fac0 	bl	8008832 <TIM_ITRx_SetConfig>
        break;
 80082b2:	e002      	b.n	80082ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80082b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a40      	ldr	r2, [pc, #256]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f2:	d00f      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a3d      	ldr	r2, [pc, #244]	; (80083ec <TIM_Base_SetConfig+0x118>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00b      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a3c      	ldr	r2, [pc, #240]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a3b      	ldr	r2, [pc, #236]	; (80083f4 <TIM_Base_SetConfig+0x120>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a3a      	ldr	r2, [pc, #232]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d108      	bne.n	8008326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a2f      	ldr	r2, [pc, #188]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d02b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008334:	d027      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a2c      	ldr	r2, [pc, #176]	; (80083ec <TIM_Base_SetConfig+0x118>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d023      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01f      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a2a      	ldr	r2, [pc, #168]	; (80083f4 <TIM_Base_SetConfig+0x120>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d01b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a29      	ldr	r2, [pc, #164]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d017      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a28      	ldr	r2, [pc, #160]	; (80083fc <TIM_Base_SetConfig+0x128>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d013      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a27      	ldr	r2, [pc, #156]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00f      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a26      	ldr	r2, [pc, #152]	; (8008404 <TIM_Base_SetConfig+0x130>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a25      	ldr	r2, [pc, #148]	; (8008408 <TIM_Base_SetConfig+0x134>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d007      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a24      	ldr	r2, [pc, #144]	; (800840c <TIM_Base_SetConfig+0x138>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d003      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a23      	ldr	r2, [pc, #140]	; (8008410 <TIM_Base_SetConfig+0x13c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d108      	bne.n	8008398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a0a      	ldr	r2, [pc, #40]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_Base_SetConfig+0xf8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a0c      	ldr	r2, [pc, #48]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d103      	bne.n	80083d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	615a      	str	r2, [r3, #20]
}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40010400 	.word	0x40010400
 80083fc:	40014000 	.word	0x40014000
 8008400:	40014400 	.word	0x40014400
 8008404:	40014800 	.word	0x40014800
 8008408:	40001800 	.word	0x40001800
 800840c:	40001c00 	.word	0x40001c00
 8008410:	40002000 	.word	0x40002000

08008414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f023 0201 	bic.w	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f023 0302 	bic.w	r3, r3, #2
 800845c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a20      	ldr	r2, [pc, #128]	; (80084ec <TIM_OC1_SetConfig+0xd8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_OC1_SetConfig+0x64>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <TIM_OC1_SetConfig+0xdc>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d10c      	bne.n	8008492 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f023 0308 	bic.w	r3, r3, #8
 800847e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f023 0304 	bic.w	r3, r3, #4
 8008490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a15      	ldr	r2, [pc, #84]	; (80084ec <TIM_OC1_SetConfig+0xd8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d003      	beq.n	80084a2 <TIM_OC1_SetConfig+0x8e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a14      	ldr	r2, [pc, #80]	; (80084f0 <TIM_OC1_SetConfig+0xdc>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d111      	bne.n	80084c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	621a      	str	r2, [r3, #32]
}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	40010000 	.word	0x40010000
 80084f0:	40010400 	.word	0x40010400

080084f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f023 0210 	bic.w	r2, r3, #16
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f023 0320 	bic.w	r3, r3, #32
 800853e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a22      	ldr	r2, [pc, #136]	; (80085d8 <TIM_OC2_SetConfig+0xe4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d003      	beq.n	800855c <TIM_OC2_SetConfig+0x68>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a21      	ldr	r2, [pc, #132]	; (80085dc <TIM_OC2_SetConfig+0xe8>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d10d      	bne.n	8008578 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a17      	ldr	r2, [pc, #92]	; (80085d8 <TIM_OC2_SetConfig+0xe4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC2_SetConfig+0x94>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a16      	ldr	r2, [pc, #88]	; (80085dc <TIM_OC2_SetConfig+0xe8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d113      	bne.n	80085b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800858e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40010000 	.word	0x40010000
 80085dc:	40010400 	.word	0x40010400

080085e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 0303 	bic.w	r3, r3, #3
 8008616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <TIM_OC3_SetConfig+0xe0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d003      	beq.n	8008646 <TIM_OC3_SetConfig+0x66>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a20      	ldr	r2, [pc, #128]	; (80086c4 <TIM_OC3_SetConfig+0xe4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d10d      	bne.n	8008662 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800864c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a16      	ldr	r2, [pc, #88]	; (80086c0 <TIM_OC3_SetConfig+0xe0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d003      	beq.n	8008672 <TIM_OC3_SetConfig+0x92>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a15      	ldr	r2, [pc, #84]	; (80086c4 <TIM_OC3_SetConfig+0xe4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d113      	bne.n	800869a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	621a      	str	r2, [r3, #32]
}
 80086b4:	bf00      	nop
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40010400 	.word	0x40010400

080086c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	031b      	lsls	r3, r3, #12
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a12      	ldr	r2, [pc, #72]	; (800876c <TIM_OC4_SetConfig+0xa4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_OC4_SetConfig+0x68>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a11      	ldr	r2, [pc, #68]	; (8008770 <TIM_OC4_SetConfig+0xa8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d109      	bne.n	8008744 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	019b      	lsls	r3, r3, #6
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000
 8008770:	40010400 	.word	0x40010400

08008774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f023 0201 	bic.w	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800879e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f023 030a 	bic.w	r3, r3, #10
 80087b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	621a      	str	r2, [r3, #32]
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b087      	sub	sp, #28
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	f023 0210 	bic.w	r2, r3, #16
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	031b      	lsls	r3, r3, #12
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800880e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	621a      	str	r2, [r3, #32]
}
 8008826:	bf00      	nop
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4313      	orrs	r3, r2
 8008850:	f043 0307 	orr.w	r3, r3, #7
 8008854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	609a      	str	r2, [r3, #8]
}
 800885c:	bf00      	nop
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	021a      	lsls	r2, r3, #8
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	431a      	orrs	r2, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4313      	orrs	r3, r2
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	4313      	orrs	r3, r2
 8008894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	609a      	str	r2, [r3, #8]
}
 800889c:	bf00      	nop
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088bc:	2302      	movs	r3, #2
 80088be:	e05a      	b.n	8008976 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a21      	ldr	r2, [pc, #132]	; (8008984 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d022      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800890c:	d01d      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1d      	ldr	r2, [pc, #116]	; (8008988 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d018      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a1b      	ldr	r2, [pc, #108]	; (800898c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d013      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a1a      	ldr	r2, [pc, #104]	; (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00e      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a18      	ldr	r2, [pc, #96]	; (8008994 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d009      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a17      	ldr	r2, [pc, #92]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d004      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a15      	ldr	r2, [pc, #84]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d10c      	bne.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	4313      	orrs	r3, r2
 800895a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	40010000 	.word	0x40010000
 8008988:	40000400 	.word	0x40000400
 800898c:	40000800 	.word	0x40000800
 8008990:	40000c00 	.word	0x40000c00
 8008994:	40010400 	.word	0x40010400
 8008998:	40014000 	.word	0x40014000
 800899c:	40001800 	.word	0x40001800

080089a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e03d      	b.n	8008a38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e03f      	b.n	8008ad6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d106      	bne.n	8008a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fb fbaa 	bl	80041c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2224      	movs	r2, #36	; 0x24
 8008a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fa89 	bl	8008fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	695a      	ldr	r2, [r3, #20]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	4613      	mov	r3, r2
 8008aec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	d153      	bne.n	8008ba2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <HAL_UART_Transmit_DMA+0x26>
 8008b00:	88fb      	ldrh	r3, [r7, #6]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e04c      	b.n	8008ba4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_UART_Transmit_DMA+0x38>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e045      	b.n	8008ba4 <HAL_UART_Transmit_DMA+0xc4>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	88fa      	ldrh	r2, [r7, #6]
 8008b2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	88fa      	ldrh	r2, [r7, #6]
 8008b30:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2221      	movs	r2, #33	; 0x21
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b44:	4a19      	ldr	r2, [pc, #100]	; (8008bac <HAL_UART_Transmit_DMA+0xcc>)
 8008b46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4c:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <HAL_UART_Transmit_DMA+0xd0>)
 8008b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b54:	4a17      	ldr	r2, [pc, #92]	; (8008bb4 <HAL_UART_Transmit_DMA+0xd4>)
 8008b56:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008b60:	f107 0308 	add.w	r3, r7, #8
 8008b64:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3304      	adds	r3, #4
 8008b74:	461a      	mov	r2, r3
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	f7fc fc1e 	bl	80053b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b84:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695a      	ldr	r2, [r3, #20]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b9c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e000      	b.n	8008ba4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008ba2:	2302      	movs	r3, #2
  }
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	08008c81 	.word	0x08008c81
 8008bb0:	08008cd3 	.word	0x08008cd3
 8008bb4:	08008dbb 	.word	0x08008dbb

08008bb8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b20      	cmp	r3, #32
 8008bd0:	d11d      	bne.n	8008c0e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <HAL_UART_Receive_DMA+0x26>
 8008bd8:	88fb      	ldrh	r3, [r7, #6]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e016      	b.n	8008c10 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d101      	bne.n	8008bf0 <HAL_UART_Receive_DMA+0x38>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e00f      	b.n	8008c10 <HAL_UART_Receive_DMA+0x58>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008bfe:	88fb      	ldrh	r3, [r7, #6]
 8008c00:	461a      	mov	r2, r3
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 f923 	bl	8008e50 <UART_Start_Receive_DMA>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	e000      	b.n	8008c10 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c0e:	2302      	movs	r3, #2
  }
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d113      	bne.n	8008cc4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	695a      	ldr	r2, [r3, #20]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cb0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cc0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cc2:	e002      	b.n	8008cca <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7f8 f9f4 	bl	80010b2 <HAL_UART_TxCpltCallback>
}
 8008cca:	bf00      	nop
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff ff99 	bl	8008c18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d12a      	bne.n	8008d60 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d1e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	695a      	ldr	r2, [r3, #20]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0201 	bic.w	r2, r2, #1
 8008d2e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d3e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d107      	bne.n	8008d60 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0210 	bic.w	r2, r2, #16
 8008d5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d106      	bne.n	8008d76 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff ff7a 	bl	8008c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d74:	e002      	b.n	8008d7c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff ff58 	bl	8008c2c <HAL_UART_RxCpltCallback>
}
 8008d7c:	bf00      	nop
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d108      	bne.n	8008dac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d9e:	085b      	lsrs	r3, r3, #1
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	4619      	mov	r1, r3
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f7ff ff5f 	bl	8008c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008daa:	e002      	b.n	8008db2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff ff47 	bl	8008c40 <HAL_UART_RxHalfCpltCallback>
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd6:	2b80      	cmp	r3, #128	; 0x80
 8008dd8:	bf0c      	ite	eq
 8008dda:	2301      	moveq	r3, #1
 8008ddc:	2300      	movne	r3, #0
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b21      	cmp	r3, #33	; 0x21
 8008dec:	d108      	bne.n	8008e00 <UART_DMAError+0x46>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d005      	beq.n	8008e00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2200      	movs	r2, #0
 8008df8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008dfa:	68b8      	ldr	r0, [r7, #8]
 8008dfc:	f000 f88c 	bl	8008f18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0a:	2b40      	cmp	r3, #64	; 0x40
 8008e0c:	bf0c      	ite	eq
 8008e0e:	2301      	moveq	r3, #1
 8008e10:	2300      	movne	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b22      	cmp	r3, #34	; 0x22
 8008e20:	d108      	bne.n	8008e34 <UART_DMAError+0x7a>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008e2e:	68b8      	ldr	r0, [r7, #8]
 8008e30:	f000 f888 	bl	8008f44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e38:	f043 0210 	orr.w	r2, r3, #16
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e40:	68b8      	ldr	r0, [r7, #8]
 8008e42:	f7ff ff07 	bl	8008c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2222      	movs	r2, #34	; 0x22
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	4a23      	ldr	r2, [pc, #140]	; (8008f0c <UART_Start_Receive_DMA+0xbc>)
 8008e7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e84:	4a22      	ldr	r2, [pc, #136]	; (8008f10 <UART_Start_Receive_DMA+0xc0>)
 8008e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	4a21      	ldr	r2, [pc, #132]	; (8008f14 <UART_Start_Receive_DMA+0xc4>)
 8008e8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	2200      	movs	r2, #0
 8008e96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008e98:	f107 0308 	add.w	r3, r7, #8
 8008e9c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	f7fc fa82 	bl	80053b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	613b      	str	r3, [r7, #16]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	613b      	str	r3, [r7, #16]
 8008ec8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ee0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	695a      	ldr	r2, [r3, #20]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0201 	orr.w	r2, r2, #1
 8008ef0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695a      	ldr	r2, [r3, #20]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f00:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	08008cef 	.word	0x08008cef
 8008f10:	08008d85 	.word	0x08008d85
 8008f14:	08008dbb 	.word	0x08008dbb

08008f18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008f2e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0201 	bic.w	r2, r2, #1
 8008f6a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d107      	bne.n	8008f84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0210 	bic.w	r2, r2, #16
 8008f82:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
	...

08008fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	b09f      	sub	sp, #124	; 0x7c
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fb6:	68d9      	ldr	r1, [r3, #12]
 8008fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	ea40 0301 	orr.w	r3, r0, r1
 8008fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fe4:	f021 010c 	bic.w	r1, r1, #12
 8008fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ffe:	6999      	ldr	r1, [r3, #24]
 8009000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	ea40 0301 	orr.w	r3, r0, r1
 8009008:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800900a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	4bc5      	ldr	r3, [pc, #788]	; (8009324 <UART_SetConfig+0x384>)
 8009010:	429a      	cmp	r2, r3
 8009012:	d004      	beq.n	800901e <UART_SetConfig+0x7e>
 8009014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	4bc3      	ldr	r3, [pc, #780]	; (8009328 <UART_SetConfig+0x388>)
 800901a:	429a      	cmp	r2, r3
 800901c:	d103      	bne.n	8009026 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800901e:	f7fe ff1b 	bl	8007e58 <HAL_RCC_GetPCLK2Freq>
 8009022:	6778      	str	r0, [r7, #116]	; 0x74
 8009024:	e002      	b.n	800902c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009026:	f7fe ff03 	bl	8007e30 <HAL_RCC_GetPCLK1Freq>
 800902a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800902c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009034:	f040 80b6 	bne.w	80091a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800903a:	461c      	mov	r4, r3
 800903c:	f04f 0500 	mov.w	r5, #0
 8009040:	4622      	mov	r2, r4
 8009042:	462b      	mov	r3, r5
 8009044:	1891      	adds	r1, r2, r2
 8009046:	6439      	str	r1, [r7, #64]	; 0x40
 8009048:	415b      	adcs	r3, r3
 800904a:	647b      	str	r3, [r7, #68]	; 0x44
 800904c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009050:	1912      	adds	r2, r2, r4
 8009052:	eb45 0303 	adc.w	r3, r5, r3
 8009056:	f04f 0000 	mov.w	r0, #0
 800905a:	f04f 0100 	mov.w	r1, #0
 800905e:	00d9      	lsls	r1, r3, #3
 8009060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009064:	00d0      	lsls	r0, r2, #3
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	1911      	adds	r1, r2, r4
 800906c:	6639      	str	r1, [r7, #96]	; 0x60
 800906e:	416b      	adcs	r3, r5
 8009070:	667b      	str	r3, [r7, #100]	; 0x64
 8009072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	461a      	mov	r2, r3
 8009078:	f04f 0300 	mov.w	r3, #0
 800907c:	1891      	adds	r1, r2, r2
 800907e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009080:	415b      	adcs	r3, r3
 8009082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009088:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800908c:	f7f7 fda0 	bl	8000bd0 <__aeabi_uldivmod>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4ba5      	ldr	r3, [pc, #660]	; (800932c <UART_SetConfig+0x38c>)
 8009096:	fba3 2302 	umull	r2, r3, r3, r2
 800909a:	095b      	lsrs	r3, r3, #5
 800909c:	011e      	lsls	r6, r3, #4
 800909e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a0:	461c      	mov	r4, r3
 80090a2:	f04f 0500 	mov.w	r5, #0
 80090a6:	4622      	mov	r2, r4
 80090a8:	462b      	mov	r3, r5
 80090aa:	1891      	adds	r1, r2, r2
 80090ac:	6339      	str	r1, [r7, #48]	; 0x30
 80090ae:	415b      	adcs	r3, r3
 80090b0:	637b      	str	r3, [r7, #52]	; 0x34
 80090b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80090b6:	1912      	adds	r2, r2, r4
 80090b8:	eb45 0303 	adc.w	r3, r5, r3
 80090bc:	f04f 0000 	mov.w	r0, #0
 80090c0:	f04f 0100 	mov.w	r1, #0
 80090c4:	00d9      	lsls	r1, r3, #3
 80090c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090ca:	00d0      	lsls	r0, r2, #3
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	1911      	adds	r1, r2, r4
 80090d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80090d4:	416b      	adcs	r3, r5
 80090d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	461a      	mov	r2, r3
 80090de:	f04f 0300 	mov.w	r3, #0
 80090e2:	1891      	adds	r1, r2, r2
 80090e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80090e6:	415b      	adcs	r3, r3
 80090e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80090f2:	f7f7 fd6d 	bl	8000bd0 <__aeabi_uldivmod>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4b8c      	ldr	r3, [pc, #560]	; (800932c <UART_SetConfig+0x38c>)
 80090fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	2164      	movs	r1, #100	; 0x64
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	3332      	adds	r3, #50	; 0x32
 800910e:	4a87      	ldr	r2, [pc, #540]	; (800932c <UART_SetConfig+0x38c>)
 8009110:	fba2 2303 	umull	r2, r3, r2, r3
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800911c:	441e      	add	r6, r3
 800911e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009120:	4618      	mov	r0, r3
 8009122:	f04f 0100 	mov.w	r1, #0
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	1894      	adds	r4, r2, r2
 800912c:	623c      	str	r4, [r7, #32]
 800912e:	415b      	adcs	r3, r3
 8009130:	627b      	str	r3, [r7, #36]	; 0x24
 8009132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009136:	1812      	adds	r2, r2, r0
 8009138:	eb41 0303 	adc.w	r3, r1, r3
 800913c:	f04f 0400 	mov.w	r4, #0
 8009140:	f04f 0500 	mov.w	r5, #0
 8009144:	00dd      	lsls	r5, r3, #3
 8009146:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800914a:	00d4      	lsls	r4, r2, #3
 800914c:	4622      	mov	r2, r4
 800914e:	462b      	mov	r3, r5
 8009150:	1814      	adds	r4, r2, r0
 8009152:	653c      	str	r4, [r7, #80]	; 0x50
 8009154:	414b      	adcs	r3, r1
 8009156:	657b      	str	r3, [r7, #84]	; 0x54
 8009158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	461a      	mov	r2, r3
 800915e:	f04f 0300 	mov.w	r3, #0
 8009162:	1891      	adds	r1, r2, r2
 8009164:	61b9      	str	r1, [r7, #24]
 8009166:	415b      	adcs	r3, r3
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800916e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009172:	f7f7 fd2d 	bl	8000bd0 <__aeabi_uldivmod>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4b6c      	ldr	r3, [pc, #432]	; (800932c <UART_SetConfig+0x38c>)
 800917c:	fba3 1302 	umull	r1, r3, r3, r2
 8009180:	095b      	lsrs	r3, r3, #5
 8009182:	2164      	movs	r1, #100	; 0x64
 8009184:	fb01 f303 	mul.w	r3, r1, r3
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	3332      	adds	r3, #50	; 0x32
 800918e:	4a67      	ldr	r2, [pc, #412]	; (800932c <UART_SetConfig+0x38c>)
 8009190:	fba2 2303 	umull	r2, r3, r2, r3
 8009194:	095b      	lsrs	r3, r3, #5
 8009196:	f003 0207 	and.w	r2, r3, #7
 800919a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4432      	add	r2, r6
 80091a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80091a2:	e0b9      	b.n	8009318 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091a6:	461c      	mov	r4, r3
 80091a8:	f04f 0500 	mov.w	r5, #0
 80091ac:	4622      	mov	r2, r4
 80091ae:	462b      	mov	r3, r5
 80091b0:	1891      	adds	r1, r2, r2
 80091b2:	6139      	str	r1, [r7, #16]
 80091b4:	415b      	adcs	r3, r3
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80091bc:	1912      	adds	r2, r2, r4
 80091be:	eb45 0303 	adc.w	r3, r5, r3
 80091c2:	f04f 0000 	mov.w	r0, #0
 80091c6:	f04f 0100 	mov.w	r1, #0
 80091ca:	00d9      	lsls	r1, r3, #3
 80091cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091d0:	00d0      	lsls	r0, r2, #3
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	eb12 0804 	adds.w	r8, r2, r4
 80091da:	eb43 0905 	adc.w	r9, r3, r5
 80091de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f04f 0100 	mov.w	r1, #0
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	f04f 0300 	mov.w	r3, #0
 80091f0:	008b      	lsls	r3, r1, #2
 80091f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091f6:	0082      	lsls	r2, r0, #2
 80091f8:	4640      	mov	r0, r8
 80091fa:	4649      	mov	r1, r9
 80091fc:	f7f7 fce8 	bl	8000bd0 <__aeabi_uldivmod>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4b49      	ldr	r3, [pc, #292]	; (800932c <UART_SetConfig+0x38c>)
 8009206:	fba3 2302 	umull	r2, r3, r3, r2
 800920a:	095b      	lsrs	r3, r3, #5
 800920c:	011e      	lsls	r6, r3, #4
 800920e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009210:	4618      	mov	r0, r3
 8009212:	f04f 0100 	mov.w	r1, #0
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	1894      	adds	r4, r2, r2
 800921c:	60bc      	str	r4, [r7, #8]
 800921e:	415b      	adcs	r3, r3
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009226:	1812      	adds	r2, r2, r0
 8009228:	eb41 0303 	adc.w	r3, r1, r3
 800922c:	f04f 0400 	mov.w	r4, #0
 8009230:	f04f 0500 	mov.w	r5, #0
 8009234:	00dd      	lsls	r5, r3, #3
 8009236:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800923a:	00d4      	lsls	r4, r2, #3
 800923c:	4622      	mov	r2, r4
 800923e:	462b      	mov	r3, r5
 8009240:	1814      	adds	r4, r2, r0
 8009242:	64bc      	str	r4, [r7, #72]	; 0x48
 8009244:	414b      	adcs	r3, r1
 8009246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	4618      	mov	r0, r3
 800924e:	f04f 0100 	mov.w	r1, #0
 8009252:	f04f 0200 	mov.w	r2, #0
 8009256:	f04f 0300 	mov.w	r3, #0
 800925a:	008b      	lsls	r3, r1, #2
 800925c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009260:	0082      	lsls	r2, r0, #2
 8009262:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009266:	f7f7 fcb3 	bl	8000bd0 <__aeabi_uldivmod>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4b2f      	ldr	r3, [pc, #188]	; (800932c <UART_SetConfig+0x38c>)
 8009270:	fba3 1302 	umull	r1, r3, r3, r2
 8009274:	095b      	lsrs	r3, r3, #5
 8009276:	2164      	movs	r1, #100	; 0x64
 8009278:	fb01 f303 	mul.w	r3, r1, r3
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	3332      	adds	r3, #50	; 0x32
 8009282:	4a2a      	ldr	r2, [pc, #168]	; (800932c <UART_SetConfig+0x38c>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800928e:	441e      	add	r6, r3
 8009290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009292:	4618      	mov	r0, r3
 8009294:	f04f 0100 	mov.w	r1, #0
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	1894      	adds	r4, r2, r2
 800929e:	603c      	str	r4, [r7, #0]
 80092a0:	415b      	adcs	r3, r3
 80092a2:	607b      	str	r3, [r7, #4]
 80092a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a8:	1812      	adds	r2, r2, r0
 80092aa:	eb41 0303 	adc.w	r3, r1, r3
 80092ae:	f04f 0400 	mov.w	r4, #0
 80092b2:	f04f 0500 	mov.w	r5, #0
 80092b6:	00dd      	lsls	r5, r3, #3
 80092b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092bc:	00d4      	lsls	r4, r2, #3
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	eb12 0a00 	adds.w	sl, r2, r0
 80092c6:	eb43 0b01 	adc.w	fp, r3, r1
 80092ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f04f 0100 	mov.w	r1, #0
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	f04f 0300 	mov.w	r3, #0
 80092dc:	008b      	lsls	r3, r1, #2
 80092de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092e2:	0082      	lsls	r2, r0, #2
 80092e4:	4650      	mov	r0, sl
 80092e6:	4659      	mov	r1, fp
 80092e8:	f7f7 fc72 	bl	8000bd0 <__aeabi_uldivmod>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4b0e      	ldr	r3, [pc, #56]	; (800932c <UART_SetConfig+0x38c>)
 80092f2:	fba3 1302 	umull	r1, r3, r3, r2
 80092f6:	095b      	lsrs	r3, r3, #5
 80092f8:	2164      	movs	r1, #100	; 0x64
 80092fa:	fb01 f303 	mul.w	r3, r1, r3
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	3332      	adds	r3, #50	; 0x32
 8009304:	4a09      	ldr	r2, [pc, #36]	; (800932c <UART_SetConfig+0x38c>)
 8009306:	fba2 2303 	umull	r2, r3, r2, r3
 800930a:	095b      	lsrs	r3, r3, #5
 800930c:	f003 020f 	and.w	r2, r3, #15
 8009310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4432      	add	r2, r6
 8009316:	609a      	str	r2, [r3, #8]
}
 8009318:	bf00      	nop
 800931a:	377c      	adds	r7, #124	; 0x7c
 800931c:	46bd      	mov	sp, r7
 800931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009322:	bf00      	nop
 8009324:	40011000 	.word	0x40011000
 8009328:	40011400 	.word	0x40011400
 800932c:	51eb851f 	.word	0x51eb851f

08009330 <__errno>:
 8009330:	4b01      	ldr	r3, [pc, #4]	; (8009338 <__errno+0x8>)
 8009332:	6818      	ldr	r0, [r3, #0]
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	2000000c 	.word	0x2000000c

0800933c <__libc_init_array>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	4d0d      	ldr	r5, [pc, #52]	; (8009374 <__libc_init_array+0x38>)
 8009340:	4c0d      	ldr	r4, [pc, #52]	; (8009378 <__libc_init_array+0x3c>)
 8009342:	1b64      	subs	r4, r4, r5
 8009344:	10a4      	asrs	r4, r4, #2
 8009346:	2600      	movs	r6, #0
 8009348:	42a6      	cmp	r6, r4
 800934a:	d109      	bne.n	8009360 <__libc_init_array+0x24>
 800934c:	4d0b      	ldr	r5, [pc, #44]	; (800937c <__libc_init_array+0x40>)
 800934e:	4c0c      	ldr	r4, [pc, #48]	; (8009380 <__libc_init_array+0x44>)
 8009350:	f002 fab0 	bl	800b8b4 <_init>
 8009354:	1b64      	subs	r4, r4, r5
 8009356:	10a4      	asrs	r4, r4, #2
 8009358:	2600      	movs	r6, #0
 800935a:	42a6      	cmp	r6, r4
 800935c:	d105      	bne.n	800936a <__libc_init_array+0x2e>
 800935e:	bd70      	pop	{r4, r5, r6, pc}
 8009360:	f855 3b04 	ldr.w	r3, [r5], #4
 8009364:	4798      	blx	r3
 8009366:	3601      	adds	r6, #1
 8009368:	e7ee      	b.n	8009348 <__libc_init_array+0xc>
 800936a:	f855 3b04 	ldr.w	r3, [r5], #4
 800936e:	4798      	blx	r3
 8009370:	3601      	adds	r6, #1
 8009372:	e7f2      	b.n	800935a <__libc_init_array+0x1e>
 8009374:	0800bbd0 	.word	0x0800bbd0
 8009378:	0800bbd0 	.word	0x0800bbd0
 800937c:	0800bbd0 	.word	0x0800bbd0
 8009380:	0800bbd4 	.word	0x0800bbd4

08009384 <memcpy>:
 8009384:	440a      	add	r2, r1
 8009386:	4291      	cmp	r1, r2
 8009388:	f100 33ff 	add.w	r3, r0, #4294967295
 800938c:	d100      	bne.n	8009390 <memcpy+0xc>
 800938e:	4770      	bx	lr
 8009390:	b510      	push	{r4, lr}
 8009392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800939a:	4291      	cmp	r1, r2
 800939c:	d1f9      	bne.n	8009392 <memcpy+0xe>
 800939e:	bd10      	pop	{r4, pc}

080093a0 <memset>:
 80093a0:	4402      	add	r2, r0
 80093a2:	4603      	mov	r3, r0
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d100      	bne.n	80093aa <memset+0xa>
 80093a8:	4770      	bx	lr
 80093aa:	f803 1b01 	strb.w	r1, [r3], #1
 80093ae:	e7f9      	b.n	80093a4 <memset+0x4>

080093b0 <atan>:
 80093b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	ec55 4b10 	vmov	r4, r5, d0
 80093b8:	4bc3      	ldr	r3, [pc, #780]	; (80096c8 <atan+0x318>)
 80093ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80093be:	429e      	cmp	r6, r3
 80093c0:	46ab      	mov	fp, r5
 80093c2:	dd18      	ble.n	80093f6 <atan+0x46>
 80093c4:	4bc1      	ldr	r3, [pc, #772]	; (80096cc <atan+0x31c>)
 80093c6:	429e      	cmp	r6, r3
 80093c8:	dc01      	bgt.n	80093ce <atan+0x1e>
 80093ca:	d109      	bne.n	80093e0 <atan+0x30>
 80093cc:	b144      	cbz	r4, 80093e0 <atan+0x30>
 80093ce:	4622      	mov	r2, r4
 80093d0:	462b      	mov	r3, r5
 80093d2:	4620      	mov	r0, r4
 80093d4:	4629      	mov	r1, r5
 80093d6:	f7f6 fefd 	bl	80001d4 <__adddf3>
 80093da:	4604      	mov	r4, r0
 80093dc:	460d      	mov	r5, r1
 80093de:	e006      	b.n	80093ee <atan+0x3e>
 80093e0:	f1bb 0f00 	cmp.w	fp, #0
 80093e4:	f300 8131 	bgt.w	800964a <atan+0x29a>
 80093e8:	a59b      	add	r5, pc, #620	; (adr r5, 8009658 <atan+0x2a8>)
 80093ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093ee:	ec45 4b10 	vmov	d0, r4, r5
 80093f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f6:	4bb6      	ldr	r3, [pc, #728]	; (80096d0 <atan+0x320>)
 80093f8:	429e      	cmp	r6, r3
 80093fa:	dc14      	bgt.n	8009426 <atan+0x76>
 80093fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009400:	429e      	cmp	r6, r3
 8009402:	dc0d      	bgt.n	8009420 <atan+0x70>
 8009404:	a396      	add	r3, pc, #600	; (adr r3, 8009660 <atan+0x2b0>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	ee10 0a10 	vmov	r0, s0
 800940e:	4629      	mov	r1, r5
 8009410:	f7f6 fee0 	bl	80001d4 <__adddf3>
 8009414:	4baf      	ldr	r3, [pc, #700]	; (80096d4 <atan+0x324>)
 8009416:	2200      	movs	r2, #0
 8009418:	f7f7 fb22 	bl	8000a60 <__aeabi_dcmpgt>
 800941c:	2800      	cmp	r0, #0
 800941e:	d1e6      	bne.n	80093ee <atan+0x3e>
 8009420:	f04f 3aff 	mov.w	sl, #4294967295
 8009424:	e02b      	b.n	800947e <atan+0xce>
 8009426:	f000 f963 	bl	80096f0 <fabs>
 800942a:	4bab      	ldr	r3, [pc, #684]	; (80096d8 <atan+0x328>)
 800942c:	429e      	cmp	r6, r3
 800942e:	ec55 4b10 	vmov	r4, r5, d0
 8009432:	f300 80bf 	bgt.w	80095b4 <atan+0x204>
 8009436:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800943a:	429e      	cmp	r6, r3
 800943c:	f300 80a0 	bgt.w	8009580 <atan+0x1d0>
 8009440:	ee10 2a10 	vmov	r2, s0
 8009444:	ee10 0a10 	vmov	r0, s0
 8009448:	462b      	mov	r3, r5
 800944a:	4629      	mov	r1, r5
 800944c:	f7f6 fec2 	bl	80001d4 <__adddf3>
 8009450:	4ba0      	ldr	r3, [pc, #640]	; (80096d4 <atan+0x324>)
 8009452:	2200      	movs	r2, #0
 8009454:	f7f6 febc 	bl	80001d0 <__aeabi_dsub>
 8009458:	2200      	movs	r2, #0
 800945a:	4606      	mov	r6, r0
 800945c:	460f      	mov	r7, r1
 800945e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009462:	4620      	mov	r0, r4
 8009464:	4629      	mov	r1, r5
 8009466:	f7f6 feb5 	bl	80001d4 <__adddf3>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	f7f7 f98f 	bl	8000794 <__aeabi_ddiv>
 8009476:	f04f 0a00 	mov.w	sl, #0
 800947a:	4604      	mov	r4, r0
 800947c:	460d      	mov	r5, r1
 800947e:	4622      	mov	r2, r4
 8009480:	462b      	mov	r3, r5
 8009482:	4620      	mov	r0, r4
 8009484:	4629      	mov	r1, r5
 8009486:	f7f7 f85b 	bl	8000540 <__aeabi_dmul>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4680      	mov	r8, r0
 8009490:	4689      	mov	r9, r1
 8009492:	f7f7 f855 	bl	8000540 <__aeabi_dmul>
 8009496:	a374      	add	r3, pc, #464	; (adr r3, 8009668 <atan+0x2b8>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	4606      	mov	r6, r0
 800949e:	460f      	mov	r7, r1
 80094a0:	f7f7 f84e 	bl	8000540 <__aeabi_dmul>
 80094a4:	a372      	add	r3, pc, #456	; (adr r3, 8009670 <atan+0x2c0>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f6 fe93 	bl	80001d4 <__adddf3>
 80094ae:	4632      	mov	r2, r6
 80094b0:	463b      	mov	r3, r7
 80094b2:	f7f7 f845 	bl	8000540 <__aeabi_dmul>
 80094b6:	a370      	add	r3, pc, #448	; (adr r3, 8009678 <atan+0x2c8>)
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	f7f6 fe8a 	bl	80001d4 <__adddf3>
 80094c0:	4632      	mov	r2, r6
 80094c2:	463b      	mov	r3, r7
 80094c4:	f7f7 f83c 	bl	8000540 <__aeabi_dmul>
 80094c8:	a36d      	add	r3, pc, #436	; (adr r3, 8009680 <atan+0x2d0>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	f7f6 fe81 	bl	80001d4 <__adddf3>
 80094d2:	4632      	mov	r2, r6
 80094d4:	463b      	mov	r3, r7
 80094d6:	f7f7 f833 	bl	8000540 <__aeabi_dmul>
 80094da:	a36b      	add	r3, pc, #428	; (adr r3, 8009688 <atan+0x2d8>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f7f6 fe78 	bl	80001d4 <__adddf3>
 80094e4:	4632      	mov	r2, r6
 80094e6:	463b      	mov	r3, r7
 80094e8:	f7f7 f82a 	bl	8000540 <__aeabi_dmul>
 80094ec:	a368      	add	r3, pc, #416	; (adr r3, 8009690 <atan+0x2e0>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f7f6 fe6f 	bl	80001d4 <__adddf3>
 80094f6:	4642      	mov	r2, r8
 80094f8:	464b      	mov	r3, r9
 80094fa:	f7f7 f821 	bl	8000540 <__aeabi_dmul>
 80094fe:	a366      	add	r3, pc, #408	; (adr r3, 8009698 <atan+0x2e8>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	4680      	mov	r8, r0
 8009506:	4689      	mov	r9, r1
 8009508:	4630      	mov	r0, r6
 800950a:	4639      	mov	r1, r7
 800950c:	f7f7 f818 	bl	8000540 <__aeabi_dmul>
 8009510:	a363      	add	r3, pc, #396	; (adr r3, 80096a0 <atan+0x2f0>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	f7f6 fe5b 	bl	80001d0 <__aeabi_dsub>
 800951a:	4632      	mov	r2, r6
 800951c:	463b      	mov	r3, r7
 800951e:	f7f7 f80f 	bl	8000540 <__aeabi_dmul>
 8009522:	a361      	add	r3, pc, #388	; (adr r3, 80096a8 <atan+0x2f8>)
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f7f6 fe52 	bl	80001d0 <__aeabi_dsub>
 800952c:	4632      	mov	r2, r6
 800952e:	463b      	mov	r3, r7
 8009530:	f7f7 f806 	bl	8000540 <__aeabi_dmul>
 8009534:	a35e      	add	r3, pc, #376	; (adr r3, 80096b0 <atan+0x300>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f7f6 fe49 	bl	80001d0 <__aeabi_dsub>
 800953e:	4632      	mov	r2, r6
 8009540:	463b      	mov	r3, r7
 8009542:	f7f6 fffd 	bl	8000540 <__aeabi_dmul>
 8009546:	a35c      	add	r3, pc, #368	; (adr r3, 80096b8 <atan+0x308>)
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f7f6 fe40 	bl	80001d0 <__aeabi_dsub>
 8009550:	4632      	mov	r2, r6
 8009552:	463b      	mov	r3, r7
 8009554:	f7f6 fff4 	bl	8000540 <__aeabi_dmul>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4640      	mov	r0, r8
 800955e:	4649      	mov	r1, r9
 8009560:	f7f6 fe38 	bl	80001d4 <__adddf3>
 8009564:	4622      	mov	r2, r4
 8009566:	462b      	mov	r3, r5
 8009568:	f7f6 ffea 	bl	8000540 <__aeabi_dmul>
 800956c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	d14b      	bne.n	800960e <atan+0x25e>
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	f7f6 fe29 	bl	80001d0 <__aeabi_dsub>
 800957e:	e72c      	b.n	80093da <atan+0x2a>
 8009580:	ee10 0a10 	vmov	r0, s0
 8009584:	4b53      	ldr	r3, [pc, #332]	; (80096d4 <atan+0x324>)
 8009586:	2200      	movs	r2, #0
 8009588:	4629      	mov	r1, r5
 800958a:	f7f6 fe21 	bl	80001d0 <__aeabi_dsub>
 800958e:	4b51      	ldr	r3, [pc, #324]	; (80096d4 <atan+0x324>)
 8009590:	4606      	mov	r6, r0
 8009592:	460f      	mov	r7, r1
 8009594:	2200      	movs	r2, #0
 8009596:	4620      	mov	r0, r4
 8009598:	4629      	mov	r1, r5
 800959a:	f7f6 fe1b 	bl	80001d4 <__adddf3>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	f7f7 f8f5 	bl	8000794 <__aeabi_ddiv>
 80095aa:	f04f 0a01 	mov.w	sl, #1
 80095ae:	4604      	mov	r4, r0
 80095b0:	460d      	mov	r5, r1
 80095b2:	e764      	b.n	800947e <atan+0xce>
 80095b4:	4b49      	ldr	r3, [pc, #292]	; (80096dc <atan+0x32c>)
 80095b6:	429e      	cmp	r6, r3
 80095b8:	da1d      	bge.n	80095f6 <atan+0x246>
 80095ba:	ee10 0a10 	vmov	r0, s0
 80095be:	4b48      	ldr	r3, [pc, #288]	; (80096e0 <atan+0x330>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	4629      	mov	r1, r5
 80095c4:	f7f6 fe04 	bl	80001d0 <__aeabi_dsub>
 80095c8:	4b45      	ldr	r3, [pc, #276]	; (80096e0 <atan+0x330>)
 80095ca:	4606      	mov	r6, r0
 80095cc:	460f      	mov	r7, r1
 80095ce:	2200      	movs	r2, #0
 80095d0:	4620      	mov	r0, r4
 80095d2:	4629      	mov	r1, r5
 80095d4:	f7f6 ffb4 	bl	8000540 <__aeabi_dmul>
 80095d8:	4b3e      	ldr	r3, [pc, #248]	; (80096d4 <atan+0x324>)
 80095da:	2200      	movs	r2, #0
 80095dc:	f7f6 fdfa 	bl	80001d4 <__adddf3>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f7 f8d4 	bl	8000794 <__aeabi_ddiv>
 80095ec:	f04f 0a02 	mov.w	sl, #2
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	e743      	b.n	800947e <atan+0xce>
 80095f6:	462b      	mov	r3, r5
 80095f8:	ee10 2a10 	vmov	r2, s0
 80095fc:	4939      	ldr	r1, [pc, #228]	; (80096e4 <atan+0x334>)
 80095fe:	2000      	movs	r0, #0
 8009600:	f7f7 f8c8 	bl	8000794 <__aeabi_ddiv>
 8009604:	f04f 0a03 	mov.w	sl, #3
 8009608:	4604      	mov	r4, r0
 800960a:	460d      	mov	r5, r1
 800960c:	e737      	b.n	800947e <atan+0xce>
 800960e:	4b36      	ldr	r3, [pc, #216]	; (80096e8 <atan+0x338>)
 8009610:	4e36      	ldr	r6, [pc, #216]	; (80096ec <atan+0x33c>)
 8009612:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009616:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800961a:	e9da 2300 	ldrd	r2, r3, [sl]
 800961e:	f7f6 fdd7 	bl	80001d0 <__aeabi_dsub>
 8009622:	4622      	mov	r2, r4
 8009624:	462b      	mov	r3, r5
 8009626:	f7f6 fdd3 	bl	80001d0 <__aeabi_dsub>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009632:	f7f6 fdcd 	bl	80001d0 <__aeabi_dsub>
 8009636:	f1bb 0f00 	cmp.w	fp, #0
 800963a:	4604      	mov	r4, r0
 800963c:	460d      	mov	r5, r1
 800963e:	f6bf aed6 	bge.w	80093ee <atan+0x3e>
 8009642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009646:	461d      	mov	r5, r3
 8009648:	e6d1      	b.n	80093ee <atan+0x3e>
 800964a:	a51d      	add	r5, pc, #116	; (adr r5, 80096c0 <atan+0x310>)
 800964c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009650:	e6cd      	b.n	80093ee <atan+0x3e>
 8009652:	bf00      	nop
 8009654:	f3af 8000 	nop.w
 8009658:	54442d18 	.word	0x54442d18
 800965c:	bff921fb 	.word	0xbff921fb
 8009660:	8800759c 	.word	0x8800759c
 8009664:	7e37e43c 	.word	0x7e37e43c
 8009668:	e322da11 	.word	0xe322da11
 800966c:	3f90ad3a 	.word	0x3f90ad3a
 8009670:	24760deb 	.word	0x24760deb
 8009674:	3fa97b4b 	.word	0x3fa97b4b
 8009678:	a0d03d51 	.word	0xa0d03d51
 800967c:	3fb10d66 	.word	0x3fb10d66
 8009680:	c54c206e 	.word	0xc54c206e
 8009684:	3fb745cd 	.word	0x3fb745cd
 8009688:	920083ff 	.word	0x920083ff
 800968c:	3fc24924 	.word	0x3fc24924
 8009690:	5555550d 	.word	0x5555550d
 8009694:	3fd55555 	.word	0x3fd55555
 8009698:	2c6a6c2f 	.word	0x2c6a6c2f
 800969c:	bfa2b444 	.word	0xbfa2b444
 80096a0:	52defd9a 	.word	0x52defd9a
 80096a4:	3fadde2d 	.word	0x3fadde2d
 80096a8:	af749a6d 	.word	0xaf749a6d
 80096ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80096b0:	fe231671 	.word	0xfe231671
 80096b4:	3fbc71c6 	.word	0x3fbc71c6
 80096b8:	9998ebc4 	.word	0x9998ebc4
 80096bc:	3fc99999 	.word	0x3fc99999
 80096c0:	54442d18 	.word	0x54442d18
 80096c4:	3ff921fb 	.word	0x3ff921fb
 80096c8:	440fffff 	.word	0x440fffff
 80096cc:	7ff00000 	.word	0x7ff00000
 80096d0:	3fdbffff 	.word	0x3fdbffff
 80096d4:	3ff00000 	.word	0x3ff00000
 80096d8:	3ff2ffff 	.word	0x3ff2ffff
 80096dc:	40038000 	.word	0x40038000
 80096e0:	3ff80000 	.word	0x3ff80000
 80096e4:	bff00000 	.word	0xbff00000
 80096e8:	0800b978 	.word	0x0800b978
 80096ec:	0800b958 	.word	0x0800b958

080096f0 <fabs>:
 80096f0:	ec51 0b10 	vmov	r0, r1, d0
 80096f4:	ee10 2a10 	vmov	r2, s0
 80096f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096fc:	ec43 2b10 	vmov	d0, r2, r3
 8009700:	4770      	bx	lr
 8009702:	0000      	movs	r0, r0
 8009704:	0000      	movs	r0, r0
	...

08009708 <sin>:
 8009708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800970a:	ec53 2b10 	vmov	r2, r3, d0
 800970e:	4826      	ldr	r0, [pc, #152]	; (80097a8 <sin+0xa0>)
 8009710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009714:	4281      	cmp	r1, r0
 8009716:	dc07      	bgt.n	8009728 <sin+0x20>
 8009718:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80097a0 <sin+0x98>
 800971c:	2000      	movs	r0, #0
 800971e:	f001 fe63 	bl	800b3e8 <__kernel_sin>
 8009722:	ec51 0b10 	vmov	r0, r1, d0
 8009726:	e007      	b.n	8009738 <sin+0x30>
 8009728:	4820      	ldr	r0, [pc, #128]	; (80097ac <sin+0xa4>)
 800972a:	4281      	cmp	r1, r0
 800972c:	dd09      	ble.n	8009742 <sin+0x3a>
 800972e:	ee10 0a10 	vmov	r0, s0
 8009732:	4619      	mov	r1, r3
 8009734:	f7f6 fd4c 	bl	80001d0 <__aeabi_dsub>
 8009738:	ec41 0b10 	vmov	d0, r0, r1
 800973c:	b005      	add	sp, #20
 800973e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009742:	4668      	mov	r0, sp
 8009744:	f000 ff88 	bl	800a658 <__ieee754_rem_pio2>
 8009748:	f000 0003 	and.w	r0, r0, #3
 800974c:	2801      	cmp	r0, #1
 800974e:	d008      	beq.n	8009762 <sin+0x5a>
 8009750:	2802      	cmp	r0, #2
 8009752:	d00d      	beq.n	8009770 <sin+0x68>
 8009754:	b9d0      	cbnz	r0, 800978c <sin+0x84>
 8009756:	ed9d 1b02 	vldr	d1, [sp, #8]
 800975a:	ed9d 0b00 	vldr	d0, [sp]
 800975e:	2001      	movs	r0, #1
 8009760:	e7dd      	b.n	800971e <sin+0x16>
 8009762:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009766:	ed9d 0b00 	vldr	d0, [sp]
 800976a:	f001 fa35 	bl	800abd8 <__kernel_cos>
 800976e:	e7d8      	b.n	8009722 <sin+0x1a>
 8009770:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009774:	ed9d 0b00 	vldr	d0, [sp]
 8009778:	2001      	movs	r0, #1
 800977a:	f001 fe35 	bl	800b3e8 <__kernel_sin>
 800977e:	ec53 2b10 	vmov	r2, r3, d0
 8009782:	ee10 0a10 	vmov	r0, s0
 8009786:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800978a:	e7d5      	b.n	8009738 <sin+0x30>
 800978c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009790:	ed9d 0b00 	vldr	d0, [sp]
 8009794:	f001 fa20 	bl	800abd8 <__kernel_cos>
 8009798:	e7f1      	b.n	800977e <sin+0x76>
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w
	...
 80097a8:	3fe921fb 	.word	0x3fe921fb
 80097ac:	7fefffff 	.word	0x7fefffff

080097b0 <fmod>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	ed2d 8b02 	vpush	{d8}
 80097b6:	ec57 6b10 	vmov	r6, r7, d0
 80097ba:	ec55 4b11 	vmov	r4, r5, d1
 80097be:	f000 f915 	bl	80099ec <__ieee754_fmod>
 80097c2:	4b18      	ldr	r3, [pc, #96]	; (8009824 <fmod+0x74>)
 80097c4:	eeb0 8a40 	vmov.f32	s16, s0
 80097c8:	eef0 8a60 	vmov.f32	s17, s1
 80097cc:	f993 3000 	ldrsb.w	r3, [r3]
 80097d0:	3301      	adds	r3, #1
 80097d2:	d020      	beq.n	8009816 <fmod+0x66>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	4620      	mov	r0, r4
 80097da:	4629      	mov	r1, r5
 80097dc:	f7f7 f94a 	bl	8000a74 <__aeabi_dcmpun>
 80097e0:	b9c8      	cbnz	r0, 8009816 <fmod+0x66>
 80097e2:	4632      	mov	r2, r6
 80097e4:	463b      	mov	r3, r7
 80097e6:	4630      	mov	r0, r6
 80097e8:	4639      	mov	r1, r7
 80097ea:	f7f7 f943 	bl	8000a74 <__aeabi_dcmpun>
 80097ee:	b990      	cbnz	r0, 8009816 <fmod+0x66>
 80097f0:	2200      	movs	r2, #0
 80097f2:	2300      	movs	r3, #0
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f7 f90a 	bl	8000a10 <__aeabi_dcmpeq>
 80097fc:	b158      	cbz	r0, 8009816 <fmod+0x66>
 80097fe:	f7ff fd97 	bl	8009330 <__errno>
 8009802:	2321      	movs	r3, #33	; 0x21
 8009804:	6003      	str	r3, [r0, #0]
 8009806:	2200      	movs	r2, #0
 8009808:	2300      	movs	r3, #0
 800980a:	4610      	mov	r0, r2
 800980c:	4619      	mov	r1, r3
 800980e:	f7f6 ffc1 	bl	8000794 <__aeabi_ddiv>
 8009812:	ec41 0b18 	vmov	d8, r0, r1
 8009816:	eeb0 0a48 	vmov.f32	s0, s16
 800981a:	eef0 0a68 	vmov.f32	s1, s17
 800981e:	ecbd 8b02 	vpop	{d8}
 8009822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009824:	20000070 	.word	0x20000070

08009828 <pow>:
 8009828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800982c:	ec59 8b10 	vmov	r8, r9, d0
 8009830:	ec57 6b11 	vmov	r6, r7, d1
 8009834:	f000 f9ec 	bl	8009c10 <__ieee754_pow>
 8009838:	4b4e      	ldr	r3, [pc, #312]	; (8009974 <pow+0x14c>)
 800983a:	f993 3000 	ldrsb.w	r3, [r3]
 800983e:	3301      	adds	r3, #1
 8009840:	ec55 4b10 	vmov	r4, r5, d0
 8009844:	d015      	beq.n	8009872 <pow+0x4a>
 8009846:	4632      	mov	r2, r6
 8009848:	463b      	mov	r3, r7
 800984a:	4630      	mov	r0, r6
 800984c:	4639      	mov	r1, r7
 800984e:	f7f7 f911 	bl	8000a74 <__aeabi_dcmpun>
 8009852:	b970      	cbnz	r0, 8009872 <pow+0x4a>
 8009854:	4642      	mov	r2, r8
 8009856:	464b      	mov	r3, r9
 8009858:	4640      	mov	r0, r8
 800985a:	4649      	mov	r1, r9
 800985c:	f7f7 f90a 	bl	8000a74 <__aeabi_dcmpun>
 8009860:	2200      	movs	r2, #0
 8009862:	2300      	movs	r3, #0
 8009864:	b148      	cbz	r0, 800987a <pow+0x52>
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f7 f8d1 	bl	8000a10 <__aeabi_dcmpeq>
 800986e:	2800      	cmp	r0, #0
 8009870:	d17d      	bne.n	800996e <pow+0x146>
 8009872:	ec45 4b10 	vmov	d0, r4, r5
 8009876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987a:	4640      	mov	r0, r8
 800987c:	4649      	mov	r1, r9
 800987e:	f7f7 f8c7 	bl	8000a10 <__aeabi_dcmpeq>
 8009882:	b1e0      	cbz	r0, 80098be <pow+0x96>
 8009884:	2200      	movs	r2, #0
 8009886:	2300      	movs	r3, #0
 8009888:	4630      	mov	r0, r6
 800988a:	4639      	mov	r1, r7
 800988c:	f7f7 f8c0 	bl	8000a10 <__aeabi_dcmpeq>
 8009890:	2800      	cmp	r0, #0
 8009892:	d16c      	bne.n	800996e <pow+0x146>
 8009894:	ec47 6b10 	vmov	d0, r6, r7
 8009898:	f001 fe64 	bl	800b564 <finite>
 800989c:	2800      	cmp	r0, #0
 800989e:	d0e8      	beq.n	8009872 <pow+0x4a>
 80098a0:	2200      	movs	r2, #0
 80098a2:	2300      	movs	r3, #0
 80098a4:	4630      	mov	r0, r6
 80098a6:	4639      	mov	r1, r7
 80098a8:	f7f7 f8bc 	bl	8000a24 <__aeabi_dcmplt>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d0e0      	beq.n	8009872 <pow+0x4a>
 80098b0:	f7ff fd3e 	bl	8009330 <__errno>
 80098b4:	2321      	movs	r3, #33	; 0x21
 80098b6:	6003      	str	r3, [r0, #0]
 80098b8:	2400      	movs	r4, #0
 80098ba:	4d2f      	ldr	r5, [pc, #188]	; (8009978 <pow+0x150>)
 80098bc:	e7d9      	b.n	8009872 <pow+0x4a>
 80098be:	ec45 4b10 	vmov	d0, r4, r5
 80098c2:	f001 fe4f 	bl	800b564 <finite>
 80098c6:	bbb8      	cbnz	r0, 8009938 <pow+0x110>
 80098c8:	ec49 8b10 	vmov	d0, r8, r9
 80098cc:	f001 fe4a 	bl	800b564 <finite>
 80098d0:	b390      	cbz	r0, 8009938 <pow+0x110>
 80098d2:	ec47 6b10 	vmov	d0, r6, r7
 80098d6:	f001 fe45 	bl	800b564 <finite>
 80098da:	b368      	cbz	r0, 8009938 <pow+0x110>
 80098dc:	4622      	mov	r2, r4
 80098de:	462b      	mov	r3, r5
 80098e0:	4620      	mov	r0, r4
 80098e2:	4629      	mov	r1, r5
 80098e4:	f7f7 f8c6 	bl	8000a74 <__aeabi_dcmpun>
 80098e8:	b160      	cbz	r0, 8009904 <pow+0xdc>
 80098ea:	f7ff fd21 	bl	8009330 <__errno>
 80098ee:	2321      	movs	r3, #33	; 0x21
 80098f0:	6003      	str	r3, [r0, #0]
 80098f2:	2200      	movs	r2, #0
 80098f4:	2300      	movs	r3, #0
 80098f6:	4610      	mov	r0, r2
 80098f8:	4619      	mov	r1, r3
 80098fa:	f7f6 ff4b 	bl	8000794 <__aeabi_ddiv>
 80098fe:	4604      	mov	r4, r0
 8009900:	460d      	mov	r5, r1
 8009902:	e7b6      	b.n	8009872 <pow+0x4a>
 8009904:	f7ff fd14 	bl	8009330 <__errno>
 8009908:	2322      	movs	r3, #34	; 0x22
 800990a:	6003      	str	r3, [r0, #0]
 800990c:	2200      	movs	r2, #0
 800990e:	2300      	movs	r3, #0
 8009910:	4640      	mov	r0, r8
 8009912:	4649      	mov	r1, r9
 8009914:	f7f7 f886 	bl	8000a24 <__aeabi_dcmplt>
 8009918:	2400      	movs	r4, #0
 800991a:	b158      	cbz	r0, 8009934 <pow+0x10c>
 800991c:	ec47 6b10 	vmov	d0, r6, r7
 8009920:	f001 feb6 	bl	800b690 <rint>
 8009924:	4632      	mov	r2, r6
 8009926:	ec51 0b10 	vmov	r0, r1, d0
 800992a:	463b      	mov	r3, r7
 800992c:	f7f7 f870 	bl	8000a10 <__aeabi_dcmpeq>
 8009930:	2800      	cmp	r0, #0
 8009932:	d0c2      	beq.n	80098ba <pow+0x92>
 8009934:	4d11      	ldr	r5, [pc, #68]	; (800997c <pow+0x154>)
 8009936:	e79c      	b.n	8009872 <pow+0x4a>
 8009938:	2200      	movs	r2, #0
 800993a:	2300      	movs	r3, #0
 800993c:	4620      	mov	r0, r4
 800993e:	4629      	mov	r1, r5
 8009940:	f7f7 f866 	bl	8000a10 <__aeabi_dcmpeq>
 8009944:	2800      	cmp	r0, #0
 8009946:	d094      	beq.n	8009872 <pow+0x4a>
 8009948:	ec49 8b10 	vmov	d0, r8, r9
 800994c:	f001 fe0a 	bl	800b564 <finite>
 8009950:	2800      	cmp	r0, #0
 8009952:	d08e      	beq.n	8009872 <pow+0x4a>
 8009954:	ec47 6b10 	vmov	d0, r6, r7
 8009958:	f001 fe04 	bl	800b564 <finite>
 800995c:	2800      	cmp	r0, #0
 800995e:	d088      	beq.n	8009872 <pow+0x4a>
 8009960:	f7ff fce6 	bl	8009330 <__errno>
 8009964:	2322      	movs	r3, #34	; 0x22
 8009966:	6003      	str	r3, [r0, #0]
 8009968:	2400      	movs	r4, #0
 800996a:	2500      	movs	r5, #0
 800996c:	e781      	b.n	8009872 <pow+0x4a>
 800996e:	4d04      	ldr	r5, [pc, #16]	; (8009980 <pow+0x158>)
 8009970:	2400      	movs	r4, #0
 8009972:	e77e      	b.n	8009872 <pow+0x4a>
 8009974:	20000070 	.word	0x20000070
 8009978:	fff00000 	.word	0xfff00000
 800997c:	7ff00000 	.word	0x7ff00000
 8009980:	3ff00000 	.word	0x3ff00000

08009984 <sqrt>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	ed2d 8b02 	vpush	{d8}
 800998a:	ec55 4b10 	vmov	r4, r5, d0
 800998e:	f001 f86d 	bl	800aa6c <__ieee754_sqrt>
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <sqrt+0x64>)
 8009994:	eeb0 8a40 	vmov.f32	s16, s0
 8009998:	eef0 8a60 	vmov.f32	s17, s1
 800999c:	f993 3000 	ldrsb.w	r3, [r3]
 80099a0:	3301      	adds	r3, #1
 80099a2:	d019      	beq.n	80099d8 <sqrt+0x54>
 80099a4:	4622      	mov	r2, r4
 80099a6:	462b      	mov	r3, r5
 80099a8:	4620      	mov	r0, r4
 80099aa:	4629      	mov	r1, r5
 80099ac:	f7f7 f862 	bl	8000a74 <__aeabi_dcmpun>
 80099b0:	b990      	cbnz	r0, 80099d8 <sqrt+0x54>
 80099b2:	2200      	movs	r2, #0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f7 f833 	bl	8000a24 <__aeabi_dcmplt>
 80099be:	b158      	cbz	r0, 80099d8 <sqrt+0x54>
 80099c0:	f7ff fcb6 	bl	8009330 <__errno>
 80099c4:	2321      	movs	r3, #33	; 0x21
 80099c6:	6003      	str	r3, [r0, #0]
 80099c8:	2200      	movs	r2, #0
 80099ca:	2300      	movs	r3, #0
 80099cc:	4610      	mov	r0, r2
 80099ce:	4619      	mov	r1, r3
 80099d0:	f7f6 fee0 	bl	8000794 <__aeabi_ddiv>
 80099d4:	ec41 0b18 	vmov	d8, r0, r1
 80099d8:	eeb0 0a48 	vmov.f32	s0, s16
 80099dc:	eef0 0a68 	vmov.f32	s1, s17
 80099e0:	ecbd 8b02 	vpop	{d8}
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
 80099e6:	bf00      	nop
 80099e8:	20000070 	.word	0x20000070

080099ec <__ieee754_fmod>:
 80099ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f0:	ec53 2b11 	vmov	r2, r3, d1
 80099f4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80099f8:	ea5e 0402 	orrs.w	r4, lr, r2
 80099fc:	ec51 0b10 	vmov	r0, r1, d0
 8009a00:	ee11 7a10 	vmov	r7, s2
 8009a04:	ee11 ca10 	vmov	ip, s2
 8009a08:	461e      	mov	r6, r3
 8009a0a:	d00d      	beq.n	8009a28 <__ieee754_fmod+0x3c>
 8009a0c:	4c7a      	ldr	r4, [pc, #488]	; (8009bf8 <__ieee754_fmod+0x20c>)
 8009a0e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009a12:	45a0      	cmp	r8, r4
 8009a14:	4689      	mov	r9, r1
 8009a16:	dc07      	bgt.n	8009a28 <__ieee754_fmod+0x3c>
 8009a18:	4254      	negs	r4, r2
 8009a1a:	4d78      	ldr	r5, [pc, #480]	; (8009bfc <__ieee754_fmod+0x210>)
 8009a1c:	4314      	orrs	r4, r2
 8009a1e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8009a22:	42ac      	cmp	r4, r5
 8009a24:	46ab      	mov	fp, r5
 8009a26:	d909      	bls.n	8009a3c <__ieee754_fmod+0x50>
 8009a28:	f7f6 fd8a 	bl	8000540 <__aeabi_dmul>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	f7f6 feb0 	bl	8000794 <__aeabi_ddiv>
 8009a34:	ec41 0b10 	vmov	d0, r0, r1
 8009a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	45f0      	cmp	r8, lr
 8009a3e:	ee10 aa10 	vmov	sl, s0
 8009a42:	ee10 4a10 	vmov	r4, s0
 8009a46:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009a4a:	dc0a      	bgt.n	8009a62 <__ieee754_fmod+0x76>
 8009a4c:	dbf2      	blt.n	8009a34 <__ieee754_fmod+0x48>
 8009a4e:	4290      	cmp	r0, r2
 8009a50:	d3f0      	bcc.n	8009a34 <__ieee754_fmod+0x48>
 8009a52:	d106      	bne.n	8009a62 <__ieee754_fmod+0x76>
 8009a54:	4a6a      	ldr	r2, [pc, #424]	; (8009c00 <__ieee754_fmod+0x214>)
 8009a56:	0fed      	lsrs	r5, r5, #31
 8009a58:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009a5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009a60:	e7e8      	b.n	8009a34 <__ieee754_fmod+0x48>
 8009a62:	ea19 0f0b 	tst.w	r9, fp
 8009a66:	d14a      	bne.n	8009afe <__ieee754_fmod+0x112>
 8009a68:	f1b8 0f00 	cmp.w	r8, #0
 8009a6c:	d13f      	bne.n	8009aee <__ieee754_fmod+0x102>
 8009a6e:	4965      	ldr	r1, [pc, #404]	; (8009c04 <__ieee754_fmod+0x218>)
 8009a70:	4653      	mov	r3, sl
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	dc38      	bgt.n	8009ae8 <__ieee754_fmod+0xfc>
 8009a76:	4b61      	ldr	r3, [pc, #388]	; (8009bfc <__ieee754_fmod+0x210>)
 8009a78:	4033      	ands	r3, r6
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d14f      	bne.n	8009b1e <__ieee754_fmod+0x132>
 8009a7e:	f1be 0f00 	cmp.w	lr, #0
 8009a82:	d144      	bne.n	8009b0e <__ieee754_fmod+0x122>
 8009a84:	4a5f      	ldr	r2, [pc, #380]	; (8009c04 <__ieee754_fmod+0x218>)
 8009a86:	463b      	mov	r3, r7
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	dc3d      	bgt.n	8009b08 <__ieee754_fmod+0x11c>
 8009a8c:	4b5e      	ldr	r3, [pc, #376]	; (8009c08 <__ieee754_fmod+0x21c>)
 8009a8e:	4299      	cmp	r1, r3
 8009a90:	db4a      	blt.n	8009b28 <__ieee754_fmod+0x13c>
 8009a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a9a:	485b      	ldr	r0, [pc, #364]	; (8009c08 <__ieee754_fmod+0x21c>)
 8009a9c:	4282      	cmp	r2, r0
 8009a9e:	db57      	blt.n	8009b50 <__ieee754_fmod+0x164>
 8009aa0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009aa4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009aa8:	1a89      	subs	r1, r1, r2
 8009aaa:	1b98      	subs	r0, r3, r6
 8009aac:	eba4 070c 	sub.w	r7, r4, ip
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d164      	bne.n	8009b7e <__ieee754_fmod+0x192>
 8009ab4:	4564      	cmp	r4, ip
 8009ab6:	bf38      	it	cc
 8009ab8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8009abc:	2800      	cmp	r0, #0
 8009abe:	bfa4      	itt	ge
 8009ac0:	463c      	movge	r4, r7
 8009ac2:	4603      	movge	r3, r0
 8009ac4:	ea53 0104 	orrs.w	r1, r3, r4
 8009ac8:	d0c4      	beq.n	8009a54 <__ieee754_fmod+0x68>
 8009aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ace:	db6b      	blt.n	8009ba8 <__ieee754_fmod+0x1bc>
 8009ad0:	494d      	ldr	r1, [pc, #308]	; (8009c08 <__ieee754_fmod+0x21c>)
 8009ad2:	428a      	cmp	r2, r1
 8009ad4:	db6e      	blt.n	8009bb4 <__ieee754_fmod+0x1c8>
 8009ad6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ada:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8009ade:	431d      	orrs	r5, r3
 8009ae0:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	e7a5      	b.n	8009a34 <__ieee754_fmod+0x48>
 8009ae8:	3901      	subs	r1, #1
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	e7c1      	b.n	8009a72 <__ieee754_fmod+0x86>
 8009aee:	4946      	ldr	r1, [pc, #280]	; (8009c08 <__ieee754_fmod+0x21c>)
 8009af0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	ddbe      	ble.n	8009a76 <__ieee754_fmod+0x8a>
 8009af8:	3901      	subs	r1, #1
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	e7fa      	b.n	8009af4 <__ieee754_fmod+0x108>
 8009afe:	ea4f 5128 	mov.w	r1, r8, asr #20
 8009b02:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009b06:	e7b6      	b.n	8009a76 <__ieee754_fmod+0x8a>
 8009b08:	3a01      	subs	r2, #1
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	e7bc      	b.n	8009a88 <__ieee754_fmod+0x9c>
 8009b0e:	4a3e      	ldr	r2, [pc, #248]	; (8009c08 <__ieee754_fmod+0x21c>)
 8009b10:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	ddb9      	ble.n	8009a8c <__ieee754_fmod+0xa0>
 8009b18:	3a01      	subs	r2, #1
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	e7fa      	b.n	8009b14 <__ieee754_fmod+0x128>
 8009b1e:	ea4f 522e 	mov.w	r2, lr, asr #20
 8009b22:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009b26:	e7b1      	b.n	8009a8c <__ieee754_fmod+0xa0>
 8009b28:	1a5c      	subs	r4, r3, r1
 8009b2a:	2c1f      	cmp	r4, #31
 8009b2c:	dc0a      	bgt.n	8009b44 <__ieee754_fmod+0x158>
 8009b2e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8009b32:	fa08 f804 	lsl.w	r8, r8, r4
 8009b36:	fa2a f303 	lsr.w	r3, sl, r3
 8009b3a:	ea43 0308 	orr.w	r3, r3, r8
 8009b3e:	fa0a f404 	lsl.w	r4, sl, r4
 8009b42:	e7aa      	b.n	8009a9a <__ieee754_fmod+0xae>
 8009b44:	4b31      	ldr	r3, [pc, #196]	; (8009c0c <__ieee754_fmod+0x220>)
 8009b46:	1a5b      	subs	r3, r3, r1
 8009b48:	fa0a f303 	lsl.w	r3, sl, r3
 8009b4c:	2400      	movs	r4, #0
 8009b4e:	e7a4      	b.n	8009a9a <__ieee754_fmod+0xae>
 8009b50:	eba0 0c02 	sub.w	ip, r0, r2
 8009b54:	f1bc 0f1f 	cmp.w	ip, #31
 8009b58:	dc0a      	bgt.n	8009b70 <__ieee754_fmod+0x184>
 8009b5a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8009b5e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009b62:	fa27 f606 	lsr.w	r6, r7, r6
 8009b66:	ea46 060e 	orr.w	r6, r6, lr
 8009b6a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8009b6e:	e79b      	b.n	8009aa8 <__ieee754_fmod+0xbc>
 8009b70:	4e26      	ldr	r6, [pc, #152]	; (8009c0c <__ieee754_fmod+0x220>)
 8009b72:	1ab6      	subs	r6, r6, r2
 8009b74:	fa07 f606 	lsl.w	r6, r7, r6
 8009b78:	f04f 0c00 	mov.w	ip, #0
 8009b7c:	e794      	b.n	8009aa8 <__ieee754_fmod+0xbc>
 8009b7e:	4564      	cmp	r4, ip
 8009b80:	bf38      	it	cc
 8009b82:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8009b86:	2800      	cmp	r0, #0
 8009b88:	da05      	bge.n	8009b96 <__ieee754_fmod+0x1aa>
 8009b8a:	0fe0      	lsrs	r0, r4, #31
 8009b8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009b90:	0064      	lsls	r4, r4, #1
 8009b92:	3901      	subs	r1, #1
 8009b94:	e789      	b.n	8009aaa <__ieee754_fmod+0xbe>
 8009b96:	ea50 0307 	orrs.w	r3, r0, r7
 8009b9a:	f43f af5b 	beq.w	8009a54 <__ieee754_fmod+0x68>
 8009b9e:	0ffb      	lsrs	r3, r7, #31
 8009ba0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009ba4:	007c      	lsls	r4, r7, #1
 8009ba6:	e7f4      	b.n	8009b92 <__ieee754_fmod+0x1a6>
 8009ba8:	0fe1      	lsrs	r1, r4, #31
 8009baa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009bae:	0064      	lsls	r4, r4, #1
 8009bb0:	3a01      	subs	r2, #1
 8009bb2:	e78a      	b.n	8009aca <__ieee754_fmod+0xde>
 8009bb4:	1a89      	subs	r1, r1, r2
 8009bb6:	2914      	cmp	r1, #20
 8009bb8:	dc0a      	bgt.n	8009bd0 <__ieee754_fmod+0x1e4>
 8009bba:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009bbe:	fa03 f202 	lsl.w	r2, r3, r2
 8009bc2:	40cc      	lsrs	r4, r1
 8009bc4:	4322      	orrs	r2, r4
 8009bc6:	410b      	asrs	r3, r1
 8009bc8:	ea43 0105 	orr.w	r1, r3, r5
 8009bcc:	4610      	mov	r0, r2
 8009bce:	e731      	b.n	8009a34 <__ieee754_fmod+0x48>
 8009bd0:	291f      	cmp	r1, #31
 8009bd2:	dc07      	bgt.n	8009be4 <__ieee754_fmod+0x1f8>
 8009bd4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009bd8:	40cc      	lsrs	r4, r1
 8009bda:	fa03 f202 	lsl.w	r2, r3, r2
 8009bde:	4322      	orrs	r2, r4
 8009be0:	462b      	mov	r3, r5
 8009be2:	e7f1      	b.n	8009bc8 <__ieee754_fmod+0x1dc>
 8009be4:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8009be8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009bec:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8009bf0:	32e2      	adds	r2, #226	; 0xe2
 8009bf2:	fa43 f202 	asr.w	r2, r3, r2
 8009bf6:	e7f3      	b.n	8009be0 <__ieee754_fmod+0x1f4>
 8009bf8:	7fefffff 	.word	0x7fefffff
 8009bfc:	7ff00000 	.word	0x7ff00000
 8009c00:	0800b998 	.word	0x0800b998
 8009c04:	fffffbed 	.word	0xfffffbed
 8009c08:	fffffc02 	.word	0xfffffc02
 8009c0c:	fffffbe2 	.word	0xfffffbe2

08009c10 <__ieee754_pow>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	ed2d 8b06 	vpush	{d8-d10}
 8009c18:	b08d      	sub	sp, #52	; 0x34
 8009c1a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009c1e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009c22:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009c26:	ea56 0100 	orrs.w	r1, r6, r0
 8009c2a:	ec53 2b10 	vmov	r2, r3, d0
 8009c2e:	f000 84d1 	beq.w	800a5d4 <__ieee754_pow+0x9c4>
 8009c32:	497f      	ldr	r1, [pc, #508]	; (8009e30 <__ieee754_pow+0x220>)
 8009c34:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009c38:	428c      	cmp	r4, r1
 8009c3a:	ee10 8a10 	vmov	r8, s0
 8009c3e:	4699      	mov	r9, r3
 8009c40:	dc09      	bgt.n	8009c56 <__ieee754_pow+0x46>
 8009c42:	d103      	bne.n	8009c4c <__ieee754_pow+0x3c>
 8009c44:	b97a      	cbnz	r2, 8009c66 <__ieee754_pow+0x56>
 8009c46:	42a6      	cmp	r6, r4
 8009c48:	dd02      	ble.n	8009c50 <__ieee754_pow+0x40>
 8009c4a:	e00c      	b.n	8009c66 <__ieee754_pow+0x56>
 8009c4c:	428e      	cmp	r6, r1
 8009c4e:	dc02      	bgt.n	8009c56 <__ieee754_pow+0x46>
 8009c50:	428e      	cmp	r6, r1
 8009c52:	d110      	bne.n	8009c76 <__ieee754_pow+0x66>
 8009c54:	b178      	cbz	r0, 8009c76 <__ieee754_pow+0x66>
 8009c56:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c5a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c5e:	ea54 0308 	orrs.w	r3, r4, r8
 8009c62:	f000 84b7 	beq.w	800a5d4 <__ieee754_pow+0x9c4>
 8009c66:	4873      	ldr	r0, [pc, #460]	; (8009e34 <__ieee754_pow+0x224>)
 8009c68:	b00d      	add	sp, #52	; 0x34
 8009c6a:	ecbd 8b06 	vpop	{d8-d10}
 8009c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c72:	f001 bd05 	b.w	800b680 <nan>
 8009c76:	f1b9 0f00 	cmp.w	r9, #0
 8009c7a:	da36      	bge.n	8009cea <__ieee754_pow+0xda>
 8009c7c:	496e      	ldr	r1, [pc, #440]	; (8009e38 <__ieee754_pow+0x228>)
 8009c7e:	428e      	cmp	r6, r1
 8009c80:	dc51      	bgt.n	8009d26 <__ieee754_pow+0x116>
 8009c82:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009c86:	428e      	cmp	r6, r1
 8009c88:	f340 84af 	ble.w	800a5ea <__ieee754_pow+0x9da>
 8009c8c:	1531      	asrs	r1, r6, #20
 8009c8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009c92:	2914      	cmp	r1, #20
 8009c94:	dd0f      	ble.n	8009cb6 <__ieee754_pow+0xa6>
 8009c96:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009c9a:	fa20 fc01 	lsr.w	ip, r0, r1
 8009c9e:	fa0c f101 	lsl.w	r1, ip, r1
 8009ca2:	4281      	cmp	r1, r0
 8009ca4:	f040 84a1 	bne.w	800a5ea <__ieee754_pow+0x9da>
 8009ca8:	f00c 0c01 	and.w	ip, ip, #1
 8009cac:	f1cc 0102 	rsb	r1, ip, #2
 8009cb0:	9100      	str	r1, [sp, #0]
 8009cb2:	b180      	cbz	r0, 8009cd6 <__ieee754_pow+0xc6>
 8009cb4:	e059      	b.n	8009d6a <__ieee754_pow+0x15a>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d155      	bne.n	8009d66 <__ieee754_pow+0x156>
 8009cba:	f1c1 0114 	rsb	r1, r1, #20
 8009cbe:	fa46 fc01 	asr.w	ip, r6, r1
 8009cc2:	fa0c f101 	lsl.w	r1, ip, r1
 8009cc6:	42b1      	cmp	r1, r6
 8009cc8:	f040 848c 	bne.w	800a5e4 <__ieee754_pow+0x9d4>
 8009ccc:	f00c 0c01 	and.w	ip, ip, #1
 8009cd0:	f1cc 0102 	rsb	r1, ip, #2
 8009cd4:	9100      	str	r1, [sp, #0]
 8009cd6:	4959      	ldr	r1, [pc, #356]	; (8009e3c <__ieee754_pow+0x22c>)
 8009cd8:	428e      	cmp	r6, r1
 8009cda:	d12d      	bne.n	8009d38 <__ieee754_pow+0x128>
 8009cdc:	2f00      	cmp	r7, #0
 8009cde:	da79      	bge.n	8009dd4 <__ieee754_pow+0x1c4>
 8009ce0:	4956      	ldr	r1, [pc, #344]	; (8009e3c <__ieee754_pow+0x22c>)
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f7f6 fd56 	bl	8000794 <__aeabi_ddiv>
 8009ce8:	e016      	b.n	8009d18 <__ieee754_pow+0x108>
 8009cea:	2100      	movs	r1, #0
 8009cec:	9100      	str	r1, [sp, #0]
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d13b      	bne.n	8009d6a <__ieee754_pow+0x15a>
 8009cf2:	494f      	ldr	r1, [pc, #316]	; (8009e30 <__ieee754_pow+0x220>)
 8009cf4:	428e      	cmp	r6, r1
 8009cf6:	d1ee      	bne.n	8009cd6 <__ieee754_pow+0xc6>
 8009cf8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009cfc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009d00:	ea53 0308 	orrs.w	r3, r3, r8
 8009d04:	f000 8466 	beq.w	800a5d4 <__ieee754_pow+0x9c4>
 8009d08:	4b4d      	ldr	r3, [pc, #308]	; (8009e40 <__ieee754_pow+0x230>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	dd0d      	ble.n	8009d2a <__ieee754_pow+0x11a>
 8009d0e:	2f00      	cmp	r7, #0
 8009d10:	f280 8464 	bge.w	800a5dc <__ieee754_pow+0x9cc>
 8009d14:	2000      	movs	r0, #0
 8009d16:	2100      	movs	r1, #0
 8009d18:	ec41 0b10 	vmov	d0, r0, r1
 8009d1c:	b00d      	add	sp, #52	; 0x34
 8009d1e:	ecbd 8b06 	vpop	{d8-d10}
 8009d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d26:	2102      	movs	r1, #2
 8009d28:	e7e0      	b.n	8009cec <__ieee754_pow+0xdc>
 8009d2a:	2f00      	cmp	r7, #0
 8009d2c:	daf2      	bge.n	8009d14 <__ieee754_pow+0x104>
 8009d2e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009d32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d36:	e7ef      	b.n	8009d18 <__ieee754_pow+0x108>
 8009d38:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009d3c:	d104      	bne.n	8009d48 <__ieee754_pow+0x138>
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	f7f6 fbfd 	bl	8000540 <__aeabi_dmul>
 8009d46:	e7e7      	b.n	8009d18 <__ieee754_pow+0x108>
 8009d48:	493e      	ldr	r1, [pc, #248]	; (8009e44 <__ieee754_pow+0x234>)
 8009d4a:	428f      	cmp	r7, r1
 8009d4c:	d10d      	bne.n	8009d6a <__ieee754_pow+0x15a>
 8009d4e:	f1b9 0f00 	cmp.w	r9, #0
 8009d52:	db0a      	blt.n	8009d6a <__ieee754_pow+0x15a>
 8009d54:	ec43 2b10 	vmov	d0, r2, r3
 8009d58:	b00d      	add	sp, #52	; 0x34
 8009d5a:	ecbd 8b06 	vpop	{d8-d10}
 8009d5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d62:	f000 be83 	b.w	800aa6c <__ieee754_sqrt>
 8009d66:	2100      	movs	r1, #0
 8009d68:	9100      	str	r1, [sp, #0]
 8009d6a:	ec43 2b10 	vmov	d0, r2, r3
 8009d6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d72:	f7ff fcbd 	bl	80096f0 <fabs>
 8009d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d7a:	ec51 0b10 	vmov	r0, r1, d0
 8009d7e:	f1b8 0f00 	cmp.w	r8, #0
 8009d82:	d12a      	bne.n	8009dda <__ieee754_pow+0x1ca>
 8009d84:	b12c      	cbz	r4, 8009d92 <__ieee754_pow+0x182>
 8009d86:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8009e3c <__ieee754_pow+0x22c>
 8009d8a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009d8e:	45e6      	cmp	lr, ip
 8009d90:	d123      	bne.n	8009dda <__ieee754_pow+0x1ca>
 8009d92:	2f00      	cmp	r7, #0
 8009d94:	da05      	bge.n	8009da2 <__ieee754_pow+0x192>
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	4927      	ldr	r1, [pc, #156]	; (8009e3c <__ieee754_pow+0x22c>)
 8009d9e:	f7f6 fcf9 	bl	8000794 <__aeabi_ddiv>
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	dab7      	bge.n	8009d18 <__ieee754_pow+0x108>
 8009da8:	9b00      	ldr	r3, [sp, #0]
 8009daa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009dae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009db2:	4323      	orrs	r3, r4
 8009db4:	d108      	bne.n	8009dc8 <__ieee754_pow+0x1b8>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f7f6 fa07 	bl	80001d0 <__aeabi_dsub>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	e78d      	b.n	8009ce4 <__ieee754_pow+0xd4>
 8009dc8:	9b00      	ldr	r3, [sp, #0]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d1a4      	bne.n	8009d18 <__ieee754_pow+0x108>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	e79e      	b.n	8009d18 <__ieee754_pow+0x108>
 8009dda:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009dde:	f10c 35ff 	add.w	r5, ip, #4294967295
 8009de2:	950a      	str	r5, [sp, #40]	; 0x28
 8009de4:	9d00      	ldr	r5, [sp, #0]
 8009de6:	46ac      	mov	ip, r5
 8009de8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009dea:	ea5c 0505 	orrs.w	r5, ip, r5
 8009dee:	d0e4      	beq.n	8009dba <__ieee754_pow+0x1aa>
 8009df0:	4b15      	ldr	r3, [pc, #84]	; (8009e48 <__ieee754_pow+0x238>)
 8009df2:	429e      	cmp	r6, r3
 8009df4:	f340 80fc 	ble.w	8009ff0 <__ieee754_pow+0x3e0>
 8009df8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009dfc:	429e      	cmp	r6, r3
 8009dfe:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <__ieee754_pow+0x230>)
 8009e00:	dd07      	ble.n	8009e12 <__ieee754_pow+0x202>
 8009e02:	429c      	cmp	r4, r3
 8009e04:	dc0a      	bgt.n	8009e1c <__ieee754_pow+0x20c>
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	da84      	bge.n	8009d14 <__ieee754_pow+0x104>
 8009e0a:	a307      	add	r3, pc, #28	; (adr r3, 8009e28 <__ieee754_pow+0x218>)
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	e795      	b.n	8009d3e <__ieee754_pow+0x12e>
 8009e12:	429c      	cmp	r4, r3
 8009e14:	dbf7      	blt.n	8009e06 <__ieee754_pow+0x1f6>
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <__ieee754_pow+0x22c>)
 8009e18:	429c      	cmp	r4, r3
 8009e1a:	dd17      	ble.n	8009e4c <__ieee754_pow+0x23c>
 8009e1c:	2f00      	cmp	r7, #0
 8009e1e:	dcf4      	bgt.n	8009e0a <__ieee754_pow+0x1fa>
 8009e20:	e778      	b.n	8009d14 <__ieee754_pow+0x104>
 8009e22:	bf00      	nop
 8009e24:	f3af 8000 	nop.w
 8009e28:	8800759c 	.word	0x8800759c
 8009e2c:	7e37e43c 	.word	0x7e37e43c
 8009e30:	7ff00000 	.word	0x7ff00000
 8009e34:	0800b9a8 	.word	0x0800b9a8
 8009e38:	433fffff 	.word	0x433fffff
 8009e3c:	3ff00000 	.word	0x3ff00000
 8009e40:	3fefffff 	.word	0x3fefffff
 8009e44:	3fe00000 	.word	0x3fe00000
 8009e48:	41e00000 	.word	0x41e00000
 8009e4c:	4b64      	ldr	r3, [pc, #400]	; (8009fe0 <__ieee754_pow+0x3d0>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f7f6 f9be 	bl	80001d0 <__aeabi_dsub>
 8009e54:	a356      	add	r3, pc, #344	; (adr r3, 8009fb0 <__ieee754_pow+0x3a0>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	f7f6 fb6f 	bl	8000540 <__aeabi_dmul>
 8009e62:	a355      	add	r3, pc, #340	; (adr r3, 8009fb8 <__ieee754_pow+0x3a8>)
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	4606      	mov	r6, r0
 8009e6a:	460f      	mov	r7, r1
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	f7f6 fb66 	bl	8000540 <__aeabi_dmul>
 8009e74:	4b5b      	ldr	r3, [pc, #364]	; (8009fe4 <__ieee754_pow+0x3d4>)
 8009e76:	4682      	mov	sl, r0
 8009e78:	468b      	mov	fp, r1
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 fb5e 	bl	8000540 <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	a14d      	add	r1, pc, #308	; (adr r1, 8009fc0 <__ieee754_pow+0x3b0>)
 8009e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8e:	f7f6 f99f 	bl	80001d0 <__aeabi_dsub>
 8009e92:	4622      	mov	r2, r4
 8009e94:	462b      	mov	r3, r5
 8009e96:	f7f6 fb53 	bl	8000540 <__aeabi_dmul>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	4951      	ldr	r1, [pc, #324]	; (8009fe8 <__ieee754_pow+0x3d8>)
 8009ea2:	f7f6 f995 	bl	80001d0 <__aeabi_dsub>
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	4689      	mov	r9, r1
 8009eac:	462b      	mov	r3, r5
 8009eae:	4620      	mov	r0, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7f6 fb45 	bl	8000540 <__aeabi_dmul>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4640      	mov	r0, r8
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	f7f6 fb3f 	bl	8000540 <__aeabi_dmul>
 8009ec2:	a341      	add	r3, pc, #260	; (adr r3, 8009fc8 <__ieee754_pow+0x3b8>)
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 fb3a 	bl	8000540 <__aeabi_dmul>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4650      	mov	r0, sl
 8009ed2:	4659      	mov	r1, fp
 8009ed4:	f7f6 f97c 	bl	80001d0 <__aeabi_dsub>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4680      	mov	r8, r0
 8009ede:	4689      	mov	r9, r1
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	f7f6 f976 	bl	80001d4 <__adddf3>
 8009ee8:	2400      	movs	r4, #0
 8009eea:	4632      	mov	r2, r6
 8009eec:	463b      	mov	r3, r7
 8009eee:	4620      	mov	r0, r4
 8009ef0:	460d      	mov	r5, r1
 8009ef2:	f7f6 f96d 	bl	80001d0 <__aeabi_dsub>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7f6 f967 	bl	80001d0 <__aeabi_dsub>
 8009f02:	9b00      	ldr	r3, [sp, #0]
 8009f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f06:	3b01      	subs	r3, #1
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	4682      	mov	sl, r0
 8009f0c:	468b      	mov	fp, r1
 8009f0e:	f040 81f1 	bne.w	800a2f4 <__ieee754_pow+0x6e4>
 8009f12:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009fd0 <__ieee754_pow+0x3c0>
 8009f16:	eeb0 8a47 	vmov.f32	s16, s14
 8009f1a:	eef0 8a67 	vmov.f32	s17, s15
 8009f1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f22:	2600      	movs	r6, #0
 8009f24:	4632      	mov	r2, r6
 8009f26:	463b      	mov	r3, r7
 8009f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f2c:	f7f6 f950 	bl	80001d0 <__aeabi_dsub>
 8009f30:	4622      	mov	r2, r4
 8009f32:	462b      	mov	r3, r5
 8009f34:	f7f6 fb04 	bl	8000540 <__aeabi_dmul>
 8009f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	4689      	mov	r9, r1
 8009f40:	4650      	mov	r0, sl
 8009f42:	4659      	mov	r1, fp
 8009f44:	f7f6 fafc 	bl	8000540 <__aeabi_dmul>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7f6 f940 	bl	80001d4 <__adddf3>
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	4680      	mov	r8, r0
 8009f5a:	4689      	mov	r9, r1
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f7f6 faee 	bl	8000540 <__aeabi_dmul>
 8009f64:	460b      	mov	r3, r1
 8009f66:	4604      	mov	r4, r0
 8009f68:	460d      	mov	r5, r1
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	4649      	mov	r1, r9
 8009f6e:	4640      	mov	r0, r8
 8009f70:	f7f6 f930 	bl	80001d4 <__adddf3>
 8009f74:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <__ieee754_pow+0x3dc>)
 8009f76:	4299      	cmp	r1, r3
 8009f78:	ec45 4b19 	vmov	d9, r4, r5
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	468b      	mov	fp, r1
 8009f82:	f340 82fe 	ble.w	800a582 <__ieee754_pow+0x972>
 8009f86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009f8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009f8e:	4303      	orrs	r3, r0
 8009f90:	f000 81f0 	beq.w	800a374 <__ieee754_pow+0x764>
 8009f94:	a310      	add	r3, pc, #64	; (adr r3, 8009fd8 <__ieee754_pow+0x3c8>)
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	ec51 0b18 	vmov	r0, r1, d8
 8009f9e:	f7f6 facf 	bl	8000540 <__aeabi_dmul>
 8009fa2:	a30d      	add	r3, pc, #52	; (adr r3, 8009fd8 <__ieee754_pow+0x3c8>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	e6cb      	b.n	8009d42 <__ieee754_pow+0x132>
 8009faa:	bf00      	nop
 8009fac:	f3af 8000 	nop.w
 8009fb0:	60000000 	.word	0x60000000
 8009fb4:	3ff71547 	.word	0x3ff71547
 8009fb8:	f85ddf44 	.word	0xf85ddf44
 8009fbc:	3e54ae0b 	.word	0x3e54ae0b
 8009fc0:	55555555 	.word	0x55555555
 8009fc4:	3fd55555 	.word	0x3fd55555
 8009fc8:	652b82fe 	.word	0x652b82fe
 8009fcc:	3ff71547 	.word	0x3ff71547
 8009fd0:	00000000 	.word	0x00000000
 8009fd4:	bff00000 	.word	0xbff00000
 8009fd8:	8800759c 	.word	0x8800759c
 8009fdc:	7e37e43c 	.word	0x7e37e43c
 8009fe0:	3ff00000 	.word	0x3ff00000
 8009fe4:	3fd00000 	.word	0x3fd00000
 8009fe8:	3fe00000 	.word	0x3fe00000
 8009fec:	408fffff 	.word	0x408fffff
 8009ff0:	4bd7      	ldr	r3, [pc, #860]	; (800a350 <__ieee754_pow+0x740>)
 8009ff2:	ea03 0309 	and.w	r3, r3, r9
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	b92b      	cbnz	r3, 800a006 <__ieee754_pow+0x3f6>
 8009ffa:	4bd6      	ldr	r3, [pc, #856]	; (800a354 <__ieee754_pow+0x744>)
 8009ffc:	f7f6 faa0 	bl	8000540 <__aeabi_dmul>
 800a000:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a004:	460c      	mov	r4, r1
 800a006:	1523      	asrs	r3, r4, #20
 800a008:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a00c:	4413      	add	r3, r2
 800a00e:	9309      	str	r3, [sp, #36]	; 0x24
 800a010:	4bd1      	ldr	r3, [pc, #836]	; (800a358 <__ieee754_pow+0x748>)
 800a012:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a016:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a01a:	429c      	cmp	r4, r3
 800a01c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a020:	dd08      	ble.n	800a034 <__ieee754_pow+0x424>
 800a022:	4bce      	ldr	r3, [pc, #824]	; (800a35c <__ieee754_pow+0x74c>)
 800a024:	429c      	cmp	r4, r3
 800a026:	f340 8163 	ble.w	800a2f0 <__ieee754_pow+0x6e0>
 800a02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02c:	3301      	adds	r3, #1
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a034:	2400      	movs	r4, #0
 800a036:	00e3      	lsls	r3, r4, #3
 800a038:	930b      	str	r3, [sp, #44]	; 0x2c
 800a03a:	4bc9      	ldr	r3, [pc, #804]	; (800a360 <__ieee754_pow+0x750>)
 800a03c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a040:	ed93 7b00 	vldr	d7, [r3]
 800a044:	4629      	mov	r1, r5
 800a046:	ec53 2b17 	vmov	r2, r3, d7
 800a04a:	eeb0 8a47 	vmov.f32	s16, s14
 800a04e:	eef0 8a67 	vmov.f32	s17, s15
 800a052:	4682      	mov	sl, r0
 800a054:	f7f6 f8bc 	bl	80001d0 <__aeabi_dsub>
 800a058:	4652      	mov	r2, sl
 800a05a:	4606      	mov	r6, r0
 800a05c:	460f      	mov	r7, r1
 800a05e:	462b      	mov	r3, r5
 800a060:	ec51 0b18 	vmov	r0, r1, d8
 800a064:	f7f6 f8b6 	bl	80001d4 <__adddf3>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	2000      	movs	r0, #0
 800a06e:	49bd      	ldr	r1, [pc, #756]	; (800a364 <__ieee754_pow+0x754>)
 800a070:	f7f6 fb90 	bl	8000794 <__aeabi_ddiv>
 800a074:	ec41 0b19 	vmov	d9, r0, r1
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4630      	mov	r0, r6
 800a07e:	4639      	mov	r1, r7
 800a080:	f7f6 fa5e 	bl	8000540 <__aeabi_dmul>
 800a084:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a088:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a08c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a090:	2300      	movs	r3, #0
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a098:	46ab      	mov	fp, r5
 800a09a:	106d      	asrs	r5, r5, #1
 800a09c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a0a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a0a4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	4614      	mov	r4, r2
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	f7f6 fa45 	bl	8000540 <__aeabi_dmul>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 f887 	bl	80001d0 <__aeabi_dsub>
 800a0c2:	ec53 2b18 	vmov	r2, r3, d8
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460f      	mov	r7, r1
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	f7f6 f87f 	bl	80001d0 <__aeabi_dsub>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4650      	mov	r0, sl
 800a0d8:	4659      	mov	r1, fp
 800a0da:	f7f6 f879 	bl	80001d0 <__aeabi_dsub>
 800a0de:	4642      	mov	r2, r8
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	f7f6 fa2d 	bl	8000540 <__aeabi_dmul>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	f7f6 f86f 	bl	80001d0 <__aeabi_dsub>
 800a0f2:	ec53 2b19 	vmov	r2, r3, d9
 800a0f6:	f7f6 fa23 	bl	8000540 <__aeabi_dmul>
 800a0fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0fe:	ec41 0b18 	vmov	d8, r0, r1
 800a102:	4610      	mov	r0, r2
 800a104:	4619      	mov	r1, r3
 800a106:	f7f6 fa1b 	bl	8000540 <__aeabi_dmul>
 800a10a:	a37d      	add	r3, pc, #500	; (adr r3, 800a300 <__ieee754_pow+0x6f0>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	4604      	mov	r4, r0
 800a112:	460d      	mov	r5, r1
 800a114:	f7f6 fa14 	bl	8000540 <__aeabi_dmul>
 800a118:	a37b      	add	r3, pc, #492	; (adr r3, 800a308 <__ieee754_pow+0x6f8>)
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	f7f6 f859 	bl	80001d4 <__adddf3>
 800a122:	4622      	mov	r2, r4
 800a124:	462b      	mov	r3, r5
 800a126:	f7f6 fa0b 	bl	8000540 <__aeabi_dmul>
 800a12a:	a379      	add	r3, pc, #484	; (adr r3, 800a310 <__ieee754_pow+0x700>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f7f6 f850 	bl	80001d4 <__adddf3>
 800a134:	4622      	mov	r2, r4
 800a136:	462b      	mov	r3, r5
 800a138:	f7f6 fa02 	bl	8000540 <__aeabi_dmul>
 800a13c:	a376      	add	r3, pc, #472	; (adr r3, 800a318 <__ieee754_pow+0x708>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 f847 	bl	80001d4 <__adddf3>
 800a146:	4622      	mov	r2, r4
 800a148:	462b      	mov	r3, r5
 800a14a:	f7f6 f9f9 	bl	8000540 <__aeabi_dmul>
 800a14e:	a374      	add	r3, pc, #464	; (adr r3, 800a320 <__ieee754_pow+0x710>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 f83e 	bl	80001d4 <__adddf3>
 800a158:	4622      	mov	r2, r4
 800a15a:	462b      	mov	r3, r5
 800a15c:	f7f6 f9f0 	bl	8000540 <__aeabi_dmul>
 800a160:	a371      	add	r3, pc, #452	; (adr r3, 800a328 <__ieee754_pow+0x718>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 f835 	bl	80001d4 <__adddf3>
 800a16a:	4622      	mov	r2, r4
 800a16c:	4606      	mov	r6, r0
 800a16e:	460f      	mov	r7, r1
 800a170:	462b      	mov	r3, r5
 800a172:	4620      	mov	r0, r4
 800a174:	4629      	mov	r1, r5
 800a176:	f7f6 f9e3 	bl	8000540 <__aeabi_dmul>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4630      	mov	r0, r6
 800a180:	4639      	mov	r1, r7
 800a182:	f7f6 f9dd 	bl	8000540 <__aeabi_dmul>
 800a186:	4642      	mov	r2, r8
 800a188:	4604      	mov	r4, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	464b      	mov	r3, r9
 800a18e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a192:	f7f6 f81f 	bl	80001d4 <__adddf3>
 800a196:	ec53 2b18 	vmov	r2, r3, d8
 800a19a:	f7f6 f9d1 	bl	8000540 <__aeabi_dmul>
 800a19e:	4622      	mov	r2, r4
 800a1a0:	462b      	mov	r3, r5
 800a1a2:	f7f6 f817 	bl	80001d4 <__adddf3>
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	468b      	mov	fp, r1
 800a1ac:	464b      	mov	r3, r9
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	f7f6 f9c5 	bl	8000540 <__aeabi_dmul>
 800a1b6:	4b6c      	ldr	r3, [pc, #432]	; (800a368 <__ieee754_pow+0x758>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	f7f6 f809 	bl	80001d4 <__adddf3>
 800a1c2:	4652      	mov	r2, sl
 800a1c4:	465b      	mov	r3, fp
 800a1c6:	f7f6 f805 	bl	80001d4 <__adddf3>
 800a1ca:	9c04      	ldr	r4, [sp, #16]
 800a1cc:	460d      	mov	r5, r1
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	f7f6 f9b3 	bl	8000540 <__aeabi_dmul>
 800a1da:	4b63      	ldr	r3, [pc, #396]	; (800a368 <__ieee754_pow+0x758>)
 800a1dc:	4680      	mov	r8, r0
 800a1de:	4689      	mov	r9, r1
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7f5 fff3 	bl	80001d0 <__aeabi_dsub>
 800a1ea:	4632      	mov	r2, r6
 800a1ec:	463b      	mov	r3, r7
 800a1ee:	f7f5 ffef 	bl	80001d0 <__aeabi_dsub>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4650      	mov	r0, sl
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	f7f5 ffe9 	bl	80001d0 <__aeabi_dsub>
 800a1fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a202:	f7f6 f99d 	bl	8000540 <__aeabi_dmul>
 800a206:	4622      	mov	r2, r4
 800a208:	4606      	mov	r6, r0
 800a20a:	460f      	mov	r7, r1
 800a20c:	462b      	mov	r3, r5
 800a20e:	ec51 0b18 	vmov	r0, r1, d8
 800a212:	f7f6 f995 	bl	8000540 <__aeabi_dmul>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	f7f5 ffd9 	bl	80001d4 <__adddf3>
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4640      	mov	r0, r8
 800a22c:	4649      	mov	r1, r9
 800a22e:	f7f5 ffd1 	bl	80001d4 <__adddf3>
 800a232:	9c04      	ldr	r4, [sp, #16]
 800a234:	a33e      	add	r3, pc, #248	; (adr r3, 800a330 <__ieee754_pow+0x720>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	4620      	mov	r0, r4
 800a23c:	460d      	mov	r5, r1
 800a23e:	f7f6 f97f 	bl	8000540 <__aeabi_dmul>
 800a242:	4642      	mov	r2, r8
 800a244:	ec41 0b18 	vmov	d8, r0, r1
 800a248:	464b      	mov	r3, r9
 800a24a:	4620      	mov	r0, r4
 800a24c:	4629      	mov	r1, r5
 800a24e:	f7f5 ffbf 	bl	80001d0 <__aeabi_dsub>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4630      	mov	r0, r6
 800a258:	4639      	mov	r1, r7
 800a25a:	f7f5 ffb9 	bl	80001d0 <__aeabi_dsub>
 800a25e:	a336      	add	r3, pc, #216	; (adr r3, 800a338 <__ieee754_pow+0x728>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	f7f6 f96c 	bl	8000540 <__aeabi_dmul>
 800a268:	a335      	add	r3, pc, #212	; (adr r3, 800a340 <__ieee754_pow+0x730>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	4620      	mov	r0, r4
 800a274:	4629      	mov	r1, r5
 800a276:	f7f6 f963 	bl	8000540 <__aeabi_dmul>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4630      	mov	r0, r6
 800a280:	4639      	mov	r1, r7
 800a282:	f7f5 ffa7 	bl	80001d4 <__adddf3>
 800a286:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a288:	4b38      	ldr	r3, [pc, #224]	; (800a36c <__ieee754_pow+0x75c>)
 800a28a:	4413      	add	r3, r2
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f7f5 ffa0 	bl	80001d4 <__adddf3>
 800a294:	4682      	mov	sl, r0
 800a296:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a298:	468b      	mov	fp, r1
 800a29a:	f7f6 f8e7 	bl	800046c <__aeabi_i2d>
 800a29e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2a0:	4b33      	ldr	r3, [pc, #204]	; (800a370 <__ieee754_pow+0x760>)
 800a2a2:	4413      	add	r3, r2
 800a2a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	4652      	mov	r2, sl
 800a2ae:	465b      	mov	r3, fp
 800a2b0:	ec51 0b18 	vmov	r0, r1, d8
 800a2b4:	f7f5 ff8e 	bl	80001d4 <__adddf3>
 800a2b8:	4642      	mov	r2, r8
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	f7f5 ff8a 	bl	80001d4 <__adddf3>
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	463b      	mov	r3, r7
 800a2c4:	f7f5 ff86 	bl	80001d4 <__adddf3>
 800a2c8:	9c04      	ldr	r4, [sp, #16]
 800a2ca:	4632      	mov	r2, r6
 800a2cc:	463b      	mov	r3, r7
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	460d      	mov	r5, r1
 800a2d2:	f7f5 ff7d 	bl	80001d0 <__aeabi_dsub>
 800a2d6:	4642      	mov	r2, r8
 800a2d8:	464b      	mov	r3, r9
 800a2da:	f7f5 ff79 	bl	80001d0 <__aeabi_dsub>
 800a2de:	ec53 2b18 	vmov	r2, r3, d8
 800a2e2:	f7f5 ff75 	bl	80001d0 <__aeabi_dsub>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4650      	mov	r0, sl
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	e606      	b.n	8009efe <__ieee754_pow+0x2ee>
 800a2f0:	2401      	movs	r4, #1
 800a2f2:	e6a0      	b.n	800a036 <__ieee754_pow+0x426>
 800a2f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a348 <__ieee754_pow+0x738>
 800a2f8:	e60d      	b.n	8009f16 <__ieee754_pow+0x306>
 800a2fa:	bf00      	nop
 800a2fc:	f3af 8000 	nop.w
 800a300:	4a454eef 	.word	0x4a454eef
 800a304:	3fca7e28 	.word	0x3fca7e28
 800a308:	93c9db65 	.word	0x93c9db65
 800a30c:	3fcd864a 	.word	0x3fcd864a
 800a310:	a91d4101 	.word	0xa91d4101
 800a314:	3fd17460 	.word	0x3fd17460
 800a318:	518f264d 	.word	0x518f264d
 800a31c:	3fd55555 	.word	0x3fd55555
 800a320:	db6fabff 	.word	0xdb6fabff
 800a324:	3fdb6db6 	.word	0x3fdb6db6
 800a328:	33333303 	.word	0x33333303
 800a32c:	3fe33333 	.word	0x3fe33333
 800a330:	e0000000 	.word	0xe0000000
 800a334:	3feec709 	.word	0x3feec709
 800a338:	dc3a03fd 	.word	0xdc3a03fd
 800a33c:	3feec709 	.word	0x3feec709
 800a340:	145b01f5 	.word	0x145b01f5
 800a344:	be3e2fe0 	.word	0xbe3e2fe0
 800a348:	00000000 	.word	0x00000000
 800a34c:	3ff00000 	.word	0x3ff00000
 800a350:	7ff00000 	.word	0x7ff00000
 800a354:	43400000 	.word	0x43400000
 800a358:	0003988e 	.word	0x0003988e
 800a35c:	000bb679 	.word	0x000bb679
 800a360:	0800b9b0 	.word	0x0800b9b0
 800a364:	3ff00000 	.word	0x3ff00000
 800a368:	40080000 	.word	0x40080000
 800a36c:	0800b9d0 	.word	0x0800b9d0
 800a370:	0800b9c0 	.word	0x0800b9c0
 800a374:	a3b5      	add	r3, pc, #724	; (adr r3, 800a64c <__ieee754_pow+0xa3c>)
 800a376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37a:	4640      	mov	r0, r8
 800a37c:	4649      	mov	r1, r9
 800a37e:	f7f5 ff29 	bl	80001d4 <__adddf3>
 800a382:	4622      	mov	r2, r4
 800a384:	ec41 0b1a 	vmov	d10, r0, r1
 800a388:	462b      	mov	r3, r5
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f5 ff1f 	bl	80001d0 <__aeabi_dsub>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	ec51 0b1a 	vmov	r0, r1, d10
 800a39a:	f7f6 fb61 	bl	8000a60 <__aeabi_dcmpgt>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	f47f adf8 	bne.w	8009f94 <__ieee754_pow+0x384>
 800a3a4:	4aa4      	ldr	r2, [pc, #656]	; (800a638 <__ieee754_pow+0xa28>)
 800a3a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	f340 810b 	ble.w	800a5c6 <__ieee754_pow+0x9b6>
 800a3b0:	151b      	asrs	r3, r3, #20
 800a3b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a3b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a3ba:	fa4a f303 	asr.w	r3, sl, r3
 800a3be:	445b      	add	r3, fp
 800a3c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a3c4:	4e9d      	ldr	r6, [pc, #628]	; (800a63c <__ieee754_pow+0xa2c>)
 800a3c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3ca:	4116      	asrs	r6, r2
 800a3cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	ea23 0106 	bic.w	r1, r3, r6
 800a3d6:	f1c2 0214 	rsb	r2, r2, #20
 800a3da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a3de:	fa4a fa02 	asr.w	sl, sl, r2
 800a3e2:	f1bb 0f00 	cmp.w	fp, #0
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	bfb8      	it	lt
 800a3f0:	f1ca 0a00 	rsblt	sl, sl, #0
 800a3f4:	f7f5 feec 	bl	80001d0 <__aeabi_dsub>
 800a3f8:	ec41 0b19 	vmov	d9, r0, r1
 800a3fc:	4642      	mov	r2, r8
 800a3fe:	464b      	mov	r3, r9
 800a400:	ec51 0b19 	vmov	r0, r1, d9
 800a404:	f7f5 fee6 	bl	80001d4 <__adddf3>
 800a408:	2400      	movs	r4, #0
 800a40a:	a379      	add	r3, pc, #484	; (adr r3, 800a5f0 <__ieee754_pow+0x9e0>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	4620      	mov	r0, r4
 800a412:	460d      	mov	r5, r1
 800a414:	f7f6 f894 	bl	8000540 <__aeabi_dmul>
 800a418:	ec53 2b19 	vmov	r2, r3, d9
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	4620      	mov	r0, r4
 800a422:	4629      	mov	r1, r5
 800a424:	f7f5 fed4 	bl	80001d0 <__aeabi_dsub>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	f7f5 fece 	bl	80001d0 <__aeabi_dsub>
 800a434:	a370      	add	r3, pc, #448	; (adr r3, 800a5f8 <__ieee754_pow+0x9e8>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f7f6 f881 	bl	8000540 <__aeabi_dmul>
 800a43e:	a370      	add	r3, pc, #448	; (adr r3, 800a600 <__ieee754_pow+0x9f0>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	4680      	mov	r8, r0
 800a446:	4689      	mov	r9, r1
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7f6 f878 	bl	8000540 <__aeabi_dmul>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4640      	mov	r0, r8
 800a456:	4649      	mov	r1, r9
 800a458:	f7f5 febc 	bl	80001d4 <__adddf3>
 800a45c:	4604      	mov	r4, r0
 800a45e:	460d      	mov	r5, r1
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4630      	mov	r0, r6
 800a466:	4639      	mov	r1, r7
 800a468:	f7f5 feb4 	bl	80001d4 <__adddf3>
 800a46c:	4632      	mov	r2, r6
 800a46e:	463b      	mov	r3, r7
 800a470:	4680      	mov	r8, r0
 800a472:	4689      	mov	r9, r1
 800a474:	f7f5 feac 	bl	80001d0 <__aeabi_dsub>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4620      	mov	r0, r4
 800a47e:	4629      	mov	r1, r5
 800a480:	f7f5 fea6 	bl	80001d0 <__aeabi_dsub>
 800a484:	4642      	mov	r2, r8
 800a486:	4606      	mov	r6, r0
 800a488:	460f      	mov	r7, r1
 800a48a:	464b      	mov	r3, r9
 800a48c:	4640      	mov	r0, r8
 800a48e:	4649      	mov	r1, r9
 800a490:	f7f6 f856 	bl	8000540 <__aeabi_dmul>
 800a494:	a35c      	add	r3, pc, #368	; (adr r3, 800a608 <__ieee754_pow+0x9f8>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	4604      	mov	r4, r0
 800a49c:	460d      	mov	r5, r1
 800a49e:	f7f6 f84f 	bl	8000540 <__aeabi_dmul>
 800a4a2:	a35b      	add	r3, pc, #364	; (adr r3, 800a610 <__ieee754_pow+0xa00>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f5 fe92 	bl	80001d0 <__aeabi_dsub>
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	462b      	mov	r3, r5
 800a4b0:	f7f6 f846 	bl	8000540 <__aeabi_dmul>
 800a4b4:	a358      	add	r3, pc, #352	; (adr r3, 800a618 <__ieee754_pow+0xa08>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f5 fe8b 	bl	80001d4 <__adddf3>
 800a4be:	4622      	mov	r2, r4
 800a4c0:	462b      	mov	r3, r5
 800a4c2:	f7f6 f83d 	bl	8000540 <__aeabi_dmul>
 800a4c6:	a356      	add	r3, pc, #344	; (adr r3, 800a620 <__ieee754_pow+0xa10>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f7f5 fe80 	bl	80001d0 <__aeabi_dsub>
 800a4d0:	4622      	mov	r2, r4
 800a4d2:	462b      	mov	r3, r5
 800a4d4:	f7f6 f834 	bl	8000540 <__aeabi_dmul>
 800a4d8:	a353      	add	r3, pc, #332	; (adr r3, 800a628 <__ieee754_pow+0xa18>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f7f5 fe79 	bl	80001d4 <__adddf3>
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	f7f6 f82b 	bl	8000540 <__aeabi_dmul>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	f7f5 fe6d 	bl	80001d0 <__aeabi_dsub>
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	460d      	mov	r5, r1
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	4640      	mov	r0, r8
 800a500:	4649      	mov	r1, r9
 800a502:	f7f6 f81d 	bl	8000540 <__aeabi_dmul>
 800a506:	2200      	movs	r2, #0
 800a508:	ec41 0b19 	vmov	d9, r0, r1
 800a50c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a510:	4620      	mov	r0, r4
 800a512:	4629      	mov	r1, r5
 800a514:	f7f5 fe5c 	bl	80001d0 <__aeabi_dsub>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	ec51 0b19 	vmov	r0, r1, d9
 800a520:	f7f6 f938 	bl	8000794 <__aeabi_ddiv>
 800a524:	4632      	mov	r2, r6
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	463b      	mov	r3, r7
 800a52c:	4640      	mov	r0, r8
 800a52e:	4649      	mov	r1, r9
 800a530:	f7f6 f806 	bl	8000540 <__aeabi_dmul>
 800a534:	4632      	mov	r2, r6
 800a536:	463b      	mov	r3, r7
 800a538:	f7f5 fe4c 	bl	80001d4 <__adddf3>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4620      	mov	r0, r4
 800a542:	4629      	mov	r1, r5
 800a544:	f7f5 fe44 	bl	80001d0 <__aeabi_dsub>
 800a548:	4642      	mov	r2, r8
 800a54a:	464b      	mov	r3, r9
 800a54c:	f7f5 fe40 	bl	80001d0 <__aeabi_dsub>
 800a550:	460b      	mov	r3, r1
 800a552:	4602      	mov	r2, r0
 800a554:	493a      	ldr	r1, [pc, #232]	; (800a640 <__ieee754_pow+0xa30>)
 800a556:	2000      	movs	r0, #0
 800a558:	f7f5 fe3a 	bl	80001d0 <__aeabi_dsub>
 800a55c:	e9cd 0100 	strd	r0, r1, [sp]
 800a560:	9b01      	ldr	r3, [sp, #4]
 800a562:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a56a:	da2f      	bge.n	800a5cc <__ieee754_pow+0x9bc>
 800a56c:	4650      	mov	r0, sl
 800a56e:	ed9d 0b00 	vldr	d0, [sp]
 800a572:	f001 f919 	bl	800b7a8 <scalbn>
 800a576:	ec51 0b10 	vmov	r0, r1, d0
 800a57a:	ec53 2b18 	vmov	r2, r3, d8
 800a57e:	f7ff bbe0 	b.w	8009d42 <__ieee754_pow+0x132>
 800a582:	4b30      	ldr	r3, [pc, #192]	; (800a644 <__ieee754_pow+0xa34>)
 800a584:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a588:	429e      	cmp	r6, r3
 800a58a:	f77f af0b 	ble.w	800a3a4 <__ieee754_pow+0x794>
 800a58e:	4b2e      	ldr	r3, [pc, #184]	; (800a648 <__ieee754_pow+0xa38>)
 800a590:	440b      	add	r3, r1
 800a592:	4303      	orrs	r3, r0
 800a594:	d00b      	beq.n	800a5ae <__ieee754_pow+0x99e>
 800a596:	a326      	add	r3, pc, #152	; (adr r3, 800a630 <__ieee754_pow+0xa20>)
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	ec51 0b18 	vmov	r0, r1, d8
 800a5a0:	f7f5 ffce 	bl	8000540 <__aeabi_dmul>
 800a5a4:	a322      	add	r3, pc, #136	; (adr r3, 800a630 <__ieee754_pow+0xa20>)
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f7ff bbca 	b.w	8009d42 <__ieee754_pow+0x132>
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	462b      	mov	r3, r5
 800a5b2:	f7f5 fe0d 	bl	80001d0 <__aeabi_dsub>
 800a5b6:	4642      	mov	r2, r8
 800a5b8:	464b      	mov	r3, r9
 800a5ba:	f7f6 fa47 	bl	8000a4c <__aeabi_dcmpge>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f aef0 	beq.w	800a3a4 <__ieee754_pow+0x794>
 800a5c4:	e7e7      	b.n	800a596 <__ieee754_pow+0x986>
 800a5c6:	f04f 0a00 	mov.w	sl, #0
 800a5ca:	e717      	b.n	800a3fc <__ieee754_pow+0x7ec>
 800a5cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	e7d2      	b.n	800a57a <__ieee754_pow+0x96a>
 800a5d4:	491a      	ldr	r1, [pc, #104]	; (800a640 <__ieee754_pow+0xa30>)
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	f7ff bb9e 	b.w	8009d18 <__ieee754_pow+0x108>
 800a5dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e0:	f7ff bb9a 	b.w	8009d18 <__ieee754_pow+0x108>
 800a5e4:	9000      	str	r0, [sp, #0]
 800a5e6:	f7ff bb76 	b.w	8009cd6 <__ieee754_pow+0xc6>
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	f7ff bb60 	b.w	8009cb0 <__ieee754_pow+0xa0>
 800a5f0:	00000000 	.word	0x00000000
 800a5f4:	3fe62e43 	.word	0x3fe62e43
 800a5f8:	fefa39ef 	.word	0xfefa39ef
 800a5fc:	3fe62e42 	.word	0x3fe62e42
 800a600:	0ca86c39 	.word	0x0ca86c39
 800a604:	be205c61 	.word	0xbe205c61
 800a608:	72bea4d0 	.word	0x72bea4d0
 800a60c:	3e663769 	.word	0x3e663769
 800a610:	c5d26bf1 	.word	0xc5d26bf1
 800a614:	3ebbbd41 	.word	0x3ebbbd41
 800a618:	af25de2c 	.word	0xaf25de2c
 800a61c:	3f11566a 	.word	0x3f11566a
 800a620:	16bebd93 	.word	0x16bebd93
 800a624:	3f66c16c 	.word	0x3f66c16c
 800a628:	5555553e 	.word	0x5555553e
 800a62c:	3fc55555 	.word	0x3fc55555
 800a630:	c2f8f359 	.word	0xc2f8f359
 800a634:	01a56e1f 	.word	0x01a56e1f
 800a638:	3fe00000 	.word	0x3fe00000
 800a63c:	000fffff 	.word	0x000fffff
 800a640:	3ff00000 	.word	0x3ff00000
 800a644:	4090cbff 	.word	0x4090cbff
 800a648:	3f6f3400 	.word	0x3f6f3400
 800a64c:	652b82fe 	.word	0x652b82fe
 800a650:	3c971547 	.word	0x3c971547
 800a654:	00000000 	.word	0x00000000

0800a658 <__ieee754_rem_pio2>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	ed2d 8b02 	vpush	{d8}
 800a660:	ec55 4b10 	vmov	r4, r5, d0
 800a664:	4bca      	ldr	r3, [pc, #808]	; (800a990 <__ieee754_rem_pio2+0x338>)
 800a666:	b08b      	sub	sp, #44	; 0x2c
 800a668:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a66c:	4598      	cmp	r8, r3
 800a66e:	4682      	mov	sl, r0
 800a670:	9502      	str	r5, [sp, #8]
 800a672:	dc08      	bgt.n	800a686 <__ieee754_rem_pio2+0x2e>
 800a674:	2200      	movs	r2, #0
 800a676:	2300      	movs	r3, #0
 800a678:	ed80 0b00 	vstr	d0, [r0]
 800a67c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a680:	f04f 0b00 	mov.w	fp, #0
 800a684:	e028      	b.n	800a6d8 <__ieee754_rem_pio2+0x80>
 800a686:	4bc3      	ldr	r3, [pc, #780]	; (800a994 <__ieee754_rem_pio2+0x33c>)
 800a688:	4598      	cmp	r8, r3
 800a68a:	dc78      	bgt.n	800a77e <__ieee754_rem_pio2+0x126>
 800a68c:	9b02      	ldr	r3, [sp, #8]
 800a68e:	4ec2      	ldr	r6, [pc, #776]	; (800a998 <__ieee754_rem_pio2+0x340>)
 800a690:	2b00      	cmp	r3, #0
 800a692:	ee10 0a10 	vmov	r0, s0
 800a696:	a3b0      	add	r3, pc, #704	; (adr r3, 800a958 <__ieee754_rem_pio2+0x300>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	4629      	mov	r1, r5
 800a69e:	dd39      	ble.n	800a714 <__ieee754_rem_pio2+0xbc>
 800a6a0:	f7f5 fd96 	bl	80001d0 <__aeabi_dsub>
 800a6a4:	45b0      	cmp	r8, r6
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	d01b      	beq.n	800a6e4 <__ieee754_rem_pio2+0x8c>
 800a6ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800a960 <__ieee754_rem_pio2+0x308>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	f7f5 fd8d 	bl	80001d0 <__aeabi_dsub>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	e9ca 2300 	strd	r2, r3, [sl]
 800a6be:	4620      	mov	r0, r4
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7f5 fd85 	bl	80001d0 <__aeabi_dsub>
 800a6c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a960 <__ieee754_rem_pio2+0x308>)
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f7f5 fd80 	bl	80001d0 <__aeabi_dsub>
 800a6d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6d4:	f04f 0b01 	mov.w	fp, #1
 800a6d8:	4658      	mov	r0, fp
 800a6da:	b00b      	add	sp, #44	; 0x2c
 800a6dc:	ecbd 8b02 	vpop	{d8}
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a968 <__ieee754_rem_pio2+0x310>)
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f7f5 fd71 	bl	80001d0 <__aeabi_dsub>
 800a6ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800a970 <__ieee754_rem_pio2+0x318>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	f7f5 fd6a 	bl	80001d0 <__aeabi_dsub>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	e9ca 2300 	strd	r2, r3, [sl]
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f5 fd62 	bl	80001d0 <__aeabi_dsub>
 800a70c:	a398      	add	r3, pc, #608	; (adr r3, 800a970 <__ieee754_rem_pio2+0x318>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	e7db      	b.n	800a6cc <__ieee754_rem_pio2+0x74>
 800a714:	f7f5 fd5e 	bl	80001d4 <__adddf3>
 800a718:	45b0      	cmp	r8, r6
 800a71a:	4604      	mov	r4, r0
 800a71c:	460d      	mov	r5, r1
 800a71e:	d016      	beq.n	800a74e <__ieee754_rem_pio2+0xf6>
 800a720:	a38f      	add	r3, pc, #572	; (adr r3, 800a960 <__ieee754_rem_pio2+0x308>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7f5 fd55 	bl	80001d4 <__adddf3>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	e9ca 2300 	strd	r2, r3, [sl]
 800a732:	4620      	mov	r0, r4
 800a734:	4629      	mov	r1, r5
 800a736:	f7f5 fd4b 	bl	80001d0 <__aeabi_dsub>
 800a73a:	a389      	add	r3, pc, #548	; (adr r3, 800a960 <__ieee754_rem_pio2+0x308>)
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	f7f5 fd48 	bl	80001d4 <__adddf3>
 800a744:	f04f 3bff 	mov.w	fp, #4294967295
 800a748:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a74c:	e7c4      	b.n	800a6d8 <__ieee754_rem_pio2+0x80>
 800a74e:	a386      	add	r3, pc, #536	; (adr r3, 800a968 <__ieee754_rem_pio2+0x310>)
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	f7f5 fd3e 	bl	80001d4 <__adddf3>
 800a758:	a385      	add	r3, pc, #532	; (adr r3, 800a970 <__ieee754_rem_pio2+0x318>)
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	4604      	mov	r4, r0
 800a760:	460d      	mov	r5, r1
 800a762:	f7f5 fd37 	bl	80001d4 <__adddf3>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	e9ca 2300 	strd	r2, r3, [sl]
 800a76e:	4620      	mov	r0, r4
 800a770:	4629      	mov	r1, r5
 800a772:	f7f5 fd2d 	bl	80001d0 <__aeabi_dsub>
 800a776:	a37e      	add	r3, pc, #504	; (adr r3, 800a970 <__ieee754_rem_pio2+0x318>)
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	e7e0      	b.n	800a740 <__ieee754_rem_pio2+0xe8>
 800a77e:	4b87      	ldr	r3, [pc, #540]	; (800a99c <__ieee754_rem_pio2+0x344>)
 800a780:	4598      	cmp	r8, r3
 800a782:	f300 80d9 	bgt.w	800a938 <__ieee754_rem_pio2+0x2e0>
 800a786:	f7fe ffb3 	bl	80096f0 <fabs>
 800a78a:	ec55 4b10 	vmov	r4, r5, d0
 800a78e:	ee10 0a10 	vmov	r0, s0
 800a792:	a379      	add	r3, pc, #484	; (adr r3, 800a978 <__ieee754_rem_pio2+0x320>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	4629      	mov	r1, r5
 800a79a:	f7f5 fed1 	bl	8000540 <__aeabi_dmul>
 800a79e:	4b80      	ldr	r3, [pc, #512]	; (800a9a0 <__ieee754_rem_pio2+0x348>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f7f5 fd17 	bl	80001d4 <__adddf3>
 800a7a6:	f7f6 f97b 	bl	8000aa0 <__aeabi_d2iz>
 800a7aa:	4683      	mov	fp, r0
 800a7ac:	f7f5 fe5e 	bl	800046c <__aeabi_i2d>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	ec43 2b18 	vmov	d8, r2, r3
 800a7b8:	a367      	add	r3, pc, #412	; (adr r3, 800a958 <__ieee754_rem_pio2+0x300>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 febf 	bl	8000540 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f5 fd01 	bl	80001d0 <__aeabi_dsub>
 800a7ce:	a364      	add	r3, pc, #400	; (adr r3, 800a960 <__ieee754_rem_pio2+0x308>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	ec51 0b18 	vmov	r0, r1, d8
 800a7dc:	f7f5 feb0 	bl	8000540 <__aeabi_dmul>
 800a7e0:	f1bb 0f1f 	cmp.w	fp, #31
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	dc0d      	bgt.n	800a806 <__ieee754_rem_pio2+0x1ae>
 800a7ea:	4b6e      	ldr	r3, [pc, #440]	; (800a9a4 <__ieee754_rem_pio2+0x34c>)
 800a7ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f4:	4543      	cmp	r3, r8
 800a7f6:	d006      	beq.n	800a806 <__ieee754_rem_pio2+0x1ae>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	462b      	mov	r3, r5
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f5 fce6 	bl	80001d0 <__aeabi_dsub>
 800a804:	e00f      	b.n	800a826 <__ieee754_rem_pio2+0x1ce>
 800a806:	462b      	mov	r3, r5
 800a808:	4622      	mov	r2, r4
 800a80a:	4630      	mov	r0, r6
 800a80c:	4639      	mov	r1, r7
 800a80e:	f7f5 fcdf 	bl	80001d0 <__aeabi_dsub>
 800a812:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a816:	9303      	str	r3, [sp, #12]
 800a818:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a81c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a820:	f1b8 0f10 	cmp.w	r8, #16
 800a824:	dc02      	bgt.n	800a82c <__ieee754_rem_pio2+0x1d4>
 800a826:	e9ca 0100 	strd	r0, r1, [sl]
 800a82a:	e039      	b.n	800a8a0 <__ieee754_rem_pio2+0x248>
 800a82c:	a34e      	add	r3, pc, #312	; (adr r3, 800a968 <__ieee754_rem_pio2+0x310>)
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	ec51 0b18 	vmov	r0, r1, d8
 800a836:	f7f5 fe83 	bl	8000540 <__aeabi_dmul>
 800a83a:	4604      	mov	r4, r0
 800a83c:	460d      	mov	r5, r1
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4630      	mov	r0, r6
 800a844:	4639      	mov	r1, r7
 800a846:	f7f5 fcc3 	bl	80001d0 <__aeabi_dsub>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4680      	mov	r8, r0
 800a850:	4689      	mov	r9, r1
 800a852:	4630      	mov	r0, r6
 800a854:	4639      	mov	r1, r7
 800a856:	f7f5 fcbb 	bl	80001d0 <__aeabi_dsub>
 800a85a:	4622      	mov	r2, r4
 800a85c:	462b      	mov	r3, r5
 800a85e:	f7f5 fcb7 	bl	80001d0 <__aeabi_dsub>
 800a862:	a343      	add	r3, pc, #268	; (adr r3, 800a970 <__ieee754_rem_pio2+0x318>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	4604      	mov	r4, r0
 800a86a:	460d      	mov	r5, r1
 800a86c:	ec51 0b18 	vmov	r0, r1, d8
 800a870:	f7f5 fe66 	bl	8000540 <__aeabi_dmul>
 800a874:	4622      	mov	r2, r4
 800a876:	462b      	mov	r3, r5
 800a878:	f7f5 fcaa 	bl	80001d0 <__aeabi_dsub>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4604      	mov	r4, r0
 800a882:	460d      	mov	r5, r1
 800a884:	4640      	mov	r0, r8
 800a886:	4649      	mov	r1, r9
 800a888:	f7f5 fca2 	bl	80001d0 <__aeabi_dsub>
 800a88c:	9a03      	ldr	r2, [sp, #12]
 800a88e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	2b31      	cmp	r3, #49	; 0x31
 800a896:	dc24      	bgt.n	800a8e2 <__ieee754_rem_pio2+0x28a>
 800a898:	e9ca 0100 	strd	r0, r1, [sl]
 800a89c:	4646      	mov	r6, r8
 800a89e:	464f      	mov	r7, r9
 800a8a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4642      	mov	r2, r8
 800a8a8:	464b      	mov	r3, r9
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f5 fc90 	bl	80001d0 <__aeabi_dsub>
 800a8b0:	462b      	mov	r3, r5
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	f7f5 fc8c 	bl	80001d0 <__aeabi_dsub>
 800a8b8:	9b02      	ldr	r3, [sp, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8c0:	f6bf af0a 	bge.w	800a6d8 <__ieee754_rem_pio2+0x80>
 800a8c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a8c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a8cc:	f8ca 8000 	str.w	r8, [sl]
 800a8d0:	f8ca 0008 	str.w	r0, [sl, #8]
 800a8d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800a8dc:	f1cb 0b00 	rsb	fp, fp, #0
 800a8e0:	e6fa      	b.n	800a6d8 <__ieee754_rem_pio2+0x80>
 800a8e2:	a327      	add	r3, pc, #156	; (adr r3, 800a980 <__ieee754_rem_pio2+0x328>)
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	ec51 0b18 	vmov	r0, r1, d8
 800a8ec:	f7f5 fe28 	bl	8000540 <__aeabi_dmul>
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	460d      	mov	r5, r1
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	f7f5 fc68 	bl	80001d0 <__aeabi_dsub>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4606      	mov	r6, r0
 800a906:	460f      	mov	r7, r1
 800a908:	4640      	mov	r0, r8
 800a90a:	4649      	mov	r1, r9
 800a90c:	f7f5 fc60 	bl	80001d0 <__aeabi_dsub>
 800a910:	4622      	mov	r2, r4
 800a912:	462b      	mov	r3, r5
 800a914:	f7f5 fc5c 	bl	80001d0 <__aeabi_dsub>
 800a918:	a31b      	add	r3, pc, #108	; (adr r3, 800a988 <__ieee754_rem_pio2+0x330>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	4604      	mov	r4, r0
 800a920:	460d      	mov	r5, r1
 800a922:	ec51 0b18 	vmov	r0, r1, d8
 800a926:	f7f5 fe0b 	bl	8000540 <__aeabi_dmul>
 800a92a:	4622      	mov	r2, r4
 800a92c:	462b      	mov	r3, r5
 800a92e:	f7f5 fc4f 	bl	80001d0 <__aeabi_dsub>
 800a932:	4604      	mov	r4, r0
 800a934:	460d      	mov	r5, r1
 800a936:	e75f      	b.n	800a7f8 <__ieee754_rem_pio2+0x1a0>
 800a938:	4b1b      	ldr	r3, [pc, #108]	; (800a9a8 <__ieee754_rem_pio2+0x350>)
 800a93a:	4598      	cmp	r8, r3
 800a93c:	dd36      	ble.n	800a9ac <__ieee754_rem_pio2+0x354>
 800a93e:	ee10 2a10 	vmov	r2, s0
 800a942:	462b      	mov	r3, r5
 800a944:	4620      	mov	r0, r4
 800a946:	4629      	mov	r1, r5
 800a948:	f7f5 fc42 	bl	80001d0 <__aeabi_dsub>
 800a94c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a950:	e9ca 0100 	strd	r0, r1, [sl]
 800a954:	e694      	b.n	800a680 <__ieee754_rem_pio2+0x28>
 800a956:	bf00      	nop
 800a958:	54400000 	.word	0x54400000
 800a95c:	3ff921fb 	.word	0x3ff921fb
 800a960:	1a626331 	.word	0x1a626331
 800a964:	3dd0b461 	.word	0x3dd0b461
 800a968:	1a600000 	.word	0x1a600000
 800a96c:	3dd0b461 	.word	0x3dd0b461
 800a970:	2e037073 	.word	0x2e037073
 800a974:	3ba3198a 	.word	0x3ba3198a
 800a978:	6dc9c883 	.word	0x6dc9c883
 800a97c:	3fe45f30 	.word	0x3fe45f30
 800a980:	2e000000 	.word	0x2e000000
 800a984:	3ba3198a 	.word	0x3ba3198a
 800a988:	252049c1 	.word	0x252049c1
 800a98c:	397b839a 	.word	0x397b839a
 800a990:	3fe921fb 	.word	0x3fe921fb
 800a994:	4002d97b 	.word	0x4002d97b
 800a998:	3ff921fb 	.word	0x3ff921fb
 800a99c:	413921fb 	.word	0x413921fb
 800a9a0:	3fe00000 	.word	0x3fe00000
 800a9a4:	0800b9e0 	.word	0x0800b9e0
 800a9a8:	7fefffff 	.word	0x7fefffff
 800a9ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a9b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a9b4:	ee10 0a10 	vmov	r0, s0
 800a9b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a9bc:	ee10 6a10 	vmov	r6, s0
 800a9c0:	460f      	mov	r7, r1
 800a9c2:	f7f6 f86d 	bl	8000aa0 <__aeabi_d2iz>
 800a9c6:	f7f5 fd51 	bl	800046c <__aeabi_i2d>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9d6:	f7f5 fbfb 	bl	80001d0 <__aeabi_dsub>
 800a9da:	4b22      	ldr	r3, [pc, #136]	; (800aa64 <__ieee754_rem_pio2+0x40c>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f7f5 fdaf 	bl	8000540 <__aeabi_dmul>
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	f7f6 f85b 	bl	8000aa0 <__aeabi_d2iz>
 800a9ea:	f7f5 fd3f 	bl	800046c <__aeabi_i2d>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a9fa:	f7f5 fbe9 	bl	80001d0 <__aeabi_dsub>
 800a9fe:	4b19      	ldr	r3, [pc, #100]	; (800aa64 <__ieee754_rem_pio2+0x40c>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	f7f5 fd9d 	bl	8000540 <__aeabi_dmul>
 800aa06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa0a:	ad04      	add	r5, sp, #16
 800aa0c:	f04f 0803 	mov.w	r8, #3
 800aa10:	46a9      	mov	r9, r5
 800aa12:	2600      	movs	r6, #0
 800aa14:	2700      	movs	r7, #0
 800aa16:	4632      	mov	r2, r6
 800aa18:	463b      	mov	r3, r7
 800aa1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800aa1e:	46c3      	mov	fp, r8
 800aa20:	3d08      	subs	r5, #8
 800aa22:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa26:	f7f5 fff3 	bl	8000a10 <__aeabi_dcmpeq>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d1f3      	bne.n	800aa16 <__ieee754_rem_pio2+0x3be>
 800aa2e:	4b0e      	ldr	r3, [pc, #56]	; (800aa68 <__ieee754_rem_pio2+0x410>)
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	2302      	movs	r3, #2
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	4622      	mov	r2, r4
 800aa38:	465b      	mov	r3, fp
 800aa3a:	4651      	mov	r1, sl
 800aa3c:	4648      	mov	r0, r9
 800aa3e:	f000 f993 	bl	800ad68 <__kernel_rem_pio2>
 800aa42:	9b02      	ldr	r3, [sp, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	4683      	mov	fp, r0
 800aa48:	f6bf ae46 	bge.w	800a6d8 <__ieee754_rem_pio2+0x80>
 800aa4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aa50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa54:	f8ca 3004 	str.w	r3, [sl, #4]
 800aa58:	f8da 300c 	ldr.w	r3, [sl, #12]
 800aa5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa60:	e73a      	b.n	800a8d8 <__ieee754_rem_pio2+0x280>
 800aa62:	bf00      	nop
 800aa64:	41700000 	.word	0x41700000
 800aa68:	0800ba60 	.word	0x0800ba60

0800aa6c <__ieee754_sqrt>:
 800aa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa70:	ec55 4b10 	vmov	r4, r5, d0
 800aa74:	4e56      	ldr	r6, [pc, #344]	; (800abd0 <__ieee754_sqrt+0x164>)
 800aa76:	43ae      	bics	r6, r5
 800aa78:	ee10 0a10 	vmov	r0, s0
 800aa7c:	ee10 3a10 	vmov	r3, s0
 800aa80:	4629      	mov	r1, r5
 800aa82:	462a      	mov	r2, r5
 800aa84:	d110      	bne.n	800aaa8 <__ieee754_sqrt+0x3c>
 800aa86:	ee10 2a10 	vmov	r2, s0
 800aa8a:	462b      	mov	r3, r5
 800aa8c:	f7f5 fd58 	bl	8000540 <__aeabi_dmul>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4620      	mov	r0, r4
 800aa96:	4629      	mov	r1, r5
 800aa98:	f7f5 fb9c 	bl	80001d4 <__adddf3>
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	ec45 4b10 	vmov	d0, r4, r5
 800aaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa8:	2d00      	cmp	r5, #0
 800aaaa:	dc10      	bgt.n	800aace <__ieee754_sqrt+0x62>
 800aaac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aab0:	4330      	orrs	r0, r6
 800aab2:	d0f5      	beq.n	800aaa0 <__ieee754_sqrt+0x34>
 800aab4:	b15d      	cbz	r5, 800aace <__ieee754_sqrt+0x62>
 800aab6:	ee10 2a10 	vmov	r2, s0
 800aaba:	462b      	mov	r3, r5
 800aabc:	ee10 0a10 	vmov	r0, s0
 800aac0:	f7f5 fb86 	bl	80001d0 <__aeabi_dsub>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	f7f5 fe64 	bl	8000794 <__aeabi_ddiv>
 800aacc:	e7e6      	b.n	800aa9c <__ieee754_sqrt+0x30>
 800aace:	1509      	asrs	r1, r1, #20
 800aad0:	d076      	beq.n	800abc0 <__ieee754_sqrt+0x154>
 800aad2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aad6:	07ce      	lsls	r6, r1, #31
 800aad8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800aadc:	bf5e      	ittt	pl
 800aade:	0fda      	lsrpl	r2, r3, #31
 800aae0:	005b      	lslpl	r3, r3, #1
 800aae2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800aae6:	0fda      	lsrs	r2, r3, #31
 800aae8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800aaec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	106d      	asrs	r5, r5, #1
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	f04f 0e16 	mov.w	lr, #22
 800aafa:	4684      	mov	ip, r0
 800aafc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab00:	eb0c 0401 	add.w	r4, ip, r1
 800ab04:	4294      	cmp	r4, r2
 800ab06:	bfde      	ittt	le
 800ab08:	1b12      	suble	r2, r2, r4
 800ab0a:	eb04 0c01 	addle.w	ip, r4, r1
 800ab0e:	1840      	addle	r0, r0, r1
 800ab10:	0052      	lsls	r2, r2, #1
 800ab12:	f1be 0e01 	subs.w	lr, lr, #1
 800ab16:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ab1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ab1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab22:	d1ed      	bne.n	800ab00 <__ieee754_sqrt+0x94>
 800ab24:	4671      	mov	r1, lr
 800ab26:	2720      	movs	r7, #32
 800ab28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ab2c:	4562      	cmp	r2, ip
 800ab2e:	eb04 060e 	add.w	r6, r4, lr
 800ab32:	dc02      	bgt.n	800ab3a <__ieee754_sqrt+0xce>
 800ab34:	d113      	bne.n	800ab5e <__ieee754_sqrt+0xf2>
 800ab36:	429e      	cmp	r6, r3
 800ab38:	d811      	bhi.n	800ab5e <__ieee754_sqrt+0xf2>
 800ab3a:	2e00      	cmp	r6, #0
 800ab3c:	eb06 0e04 	add.w	lr, r6, r4
 800ab40:	da43      	bge.n	800abca <__ieee754_sqrt+0x15e>
 800ab42:	f1be 0f00 	cmp.w	lr, #0
 800ab46:	db40      	blt.n	800abca <__ieee754_sqrt+0x15e>
 800ab48:	f10c 0801 	add.w	r8, ip, #1
 800ab4c:	eba2 020c 	sub.w	r2, r2, ip
 800ab50:	429e      	cmp	r6, r3
 800ab52:	bf88      	it	hi
 800ab54:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ab58:	1b9b      	subs	r3, r3, r6
 800ab5a:	4421      	add	r1, r4
 800ab5c:	46c4      	mov	ip, r8
 800ab5e:	0052      	lsls	r2, r2, #1
 800ab60:	3f01      	subs	r7, #1
 800ab62:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ab66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ab6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab6e:	d1dd      	bne.n	800ab2c <__ieee754_sqrt+0xc0>
 800ab70:	4313      	orrs	r3, r2
 800ab72:	d006      	beq.n	800ab82 <__ieee754_sqrt+0x116>
 800ab74:	1c4c      	adds	r4, r1, #1
 800ab76:	bf13      	iteet	ne
 800ab78:	3101      	addne	r1, #1
 800ab7a:	3001      	addeq	r0, #1
 800ab7c:	4639      	moveq	r1, r7
 800ab7e:	f021 0101 	bicne.w	r1, r1, #1
 800ab82:	1043      	asrs	r3, r0, #1
 800ab84:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ab88:	0849      	lsrs	r1, r1, #1
 800ab8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ab8e:	07c2      	lsls	r2, r0, #31
 800ab90:	bf48      	it	mi
 800ab92:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ab96:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	463d      	mov	r5, r7
 800ab9e:	e77f      	b.n	800aaa0 <__ieee754_sqrt+0x34>
 800aba0:	0ada      	lsrs	r2, r3, #11
 800aba2:	3815      	subs	r0, #21
 800aba4:	055b      	lsls	r3, r3, #21
 800aba6:	2a00      	cmp	r2, #0
 800aba8:	d0fa      	beq.n	800aba0 <__ieee754_sqrt+0x134>
 800abaa:	02d7      	lsls	r7, r2, #11
 800abac:	d50a      	bpl.n	800abc4 <__ieee754_sqrt+0x158>
 800abae:	f1c1 0420 	rsb	r4, r1, #32
 800abb2:	fa23 f404 	lsr.w	r4, r3, r4
 800abb6:	1e4d      	subs	r5, r1, #1
 800abb8:	408b      	lsls	r3, r1
 800abba:	4322      	orrs	r2, r4
 800abbc:	1b41      	subs	r1, r0, r5
 800abbe:	e788      	b.n	800aad2 <__ieee754_sqrt+0x66>
 800abc0:	4608      	mov	r0, r1
 800abc2:	e7f0      	b.n	800aba6 <__ieee754_sqrt+0x13a>
 800abc4:	0052      	lsls	r2, r2, #1
 800abc6:	3101      	adds	r1, #1
 800abc8:	e7ef      	b.n	800abaa <__ieee754_sqrt+0x13e>
 800abca:	46e0      	mov	r8, ip
 800abcc:	e7be      	b.n	800ab4c <__ieee754_sqrt+0xe0>
 800abce:	bf00      	nop
 800abd0:	7ff00000 	.word	0x7ff00000
 800abd4:	00000000 	.word	0x00000000

0800abd8 <__kernel_cos>:
 800abd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	ec57 6b10 	vmov	r6, r7, d0
 800abe0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800abe4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800abe8:	ed8d 1b00 	vstr	d1, [sp]
 800abec:	da07      	bge.n	800abfe <__kernel_cos+0x26>
 800abee:	ee10 0a10 	vmov	r0, s0
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 ff54 	bl	8000aa0 <__aeabi_d2iz>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	f000 8088 	beq.w	800ad0e <__kernel_cos+0x136>
 800abfe:	4632      	mov	r2, r6
 800ac00:	463b      	mov	r3, r7
 800ac02:	4630      	mov	r0, r6
 800ac04:	4639      	mov	r1, r7
 800ac06:	f7f5 fc9b 	bl	8000540 <__aeabi_dmul>
 800ac0a:	4b51      	ldr	r3, [pc, #324]	; (800ad50 <__kernel_cos+0x178>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	4604      	mov	r4, r0
 800ac10:	460d      	mov	r5, r1
 800ac12:	f7f5 fc95 	bl	8000540 <__aeabi_dmul>
 800ac16:	a340      	add	r3, pc, #256	; (adr r3, 800ad18 <__kernel_cos+0x140>)
 800ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1c:	4682      	mov	sl, r0
 800ac1e:	468b      	mov	fp, r1
 800ac20:	4620      	mov	r0, r4
 800ac22:	4629      	mov	r1, r5
 800ac24:	f7f5 fc8c 	bl	8000540 <__aeabi_dmul>
 800ac28:	a33d      	add	r3, pc, #244	; (adr r3, 800ad20 <__kernel_cos+0x148>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	f7f5 fad1 	bl	80001d4 <__adddf3>
 800ac32:	4622      	mov	r2, r4
 800ac34:	462b      	mov	r3, r5
 800ac36:	f7f5 fc83 	bl	8000540 <__aeabi_dmul>
 800ac3a:	a33b      	add	r3, pc, #236	; (adr r3, 800ad28 <__kernel_cos+0x150>)
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f7f5 fac6 	bl	80001d0 <__aeabi_dsub>
 800ac44:	4622      	mov	r2, r4
 800ac46:	462b      	mov	r3, r5
 800ac48:	f7f5 fc7a 	bl	8000540 <__aeabi_dmul>
 800ac4c:	a338      	add	r3, pc, #224	; (adr r3, 800ad30 <__kernel_cos+0x158>)
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f7f5 fabf 	bl	80001d4 <__adddf3>
 800ac56:	4622      	mov	r2, r4
 800ac58:	462b      	mov	r3, r5
 800ac5a:	f7f5 fc71 	bl	8000540 <__aeabi_dmul>
 800ac5e:	a336      	add	r3, pc, #216	; (adr r3, 800ad38 <__kernel_cos+0x160>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f7f5 fab4 	bl	80001d0 <__aeabi_dsub>
 800ac68:	4622      	mov	r2, r4
 800ac6a:	462b      	mov	r3, r5
 800ac6c:	f7f5 fc68 	bl	8000540 <__aeabi_dmul>
 800ac70:	a333      	add	r3, pc, #204	; (adr r3, 800ad40 <__kernel_cos+0x168>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f7f5 faad 	bl	80001d4 <__adddf3>
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	f7f5 fc5f 	bl	8000540 <__aeabi_dmul>
 800ac82:	4622      	mov	r2, r4
 800ac84:	462b      	mov	r3, r5
 800ac86:	f7f5 fc5b 	bl	8000540 <__aeabi_dmul>
 800ac8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac8e:	4604      	mov	r4, r0
 800ac90:	460d      	mov	r5, r1
 800ac92:	4630      	mov	r0, r6
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 fc53 	bl	8000540 <__aeabi_dmul>
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4620      	mov	r0, r4
 800aca2:	f7f5 fa95 	bl	80001d0 <__aeabi_dsub>
 800aca6:	4b2b      	ldr	r3, [pc, #172]	; (800ad54 <__kernel_cos+0x17c>)
 800aca8:	4598      	cmp	r8, r3
 800acaa:	4606      	mov	r6, r0
 800acac:	460f      	mov	r7, r1
 800acae:	dc10      	bgt.n	800acd2 <__kernel_cos+0xfa>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	4650      	mov	r0, sl
 800acb6:	4659      	mov	r1, fp
 800acb8:	f7f5 fa8a 	bl	80001d0 <__aeabi_dsub>
 800acbc:	460b      	mov	r3, r1
 800acbe:	4926      	ldr	r1, [pc, #152]	; (800ad58 <__kernel_cos+0x180>)
 800acc0:	4602      	mov	r2, r0
 800acc2:	2000      	movs	r0, #0
 800acc4:	f7f5 fa84 	bl	80001d0 <__aeabi_dsub>
 800acc8:	ec41 0b10 	vmov	d0, r0, r1
 800accc:	b003      	add	sp, #12
 800acce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd2:	4b22      	ldr	r3, [pc, #136]	; (800ad5c <__kernel_cos+0x184>)
 800acd4:	4920      	ldr	r1, [pc, #128]	; (800ad58 <__kernel_cos+0x180>)
 800acd6:	4598      	cmp	r8, r3
 800acd8:	bfcc      	ite	gt
 800acda:	4d21      	ldrgt	r5, [pc, #132]	; (800ad60 <__kernel_cos+0x188>)
 800acdc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ace0:	2400      	movs	r4, #0
 800ace2:	4622      	mov	r2, r4
 800ace4:	462b      	mov	r3, r5
 800ace6:	2000      	movs	r0, #0
 800ace8:	f7f5 fa72 	bl	80001d0 <__aeabi_dsub>
 800acec:	4622      	mov	r2, r4
 800acee:	4680      	mov	r8, r0
 800acf0:	4689      	mov	r9, r1
 800acf2:	462b      	mov	r3, r5
 800acf4:	4650      	mov	r0, sl
 800acf6:	4659      	mov	r1, fp
 800acf8:	f7f5 fa6a 	bl	80001d0 <__aeabi_dsub>
 800acfc:	4632      	mov	r2, r6
 800acfe:	463b      	mov	r3, r7
 800ad00:	f7f5 fa66 	bl	80001d0 <__aeabi_dsub>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4640      	mov	r0, r8
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	e7da      	b.n	800acc4 <__kernel_cos+0xec>
 800ad0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ad48 <__kernel_cos+0x170>
 800ad12:	e7db      	b.n	800accc <__kernel_cos+0xf4>
 800ad14:	f3af 8000 	nop.w
 800ad18:	be8838d4 	.word	0xbe8838d4
 800ad1c:	bda8fae9 	.word	0xbda8fae9
 800ad20:	bdb4b1c4 	.word	0xbdb4b1c4
 800ad24:	3e21ee9e 	.word	0x3e21ee9e
 800ad28:	809c52ad 	.word	0x809c52ad
 800ad2c:	3e927e4f 	.word	0x3e927e4f
 800ad30:	19cb1590 	.word	0x19cb1590
 800ad34:	3efa01a0 	.word	0x3efa01a0
 800ad38:	16c15177 	.word	0x16c15177
 800ad3c:	3f56c16c 	.word	0x3f56c16c
 800ad40:	5555554c 	.word	0x5555554c
 800ad44:	3fa55555 	.word	0x3fa55555
 800ad48:	00000000 	.word	0x00000000
 800ad4c:	3ff00000 	.word	0x3ff00000
 800ad50:	3fe00000 	.word	0x3fe00000
 800ad54:	3fd33332 	.word	0x3fd33332
 800ad58:	3ff00000 	.word	0x3ff00000
 800ad5c:	3fe90000 	.word	0x3fe90000
 800ad60:	3fd20000 	.word	0x3fd20000
 800ad64:	00000000 	.word	0x00000000

0800ad68 <__kernel_rem_pio2>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	ed2d 8b02 	vpush	{d8}
 800ad70:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ad74:	f112 0f14 	cmn.w	r2, #20
 800ad78:	9308      	str	r3, [sp, #32]
 800ad7a:	9101      	str	r1, [sp, #4]
 800ad7c:	4bc6      	ldr	r3, [pc, #792]	; (800b098 <__kernel_rem_pio2+0x330>)
 800ad7e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ad80:	9009      	str	r0, [sp, #36]	; 0x24
 800ad82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad86:	9304      	str	r3, [sp, #16]
 800ad88:	9b08      	ldr	r3, [sp, #32]
 800ad8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad8e:	bfa8      	it	ge
 800ad90:	1ed4      	subge	r4, r2, #3
 800ad92:	9306      	str	r3, [sp, #24]
 800ad94:	bfb2      	itee	lt
 800ad96:	2400      	movlt	r4, #0
 800ad98:	2318      	movge	r3, #24
 800ad9a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ad9e:	f06f 0317 	mvn.w	r3, #23
 800ada2:	fb04 3303 	mla	r3, r4, r3, r3
 800ada6:	eb03 0a02 	add.w	sl, r3, r2
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	9a06      	ldr	r2, [sp, #24]
 800adae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b088 <__kernel_rem_pio2+0x320>
 800adb2:	eb03 0802 	add.w	r8, r3, r2
 800adb6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800adb8:	1aa7      	subs	r7, r4, r2
 800adba:	ae20      	add	r6, sp, #128	; 0x80
 800adbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800adc0:	2500      	movs	r5, #0
 800adc2:	4545      	cmp	r5, r8
 800adc4:	dd18      	ble.n	800adf8 <__kernel_rem_pio2+0x90>
 800adc6:	9b08      	ldr	r3, [sp, #32]
 800adc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800adcc:	aa20      	add	r2, sp, #128	; 0x80
 800adce:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b088 <__kernel_rem_pio2+0x320>
 800add2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800add6:	f1c3 0301 	rsb	r3, r3, #1
 800adda:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800adde:	9307      	str	r3, [sp, #28]
 800ade0:	9b07      	ldr	r3, [sp, #28]
 800ade2:	9a04      	ldr	r2, [sp, #16]
 800ade4:	4443      	add	r3, r8
 800ade6:	429a      	cmp	r2, r3
 800ade8:	db2f      	blt.n	800ae4a <__kernel_rem_pio2+0xe2>
 800adea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800adee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800adf2:	462f      	mov	r7, r5
 800adf4:	2600      	movs	r6, #0
 800adf6:	e01b      	b.n	800ae30 <__kernel_rem_pio2+0xc8>
 800adf8:	42ef      	cmn	r7, r5
 800adfa:	d407      	bmi.n	800ae0c <__kernel_rem_pio2+0xa4>
 800adfc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae00:	f7f5 fb34 	bl	800046c <__aeabi_i2d>
 800ae04:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae08:	3501      	adds	r5, #1
 800ae0a:	e7da      	b.n	800adc2 <__kernel_rem_pio2+0x5a>
 800ae0c:	ec51 0b18 	vmov	r0, r1, d8
 800ae10:	e7f8      	b.n	800ae04 <__kernel_rem_pio2+0x9c>
 800ae12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae16:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ae1a:	f7f5 fb91 	bl	8000540 <__aeabi_dmul>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae26:	f7f5 f9d5 	bl	80001d4 <__adddf3>
 800ae2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae2e:	3601      	adds	r6, #1
 800ae30:	9b06      	ldr	r3, [sp, #24]
 800ae32:	429e      	cmp	r6, r3
 800ae34:	f1a7 0708 	sub.w	r7, r7, #8
 800ae38:	ddeb      	ble.n	800ae12 <__kernel_rem_pio2+0xaa>
 800ae3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae3e:	3508      	adds	r5, #8
 800ae40:	ecab 7b02 	vstmia	fp!, {d7}
 800ae44:	f108 0801 	add.w	r8, r8, #1
 800ae48:	e7ca      	b.n	800ade0 <__kernel_rem_pio2+0x78>
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	aa0c      	add	r2, sp, #48	; 0x30
 800ae4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae54:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ae56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ae5a:	9c04      	ldr	r4, [sp, #16]
 800ae5c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae5e:	ab98      	add	r3, sp, #608	; 0x260
 800ae60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae64:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ae68:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ae6c:	f8cd b008 	str.w	fp, [sp, #8]
 800ae70:	4625      	mov	r5, r4
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	dc78      	bgt.n	800af68 <__kernel_rem_pio2+0x200>
 800ae76:	ec47 6b10 	vmov	d0, r6, r7
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	f000 fc94 	bl	800b7a8 <scalbn>
 800ae80:	ec57 6b10 	vmov	r6, r7, d0
 800ae84:	2200      	movs	r2, #0
 800ae86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ae8a:	ee10 0a10 	vmov	r0, s0
 800ae8e:	4639      	mov	r1, r7
 800ae90:	f7f5 fb56 	bl	8000540 <__aeabi_dmul>
 800ae94:	ec41 0b10 	vmov	d0, r0, r1
 800ae98:	f000 fb72 	bl	800b580 <floor>
 800ae9c:	4b7f      	ldr	r3, [pc, #508]	; (800b09c <__kernel_rem_pio2+0x334>)
 800ae9e:	ec51 0b10 	vmov	r0, r1, d0
 800aea2:	2200      	movs	r2, #0
 800aea4:	f7f5 fb4c 	bl	8000540 <__aeabi_dmul>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4630      	mov	r0, r6
 800aeae:	4639      	mov	r1, r7
 800aeb0:	f7f5 f98e 	bl	80001d0 <__aeabi_dsub>
 800aeb4:	460f      	mov	r7, r1
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	f7f5 fdf2 	bl	8000aa0 <__aeabi_d2iz>
 800aebc:	9007      	str	r0, [sp, #28]
 800aebe:	f7f5 fad5 	bl	800046c <__aeabi_i2d>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	f7f5 f981 	bl	80001d0 <__aeabi_dsub>
 800aece:	f1ba 0f00 	cmp.w	sl, #0
 800aed2:	4606      	mov	r6, r0
 800aed4:	460f      	mov	r7, r1
 800aed6:	dd70      	ble.n	800afba <__kernel_rem_pio2+0x252>
 800aed8:	1e62      	subs	r2, r4, #1
 800aeda:	ab0c      	add	r3, sp, #48	; 0x30
 800aedc:	9d07      	ldr	r5, [sp, #28]
 800aede:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800aee2:	f1ca 0118 	rsb	r1, sl, #24
 800aee6:	fa40 f301 	asr.w	r3, r0, r1
 800aeea:	441d      	add	r5, r3
 800aeec:	408b      	lsls	r3, r1
 800aeee:	1ac0      	subs	r0, r0, r3
 800aef0:	ab0c      	add	r3, sp, #48	; 0x30
 800aef2:	9507      	str	r5, [sp, #28]
 800aef4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800aef8:	f1ca 0317 	rsb	r3, sl, #23
 800aefc:	fa40 f303 	asr.w	r3, r0, r3
 800af00:	9302      	str	r3, [sp, #8]
 800af02:	9b02      	ldr	r3, [sp, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	dd66      	ble.n	800afd6 <__kernel_rem_pio2+0x26e>
 800af08:	9b07      	ldr	r3, [sp, #28]
 800af0a:	2200      	movs	r2, #0
 800af0c:	3301      	adds	r3, #1
 800af0e:	9307      	str	r3, [sp, #28]
 800af10:	4615      	mov	r5, r2
 800af12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800af16:	4294      	cmp	r4, r2
 800af18:	f300 8099 	bgt.w	800b04e <__kernel_rem_pio2+0x2e6>
 800af1c:	f1ba 0f00 	cmp.w	sl, #0
 800af20:	dd07      	ble.n	800af32 <__kernel_rem_pio2+0x1ca>
 800af22:	f1ba 0f01 	cmp.w	sl, #1
 800af26:	f000 80a5 	beq.w	800b074 <__kernel_rem_pio2+0x30c>
 800af2a:	f1ba 0f02 	cmp.w	sl, #2
 800af2e:	f000 80c1 	beq.w	800b0b4 <__kernel_rem_pio2+0x34c>
 800af32:	9b02      	ldr	r3, [sp, #8]
 800af34:	2b02      	cmp	r3, #2
 800af36:	d14e      	bne.n	800afd6 <__kernel_rem_pio2+0x26e>
 800af38:	4632      	mov	r2, r6
 800af3a:	463b      	mov	r3, r7
 800af3c:	4958      	ldr	r1, [pc, #352]	; (800b0a0 <__kernel_rem_pio2+0x338>)
 800af3e:	2000      	movs	r0, #0
 800af40:	f7f5 f946 	bl	80001d0 <__aeabi_dsub>
 800af44:	4606      	mov	r6, r0
 800af46:	460f      	mov	r7, r1
 800af48:	2d00      	cmp	r5, #0
 800af4a:	d044      	beq.n	800afd6 <__kernel_rem_pio2+0x26e>
 800af4c:	4650      	mov	r0, sl
 800af4e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b090 <__kernel_rem_pio2+0x328>
 800af52:	f000 fc29 	bl	800b7a8 <scalbn>
 800af56:	4630      	mov	r0, r6
 800af58:	4639      	mov	r1, r7
 800af5a:	ec53 2b10 	vmov	r2, r3, d0
 800af5e:	f7f5 f937 	bl	80001d0 <__aeabi_dsub>
 800af62:	4606      	mov	r6, r0
 800af64:	460f      	mov	r7, r1
 800af66:	e036      	b.n	800afd6 <__kernel_rem_pio2+0x26e>
 800af68:	4b4e      	ldr	r3, [pc, #312]	; (800b0a4 <__kernel_rem_pio2+0x33c>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 fae6 	bl	8000540 <__aeabi_dmul>
 800af74:	f7f5 fd94 	bl	8000aa0 <__aeabi_d2iz>
 800af78:	f7f5 fa78 	bl	800046c <__aeabi_i2d>
 800af7c:	4b4a      	ldr	r3, [pc, #296]	; (800b0a8 <__kernel_rem_pio2+0x340>)
 800af7e:	2200      	movs	r2, #0
 800af80:	4680      	mov	r8, r0
 800af82:	4689      	mov	r9, r1
 800af84:	f7f5 fadc 	bl	8000540 <__aeabi_dmul>
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4630      	mov	r0, r6
 800af8e:	4639      	mov	r1, r7
 800af90:	f7f5 f91e 	bl	80001d0 <__aeabi_dsub>
 800af94:	f7f5 fd84 	bl	8000aa0 <__aeabi_d2iz>
 800af98:	9b02      	ldr	r3, [sp, #8]
 800af9a:	f843 0b04 	str.w	r0, [r3], #4
 800af9e:	3d01      	subs	r5, #1
 800afa0:	9302      	str	r3, [sp, #8]
 800afa2:	ab70      	add	r3, sp, #448	; 0x1c0
 800afa4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	4640      	mov	r0, r8
 800afae:	4649      	mov	r1, r9
 800afb0:	f7f5 f910 	bl	80001d4 <__adddf3>
 800afb4:	4606      	mov	r6, r0
 800afb6:	460f      	mov	r7, r1
 800afb8:	e75b      	b.n	800ae72 <__kernel_rem_pio2+0x10a>
 800afba:	d105      	bne.n	800afc8 <__kernel_rem_pio2+0x260>
 800afbc:	1e63      	subs	r3, r4, #1
 800afbe:	aa0c      	add	r2, sp, #48	; 0x30
 800afc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800afc4:	15c3      	asrs	r3, r0, #23
 800afc6:	e79b      	b.n	800af00 <__kernel_rem_pio2+0x198>
 800afc8:	4b38      	ldr	r3, [pc, #224]	; (800b0ac <__kernel_rem_pio2+0x344>)
 800afca:	2200      	movs	r2, #0
 800afcc:	f7f5 fd3e 	bl	8000a4c <__aeabi_dcmpge>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d139      	bne.n	800b048 <__kernel_rem_pio2+0x2e0>
 800afd4:	9002      	str	r0, [sp, #8]
 800afd6:	2200      	movs	r2, #0
 800afd8:	2300      	movs	r3, #0
 800afda:	4630      	mov	r0, r6
 800afdc:	4639      	mov	r1, r7
 800afde:	f7f5 fd17 	bl	8000a10 <__aeabi_dcmpeq>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	f000 80b4 	beq.w	800b150 <__kernel_rem_pio2+0x3e8>
 800afe8:	f104 3bff 	add.w	fp, r4, #4294967295
 800afec:	465b      	mov	r3, fp
 800afee:	2200      	movs	r2, #0
 800aff0:	9904      	ldr	r1, [sp, #16]
 800aff2:	428b      	cmp	r3, r1
 800aff4:	da65      	bge.n	800b0c2 <__kernel_rem_pio2+0x35a>
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	d07b      	beq.n	800b0f2 <__kernel_rem_pio2+0x38a>
 800affa:	ab0c      	add	r3, sp, #48	; 0x30
 800affc:	f1aa 0a18 	sub.w	sl, sl, #24
 800b000:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 80a0 	beq.w	800b14a <__kernel_rem_pio2+0x3e2>
 800b00a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b090 <__kernel_rem_pio2+0x328>
 800b00e:	4650      	mov	r0, sl
 800b010:	f000 fbca 	bl	800b7a8 <scalbn>
 800b014:	4f23      	ldr	r7, [pc, #140]	; (800b0a4 <__kernel_rem_pio2+0x33c>)
 800b016:	ec55 4b10 	vmov	r4, r5, d0
 800b01a:	46d8      	mov	r8, fp
 800b01c:	2600      	movs	r6, #0
 800b01e:	f1b8 0f00 	cmp.w	r8, #0
 800b022:	f280 80cf 	bge.w	800b1c4 <__kernel_rem_pio2+0x45c>
 800b026:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b088 <__kernel_rem_pio2+0x320>
 800b02a:	465f      	mov	r7, fp
 800b02c:	f04f 0800 	mov.w	r8, #0
 800b030:	2f00      	cmp	r7, #0
 800b032:	f2c0 80fd 	blt.w	800b230 <__kernel_rem_pio2+0x4c8>
 800b036:	ab70      	add	r3, sp, #448	; 0x1c0
 800b038:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b0b0 <__kernel_rem_pio2+0x348>
 800b03c:	ec55 4b18 	vmov	r4, r5, d8
 800b040:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b044:	2600      	movs	r6, #0
 800b046:	e0e5      	b.n	800b214 <__kernel_rem_pio2+0x4ac>
 800b048:	2302      	movs	r3, #2
 800b04a:	9302      	str	r3, [sp, #8]
 800b04c:	e75c      	b.n	800af08 <__kernel_rem_pio2+0x1a0>
 800b04e:	f8db 3000 	ldr.w	r3, [fp]
 800b052:	b955      	cbnz	r5, 800b06a <__kernel_rem_pio2+0x302>
 800b054:	b123      	cbz	r3, 800b060 <__kernel_rem_pio2+0x2f8>
 800b056:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b05a:	f8cb 3000 	str.w	r3, [fp]
 800b05e:	2301      	movs	r3, #1
 800b060:	3201      	adds	r2, #1
 800b062:	f10b 0b04 	add.w	fp, fp, #4
 800b066:	461d      	mov	r5, r3
 800b068:	e755      	b.n	800af16 <__kernel_rem_pio2+0x1ae>
 800b06a:	1acb      	subs	r3, r1, r3
 800b06c:	f8cb 3000 	str.w	r3, [fp]
 800b070:	462b      	mov	r3, r5
 800b072:	e7f5      	b.n	800b060 <__kernel_rem_pio2+0x2f8>
 800b074:	1e62      	subs	r2, r4, #1
 800b076:	ab0c      	add	r3, sp, #48	; 0x30
 800b078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b080:	a90c      	add	r1, sp, #48	; 0x30
 800b082:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b086:	e754      	b.n	800af32 <__kernel_rem_pio2+0x1ca>
	...
 800b094:	3ff00000 	.word	0x3ff00000
 800b098:	0800bba8 	.word	0x0800bba8
 800b09c:	40200000 	.word	0x40200000
 800b0a0:	3ff00000 	.word	0x3ff00000
 800b0a4:	3e700000 	.word	0x3e700000
 800b0a8:	41700000 	.word	0x41700000
 800b0ac:	3fe00000 	.word	0x3fe00000
 800b0b0:	0800bb68 	.word	0x0800bb68
 800b0b4:	1e62      	subs	r2, r4, #1
 800b0b6:	ab0c      	add	r3, sp, #48	; 0x30
 800b0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b0c0:	e7de      	b.n	800b080 <__kernel_rem_pio2+0x318>
 800b0c2:	a90c      	add	r1, sp, #48	; 0x30
 800b0c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	e790      	b.n	800aff0 <__kernel_rem_pio2+0x288>
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b0d4:	2900      	cmp	r1, #0
 800b0d6:	d0fa      	beq.n	800b0ce <__kernel_rem_pio2+0x366>
 800b0d8:	9a08      	ldr	r2, [sp, #32]
 800b0da:	18e3      	adds	r3, r4, r3
 800b0dc:	18a6      	adds	r6, r4, r2
 800b0de:	aa20      	add	r2, sp, #128	; 0x80
 800b0e0:	1c65      	adds	r5, r4, #1
 800b0e2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b0e6:	9302      	str	r3, [sp, #8]
 800b0e8:	9b02      	ldr	r3, [sp, #8]
 800b0ea:	42ab      	cmp	r3, r5
 800b0ec:	da04      	bge.n	800b0f8 <__kernel_rem_pio2+0x390>
 800b0ee:	461c      	mov	r4, r3
 800b0f0:	e6b5      	b.n	800ae5e <__kernel_rem_pio2+0xf6>
 800b0f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e7eb      	b.n	800b0d0 <__kernel_rem_pio2+0x368>
 800b0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0fe:	f7f5 f9b5 	bl	800046c <__aeabi_i2d>
 800b102:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b108:	46b3      	mov	fp, r6
 800b10a:	461c      	mov	r4, r3
 800b10c:	2700      	movs	r7, #0
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	f04f 0900 	mov.w	r9, #0
 800b116:	9b06      	ldr	r3, [sp, #24]
 800b118:	429f      	cmp	r7, r3
 800b11a:	dd06      	ble.n	800b12a <__kernel_rem_pio2+0x3c2>
 800b11c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b11e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b122:	e9c3 8900 	strd	r8, r9, [r3]
 800b126:	3501      	adds	r5, #1
 800b128:	e7de      	b.n	800b0e8 <__kernel_rem_pio2+0x380>
 800b12a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b12e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b132:	f7f5 fa05 	bl	8000540 <__aeabi_dmul>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4640      	mov	r0, r8
 800b13c:	4649      	mov	r1, r9
 800b13e:	f7f5 f849 	bl	80001d4 <__adddf3>
 800b142:	3701      	adds	r7, #1
 800b144:	4680      	mov	r8, r0
 800b146:	4689      	mov	r9, r1
 800b148:	e7e5      	b.n	800b116 <__kernel_rem_pio2+0x3ae>
 800b14a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b14e:	e754      	b.n	800affa <__kernel_rem_pio2+0x292>
 800b150:	ec47 6b10 	vmov	d0, r6, r7
 800b154:	f1ca 0000 	rsb	r0, sl, #0
 800b158:	f000 fb26 	bl	800b7a8 <scalbn>
 800b15c:	ec57 6b10 	vmov	r6, r7, d0
 800b160:	4b9f      	ldr	r3, [pc, #636]	; (800b3e0 <__kernel_rem_pio2+0x678>)
 800b162:	ee10 0a10 	vmov	r0, s0
 800b166:	2200      	movs	r2, #0
 800b168:	4639      	mov	r1, r7
 800b16a:	f7f5 fc6f 	bl	8000a4c <__aeabi_dcmpge>
 800b16e:	b300      	cbz	r0, 800b1b2 <__kernel_rem_pio2+0x44a>
 800b170:	4b9c      	ldr	r3, [pc, #624]	; (800b3e4 <__kernel_rem_pio2+0x67c>)
 800b172:	2200      	movs	r2, #0
 800b174:	4630      	mov	r0, r6
 800b176:	4639      	mov	r1, r7
 800b178:	f7f5 f9e2 	bl	8000540 <__aeabi_dmul>
 800b17c:	f7f5 fc90 	bl	8000aa0 <__aeabi_d2iz>
 800b180:	4605      	mov	r5, r0
 800b182:	f7f5 f973 	bl	800046c <__aeabi_i2d>
 800b186:	4b96      	ldr	r3, [pc, #600]	; (800b3e0 <__kernel_rem_pio2+0x678>)
 800b188:	2200      	movs	r2, #0
 800b18a:	f7f5 f9d9 	bl	8000540 <__aeabi_dmul>
 800b18e:	460b      	mov	r3, r1
 800b190:	4602      	mov	r2, r0
 800b192:	4639      	mov	r1, r7
 800b194:	4630      	mov	r0, r6
 800b196:	f7f5 f81b 	bl	80001d0 <__aeabi_dsub>
 800b19a:	f7f5 fc81 	bl	8000aa0 <__aeabi_d2iz>
 800b19e:	f104 0b01 	add.w	fp, r4, #1
 800b1a2:	ab0c      	add	r3, sp, #48	; 0x30
 800b1a4:	f10a 0a18 	add.w	sl, sl, #24
 800b1a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b1ac:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b1b0:	e72b      	b.n	800b00a <__kernel_rem_pio2+0x2a2>
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	f7f5 fc73 	bl	8000aa0 <__aeabi_d2iz>
 800b1ba:	ab0c      	add	r3, sp, #48	; 0x30
 800b1bc:	46a3      	mov	fp, r4
 800b1be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b1c2:	e722      	b.n	800b00a <__kernel_rem_pio2+0x2a2>
 800b1c4:	ab70      	add	r3, sp, #448	; 0x1c0
 800b1c6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b1ca:	ab0c      	add	r3, sp, #48	; 0x30
 800b1cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b1d0:	f7f5 f94c 	bl	800046c <__aeabi_i2d>
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	462b      	mov	r3, r5
 800b1d8:	f7f5 f9b2 	bl	8000540 <__aeabi_dmul>
 800b1dc:	4632      	mov	r2, r6
 800b1de:	e9c9 0100 	strd	r0, r1, [r9]
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f7f5 f9aa 	bl	8000540 <__aeabi_dmul>
 800b1ec:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	460d      	mov	r5, r1
 800b1f4:	e713      	b.n	800b01e <__kernel_rem_pio2+0x2b6>
 800b1f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b1fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b1fe:	f7f5 f99f 	bl	8000540 <__aeabi_dmul>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	4620      	mov	r0, r4
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f4 ffe3 	bl	80001d4 <__adddf3>
 800b20e:	3601      	adds	r6, #1
 800b210:	4604      	mov	r4, r0
 800b212:	460d      	mov	r5, r1
 800b214:	9b04      	ldr	r3, [sp, #16]
 800b216:	429e      	cmp	r6, r3
 800b218:	dc01      	bgt.n	800b21e <__kernel_rem_pio2+0x4b6>
 800b21a:	45b0      	cmp	r8, r6
 800b21c:	daeb      	bge.n	800b1f6 <__kernel_rem_pio2+0x48e>
 800b21e:	ab48      	add	r3, sp, #288	; 0x120
 800b220:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b224:	e9c3 4500 	strd	r4, r5, [r3]
 800b228:	3f01      	subs	r7, #1
 800b22a:	f108 0801 	add.w	r8, r8, #1
 800b22e:	e6ff      	b.n	800b030 <__kernel_rem_pio2+0x2c8>
 800b230:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b232:	2b02      	cmp	r3, #2
 800b234:	dc0b      	bgt.n	800b24e <__kernel_rem_pio2+0x4e6>
 800b236:	2b00      	cmp	r3, #0
 800b238:	dc6e      	bgt.n	800b318 <__kernel_rem_pio2+0x5b0>
 800b23a:	d045      	beq.n	800b2c8 <__kernel_rem_pio2+0x560>
 800b23c:	9b07      	ldr	r3, [sp, #28]
 800b23e:	f003 0007 	and.w	r0, r3, #7
 800b242:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b246:	ecbd 8b02 	vpop	{d8}
 800b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b250:	2b03      	cmp	r3, #3
 800b252:	d1f3      	bne.n	800b23c <__kernel_rem_pio2+0x4d4>
 800b254:	ab48      	add	r3, sp, #288	; 0x120
 800b256:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b25a:	46d0      	mov	r8, sl
 800b25c:	46d9      	mov	r9, fp
 800b25e:	f1b9 0f00 	cmp.w	r9, #0
 800b262:	f1a8 0808 	sub.w	r8, r8, #8
 800b266:	dc64      	bgt.n	800b332 <__kernel_rem_pio2+0x5ca>
 800b268:	465c      	mov	r4, fp
 800b26a:	2c01      	cmp	r4, #1
 800b26c:	f1aa 0a08 	sub.w	sl, sl, #8
 800b270:	dc7e      	bgt.n	800b370 <__kernel_rem_pio2+0x608>
 800b272:	2000      	movs	r0, #0
 800b274:	2100      	movs	r1, #0
 800b276:	f1bb 0f01 	cmp.w	fp, #1
 800b27a:	f300 8097 	bgt.w	800b3ac <__kernel_rem_pio2+0x644>
 800b27e:	9b02      	ldr	r3, [sp, #8]
 800b280:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b284:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f040 8099 	bne.w	800b3c0 <__kernel_rem_pio2+0x658>
 800b28e:	9b01      	ldr	r3, [sp, #4]
 800b290:	e9c3 5600 	strd	r5, r6, [r3]
 800b294:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b298:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b29c:	e7ce      	b.n	800b23c <__kernel_rem_pio2+0x4d4>
 800b29e:	ab48      	add	r3, sp, #288	; 0x120
 800b2a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f7f4 ff94 	bl	80001d4 <__adddf3>
 800b2ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2b0:	f1bb 0f00 	cmp.w	fp, #0
 800b2b4:	daf3      	bge.n	800b29e <__kernel_rem_pio2+0x536>
 800b2b6:	9b02      	ldr	r3, [sp, #8]
 800b2b8:	b113      	cbz	r3, 800b2c0 <__kernel_rem_pio2+0x558>
 800b2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2be:	4619      	mov	r1, r3
 800b2c0:	9b01      	ldr	r3, [sp, #4]
 800b2c2:	e9c3 0100 	strd	r0, r1, [r3]
 800b2c6:	e7b9      	b.n	800b23c <__kernel_rem_pio2+0x4d4>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	e7f0      	b.n	800b2b0 <__kernel_rem_pio2+0x548>
 800b2ce:	ab48      	add	r3, sp, #288	; 0x120
 800b2d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f7f4 ff7c 	bl	80001d4 <__adddf3>
 800b2dc:	3c01      	subs	r4, #1
 800b2de:	2c00      	cmp	r4, #0
 800b2e0:	daf5      	bge.n	800b2ce <__kernel_rem_pio2+0x566>
 800b2e2:	9b02      	ldr	r3, [sp, #8]
 800b2e4:	b1e3      	cbz	r3, 800b320 <__kernel_rem_pio2+0x5b8>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2ec:	9c01      	ldr	r4, [sp, #4]
 800b2ee:	e9c4 2300 	strd	r2, r3, [r4]
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b2fa:	f7f4 ff69 	bl	80001d0 <__aeabi_dsub>
 800b2fe:	ad4a      	add	r5, sp, #296	; 0x128
 800b300:	2401      	movs	r4, #1
 800b302:	45a3      	cmp	fp, r4
 800b304:	da0f      	bge.n	800b326 <__kernel_rem_pio2+0x5be>
 800b306:	9b02      	ldr	r3, [sp, #8]
 800b308:	b113      	cbz	r3, 800b310 <__kernel_rem_pio2+0x5a8>
 800b30a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b30e:	4619      	mov	r1, r3
 800b310:	9b01      	ldr	r3, [sp, #4]
 800b312:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b316:	e791      	b.n	800b23c <__kernel_rem_pio2+0x4d4>
 800b318:	465c      	mov	r4, fp
 800b31a:	2000      	movs	r0, #0
 800b31c:	2100      	movs	r1, #0
 800b31e:	e7de      	b.n	800b2de <__kernel_rem_pio2+0x576>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	e7e2      	b.n	800b2ec <__kernel_rem_pio2+0x584>
 800b326:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b32a:	f7f4 ff53 	bl	80001d4 <__adddf3>
 800b32e:	3401      	adds	r4, #1
 800b330:	e7e7      	b.n	800b302 <__kernel_rem_pio2+0x59a>
 800b332:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b336:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b33a:	4620      	mov	r0, r4
 800b33c:	4632      	mov	r2, r6
 800b33e:	463b      	mov	r3, r7
 800b340:	4629      	mov	r1, r5
 800b342:	f7f4 ff47 	bl	80001d4 <__adddf3>
 800b346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4620      	mov	r0, r4
 800b350:	4629      	mov	r1, r5
 800b352:	f7f4 ff3d 	bl	80001d0 <__aeabi_dsub>
 800b356:	4632      	mov	r2, r6
 800b358:	463b      	mov	r3, r7
 800b35a:	f7f4 ff3b 	bl	80001d4 <__adddf3>
 800b35e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b362:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b366:	ed88 7b00 	vstr	d7, [r8]
 800b36a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b36e:	e776      	b.n	800b25e <__kernel_rem_pio2+0x4f6>
 800b370:	e9da 8900 	ldrd	r8, r9, [sl]
 800b374:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b378:	4640      	mov	r0, r8
 800b37a:	4632      	mov	r2, r6
 800b37c:	463b      	mov	r3, r7
 800b37e:	4649      	mov	r1, r9
 800b380:	f7f4 ff28 	bl	80001d4 <__adddf3>
 800b384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4640      	mov	r0, r8
 800b38e:	4649      	mov	r1, r9
 800b390:	f7f4 ff1e 	bl	80001d0 <__aeabi_dsub>
 800b394:	4632      	mov	r2, r6
 800b396:	463b      	mov	r3, r7
 800b398:	f7f4 ff1c 	bl	80001d4 <__adddf3>
 800b39c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b3a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b3a4:	ed8a 7b00 	vstr	d7, [sl]
 800b3a8:	3c01      	subs	r4, #1
 800b3aa:	e75e      	b.n	800b26a <__kernel_rem_pio2+0x502>
 800b3ac:	ab48      	add	r3, sp, #288	; 0x120
 800b3ae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	f7f4 ff0d 	bl	80001d4 <__adddf3>
 800b3ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3be:	e75a      	b.n	800b276 <__kernel_rem_pio2+0x50e>
 800b3c0:	9b01      	ldr	r3, [sp, #4]
 800b3c2:	9a01      	ldr	r2, [sp, #4]
 800b3c4:	601d      	str	r5, [r3, #0]
 800b3c6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b3ca:	605c      	str	r4, [r3, #4]
 800b3cc:	609f      	str	r7, [r3, #8]
 800b3ce:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b3d2:	60d3      	str	r3, [r2, #12]
 800b3d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3d8:	6110      	str	r0, [r2, #16]
 800b3da:	6153      	str	r3, [r2, #20]
 800b3dc:	e72e      	b.n	800b23c <__kernel_rem_pio2+0x4d4>
 800b3de:	bf00      	nop
 800b3e0:	41700000 	.word	0x41700000
 800b3e4:	3e700000 	.word	0x3e700000

0800b3e8 <__kernel_sin>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	ed2d 8b04 	vpush	{d8-d9}
 800b3f0:	eeb0 8a41 	vmov.f32	s16, s2
 800b3f4:	eef0 8a61 	vmov.f32	s17, s3
 800b3f8:	ec55 4b10 	vmov	r4, r5, d0
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b402:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b406:	9001      	str	r0, [sp, #4]
 800b408:	da06      	bge.n	800b418 <__kernel_sin+0x30>
 800b40a:	ee10 0a10 	vmov	r0, s0
 800b40e:	4629      	mov	r1, r5
 800b410:	f7f5 fb46 	bl	8000aa0 <__aeabi_d2iz>
 800b414:	2800      	cmp	r0, #0
 800b416:	d051      	beq.n	800b4bc <__kernel_sin+0xd4>
 800b418:	4622      	mov	r2, r4
 800b41a:	462b      	mov	r3, r5
 800b41c:	4620      	mov	r0, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	f7f5 f88e 	bl	8000540 <__aeabi_dmul>
 800b424:	4682      	mov	sl, r0
 800b426:	468b      	mov	fp, r1
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4620      	mov	r0, r4
 800b42e:	4629      	mov	r1, r5
 800b430:	f7f5 f886 	bl	8000540 <__aeabi_dmul>
 800b434:	a341      	add	r3, pc, #260	; (adr r3, 800b53c <__kernel_sin+0x154>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	4680      	mov	r8, r0
 800b43c:	4689      	mov	r9, r1
 800b43e:	4650      	mov	r0, sl
 800b440:	4659      	mov	r1, fp
 800b442:	f7f5 f87d 	bl	8000540 <__aeabi_dmul>
 800b446:	a33f      	add	r3, pc, #252	; (adr r3, 800b544 <__kernel_sin+0x15c>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	f7f4 fec0 	bl	80001d0 <__aeabi_dsub>
 800b450:	4652      	mov	r2, sl
 800b452:	465b      	mov	r3, fp
 800b454:	f7f5 f874 	bl	8000540 <__aeabi_dmul>
 800b458:	a33c      	add	r3, pc, #240	; (adr r3, 800b54c <__kernel_sin+0x164>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f7f4 feb9 	bl	80001d4 <__adddf3>
 800b462:	4652      	mov	r2, sl
 800b464:	465b      	mov	r3, fp
 800b466:	f7f5 f86b 	bl	8000540 <__aeabi_dmul>
 800b46a:	a33a      	add	r3, pc, #232	; (adr r3, 800b554 <__kernel_sin+0x16c>)
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f7f4 feae 	bl	80001d0 <__aeabi_dsub>
 800b474:	4652      	mov	r2, sl
 800b476:	465b      	mov	r3, fp
 800b478:	f7f5 f862 	bl	8000540 <__aeabi_dmul>
 800b47c:	a337      	add	r3, pc, #220	; (adr r3, 800b55c <__kernel_sin+0x174>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	f7f4 fea7 	bl	80001d4 <__adddf3>
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	4606      	mov	r6, r0
 800b48a:	460f      	mov	r7, r1
 800b48c:	b9eb      	cbnz	r3, 800b4ca <__kernel_sin+0xe2>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	4650      	mov	r0, sl
 800b494:	4659      	mov	r1, fp
 800b496:	f7f5 f853 	bl	8000540 <__aeabi_dmul>
 800b49a:	a325      	add	r3, pc, #148	; (adr r3, 800b530 <__kernel_sin+0x148>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 fe96 	bl	80001d0 <__aeabi_dsub>
 800b4a4:	4642      	mov	r2, r8
 800b4a6:	464b      	mov	r3, r9
 800b4a8:	f7f5 f84a 	bl	8000540 <__aeabi_dmul>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f4 fe8e 	bl	80001d4 <__adddf3>
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	460d      	mov	r5, r1
 800b4bc:	ec45 4b10 	vmov	d0, r4, r5
 800b4c0:	b003      	add	sp, #12
 800b4c2:	ecbd 8b04 	vpop	{d8-d9}
 800b4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ca:	4b1b      	ldr	r3, [pc, #108]	; (800b538 <__kernel_sin+0x150>)
 800b4cc:	ec51 0b18 	vmov	r0, r1, d8
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f7f5 f835 	bl	8000540 <__aeabi_dmul>
 800b4d6:	4632      	mov	r2, r6
 800b4d8:	ec41 0b19 	vmov	d9, r0, r1
 800b4dc:	463b      	mov	r3, r7
 800b4de:	4640      	mov	r0, r8
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	f7f5 f82d 	bl	8000540 <__aeabi_dmul>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	ec51 0b19 	vmov	r0, r1, d9
 800b4ee:	f7f4 fe6f 	bl	80001d0 <__aeabi_dsub>
 800b4f2:	4652      	mov	r2, sl
 800b4f4:	465b      	mov	r3, fp
 800b4f6:	f7f5 f823 	bl	8000540 <__aeabi_dmul>
 800b4fa:	ec53 2b18 	vmov	r2, r3, d8
 800b4fe:	f7f4 fe67 	bl	80001d0 <__aeabi_dsub>
 800b502:	a30b      	add	r3, pc, #44	; (adr r3, 800b530 <__kernel_sin+0x148>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	4606      	mov	r6, r0
 800b50a:	460f      	mov	r7, r1
 800b50c:	4640      	mov	r0, r8
 800b50e:	4649      	mov	r1, r9
 800b510:	f7f5 f816 	bl	8000540 <__aeabi_dmul>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4630      	mov	r0, r6
 800b51a:	4639      	mov	r1, r7
 800b51c:	f7f4 fe5a 	bl	80001d4 <__adddf3>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	4620      	mov	r0, r4
 800b526:	4629      	mov	r1, r5
 800b528:	f7f4 fe52 	bl	80001d0 <__aeabi_dsub>
 800b52c:	e7c4      	b.n	800b4b8 <__kernel_sin+0xd0>
 800b52e:	bf00      	nop
 800b530:	55555549 	.word	0x55555549
 800b534:	3fc55555 	.word	0x3fc55555
 800b538:	3fe00000 	.word	0x3fe00000
 800b53c:	5acfd57c 	.word	0x5acfd57c
 800b540:	3de5d93a 	.word	0x3de5d93a
 800b544:	8a2b9ceb 	.word	0x8a2b9ceb
 800b548:	3e5ae5e6 	.word	0x3e5ae5e6
 800b54c:	57b1fe7d 	.word	0x57b1fe7d
 800b550:	3ec71de3 	.word	0x3ec71de3
 800b554:	19c161d5 	.word	0x19c161d5
 800b558:	3f2a01a0 	.word	0x3f2a01a0
 800b55c:	1110f8a6 	.word	0x1110f8a6
 800b560:	3f811111 	.word	0x3f811111

0800b564 <finite>:
 800b564:	b082      	sub	sp, #8
 800b566:	ed8d 0b00 	vstr	d0, [sp]
 800b56a:	9801      	ldr	r0, [sp, #4]
 800b56c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b570:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b574:	0fc0      	lsrs	r0, r0, #31
 800b576:	b002      	add	sp, #8
 800b578:	4770      	bx	lr
 800b57a:	0000      	movs	r0, r0
 800b57c:	0000      	movs	r0, r0
	...

0800b580 <floor>:
 800b580:	ec51 0b10 	vmov	r0, r1, d0
 800b584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b588:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b58c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b590:	2e13      	cmp	r6, #19
 800b592:	ee10 5a10 	vmov	r5, s0
 800b596:	ee10 8a10 	vmov	r8, s0
 800b59a:	460c      	mov	r4, r1
 800b59c:	dc32      	bgt.n	800b604 <floor+0x84>
 800b59e:	2e00      	cmp	r6, #0
 800b5a0:	da14      	bge.n	800b5cc <floor+0x4c>
 800b5a2:	a333      	add	r3, pc, #204	; (adr r3, 800b670 <floor+0xf0>)
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	f7f4 fe14 	bl	80001d4 <__adddf3>
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f7f5 fa56 	bl	8000a60 <__aeabi_dcmpgt>
 800b5b4:	b138      	cbz	r0, 800b5c6 <floor+0x46>
 800b5b6:	2c00      	cmp	r4, #0
 800b5b8:	da57      	bge.n	800b66a <floor+0xea>
 800b5ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b5be:	431d      	orrs	r5, r3
 800b5c0:	d001      	beq.n	800b5c6 <floor+0x46>
 800b5c2:	4c2d      	ldr	r4, [pc, #180]	; (800b678 <floor+0xf8>)
 800b5c4:	2500      	movs	r5, #0
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	e025      	b.n	800b618 <floor+0x98>
 800b5cc:	4f2b      	ldr	r7, [pc, #172]	; (800b67c <floor+0xfc>)
 800b5ce:	4137      	asrs	r7, r6
 800b5d0:	ea01 0307 	and.w	r3, r1, r7
 800b5d4:	4303      	orrs	r3, r0
 800b5d6:	d01f      	beq.n	800b618 <floor+0x98>
 800b5d8:	a325      	add	r3, pc, #148	; (adr r3, 800b670 <floor+0xf0>)
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	f7f4 fdf9 	bl	80001d4 <__adddf3>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f7f5 fa3b 	bl	8000a60 <__aeabi_dcmpgt>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d0eb      	beq.n	800b5c6 <floor+0x46>
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	bfbe      	ittt	lt
 800b5f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b5f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b5fa:	19a4      	addlt	r4, r4, r6
 800b5fc:	ea24 0407 	bic.w	r4, r4, r7
 800b600:	2500      	movs	r5, #0
 800b602:	e7e0      	b.n	800b5c6 <floor+0x46>
 800b604:	2e33      	cmp	r6, #51	; 0x33
 800b606:	dd0b      	ble.n	800b620 <floor+0xa0>
 800b608:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b60c:	d104      	bne.n	800b618 <floor+0x98>
 800b60e:	ee10 2a10 	vmov	r2, s0
 800b612:	460b      	mov	r3, r1
 800b614:	f7f4 fdde 	bl	80001d4 <__adddf3>
 800b618:	ec41 0b10 	vmov	d0, r0, r1
 800b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b620:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b624:	f04f 33ff 	mov.w	r3, #4294967295
 800b628:	fa23 f707 	lsr.w	r7, r3, r7
 800b62c:	4207      	tst	r7, r0
 800b62e:	d0f3      	beq.n	800b618 <floor+0x98>
 800b630:	a30f      	add	r3, pc, #60	; (adr r3, 800b670 <floor+0xf0>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f7f4 fdcd 	bl	80001d4 <__adddf3>
 800b63a:	2200      	movs	r2, #0
 800b63c:	2300      	movs	r3, #0
 800b63e:	f7f5 fa0f 	bl	8000a60 <__aeabi_dcmpgt>
 800b642:	2800      	cmp	r0, #0
 800b644:	d0bf      	beq.n	800b5c6 <floor+0x46>
 800b646:	2c00      	cmp	r4, #0
 800b648:	da02      	bge.n	800b650 <floor+0xd0>
 800b64a:	2e14      	cmp	r6, #20
 800b64c:	d103      	bne.n	800b656 <floor+0xd6>
 800b64e:	3401      	adds	r4, #1
 800b650:	ea25 0507 	bic.w	r5, r5, r7
 800b654:	e7b7      	b.n	800b5c6 <floor+0x46>
 800b656:	2301      	movs	r3, #1
 800b658:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b65c:	fa03 f606 	lsl.w	r6, r3, r6
 800b660:	4435      	add	r5, r6
 800b662:	4545      	cmp	r5, r8
 800b664:	bf38      	it	cc
 800b666:	18e4      	addcc	r4, r4, r3
 800b668:	e7f2      	b.n	800b650 <floor+0xd0>
 800b66a:	2500      	movs	r5, #0
 800b66c:	462c      	mov	r4, r5
 800b66e:	e7aa      	b.n	800b5c6 <floor+0x46>
 800b670:	8800759c 	.word	0x8800759c
 800b674:	7e37e43c 	.word	0x7e37e43c
 800b678:	bff00000 	.word	0xbff00000
 800b67c:	000fffff 	.word	0x000fffff

0800b680 <nan>:
 800b680:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b688 <nan+0x8>
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	00000000 	.word	0x00000000
 800b68c:	7ff80000 	.word	0x7ff80000

0800b690 <rint>:
 800b690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b692:	ec51 0b10 	vmov	r0, r1, d0
 800b696:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b69a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b69e:	2e13      	cmp	r6, #19
 800b6a0:	ee10 4a10 	vmov	r4, s0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b6aa:	dc58      	bgt.n	800b75e <rint+0xce>
 800b6ac:	2e00      	cmp	r6, #0
 800b6ae:	da2b      	bge.n	800b708 <rint+0x78>
 800b6b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b6b4:	4302      	orrs	r2, r0
 800b6b6:	d023      	beq.n	800b700 <rint+0x70>
 800b6b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b6bc:	4302      	orrs	r2, r0
 800b6be:	4254      	negs	r4, r2
 800b6c0:	4314      	orrs	r4, r2
 800b6c2:	0c4b      	lsrs	r3, r1, #17
 800b6c4:	0b24      	lsrs	r4, r4, #12
 800b6c6:	045b      	lsls	r3, r3, #17
 800b6c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b6cc:	ea44 0103 	orr.w	r1, r4, r3
 800b6d0:	4b32      	ldr	r3, [pc, #200]	; (800b79c <rint+0x10c>)
 800b6d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b6d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	4630      	mov	r0, r6
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	f7f4 fd77 	bl	80001d4 <__adddf3>
 800b6e6:	e9cd 0100 	strd	r0, r1, [sp]
 800b6ea:	463b      	mov	r3, r7
 800b6ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	f7f4 fd6d 	bl	80001d0 <__aeabi_dsub>
 800b6f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b6fe:	4639      	mov	r1, r7
 800b700:	ec41 0b10 	vmov	d0, r0, r1
 800b704:	b003      	add	sp, #12
 800b706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b708:	4a25      	ldr	r2, [pc, #148]	; (800b7a0 <rint+0x110>)
 800b70a:	4132      	asrs	r2, r6
 800b70c:	ea01 0702 	and.w	r7, r1, r2
 800b710:	4307      	orrs	r7, r0
 800b712:	d0f5      	beq.n	800b700 <rint+0x70>
 800b714:	0851      	lsrs	r1, r2, #1
 800b716:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800b71a:	4314      	orrs	r4, r2
 800b71c:	d00c      	beq.n	800b738 <rint+0xa8>
 800b71e:	ea23 0201 	bic.w	r2, r3, r1
 800b722:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b726:	2e13      	cmp	r6, #19
 800b728:	fa43 f606 	asr.w	r6, r3, r6
 800b72c:	bf0c      	ite	eq
 800b72e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b732:	2400      	movne	r4, #0
 800b734:	ea42 0306 	orr.w	r3, r2, r6
 800b738:	4918      	ldr	r1, [pc, #96]	; (800b79c <rint+0x10c>)
 800b73a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b73e:	4622      	mov	r2, r4
 800b740:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	f7f4 fd44 	bl	80001d4 <__adddf3>
 800b74c:	e9cd 0100 	strd	r0, r1, [sp]
 800b750:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b754:	4622      	mov	r2, r4
 800b756:	462b      	mov	r3, r5
 800b758:	f7f4 fd3a 	bl	80001d0 <__aeabi_dsub>
 800b75c:	e7d0      	b.n	800b700 <rint+0x70>
 800b75e:	2e33      	cmp	r6, #51	; 0x33
 800b760:	dd07      	ble.n	800b772 <rint+0xe2>
 800b762:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b766:	d1cb      	bne.n	800b700 <rint+0x70>
 800b768:	ee10 2a10 	vmov	r2, s0
 800b76c:	f7f4 fd32 	bl	80001d4 <__adddf3>
 800b770:	e7c6      	b.n	800b700 <rint+0x70>
 800b772:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b776:	f04f 36ff 	mov.w	r6, #4294967295
 800b77a:	40d6      	lsrs	r6, r2
 800b77c:	4230      	tst	r0, r6
 800b77e:	d0bf      	beq.n	800b700 <rint+0x70>
 800b780:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800b784:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800b788:	bf1f      	itttt	ne
 800b78a:	ea24 0101 	bicne.w	r1, r4, r1
 800b78e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b792:	fa44 f202 	asrne.w	r2, r4, r2
 800b796:	ea41 0402 	orrne.w	r4, r1, r2
 800b79a:	e7cd      	b.n	800b738 <rint+0xa8>
 800b79c:	0800bbb8 	.word	0x0800bbb8
 800b7a0:	000fffff 	.word	0x000fffff
 800b7a4:	00000000 	.word	0x00000000

0800b7a8 <scalbn>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	ec55 4b10 	vmov	r4, r5, d0
 800b7ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	b99a      	cbnz	r2, 800b7e0 <scalbn+0x38>
 800b7b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7bc:	4323      	orrs	r3, r4
 800b7be:	d036      	beq.n	800b82e <scalbn+0x86>
 800b7c0:	4b39      	ldr	r3, [pc, #228]	; (800b8a8 <scalbn+0x100>)
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	ee10 0a10 	vmov	r0, s0
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f7f4 feb9 	bl	8000540 <__aeabi_dmul>
 800b7ce:	4b37      	ldr	r3, [pc, #220]	; (800b8ac <scalbn+0x104>)
 800b7d0:	429e      	cmp	r6, r3
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	460d      	mov	r5, r1
 800b7d6:	da10      	bge.n	800b7fa <scalbn+0x52>
 800b7d8:	a32b      	add	r3, pc, #172	; (adr r3, 800b888 <scalbn+0xe0>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	e03a      	b.n	800b856 <scalbn+0xae>
 800b7e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b7e4:	428a      	cmp	r2, r1
 800b7e6:	d10c      	bne.n	800b802 <scalbn+0x5a>
 800b7e8:	ee10 2a10 	vmov	r2, s0
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	f7f4 fcf0 	bl	80001d4 <__adddf3>
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	e019      	b.n	800b82e <scalbn+0x86>
 800b7fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b7fe:	460b      	mov	r3, r1
 800b800:	3a36      	subs	r2, #54	; 0x36
 800b802:	4432      	add	r2, r6
 800b804:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b808:	428a      	cmp	r2, r1
 800b80a:	dd08      	ble.n	800b81e <scalbn+0x76>
 800b80c:	2d00      	cmp	r5, #0
 800b80e:	a120      	add	r1, pc, #128	; (adr r1, 800b890 <scalbn+0xe8>)
 800b810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b814:	da1c      	bge.n	800b850 <scalbn+0xa8>
 800b816:	a120      	add	r1, pc, #128	; (adr r1, 800b898 <scalbn+0xf0>)
 800b818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b81c:	e018      	b.n	800b850 <scalbn+0xa8>
 800b81e:	2a00      	cmp	r2, #0
 800b820:	dd08      	ble.n	800b834 <scalbn+0x8c>
 800b822:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b826:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b82a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b82e:	ec45 4b10 	vmov	d0, r4, r5
 800b832:	bd70      	pop	{r4, r5, r6, pc}
 800b834:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b838:	da19      	bge.n	800b86e <scalbn+0xc6>
 800b83a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b83e:	429e      	cmp	r6, r3
 800b840:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b844:	dd0a      	ble.n	800b85c <scalbn+0xb4>
 800b846:	a112      	add	r1, pc, #72	; (adr r1, 800b890 <scalbn+0xe8>)
 800b848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e2      	bne.n	800b816 <scalbn+0x6e>
 800b850:	a30f      	add	r3, pc, #60	; (adr r3, 800b890 <scalbn+0xe8>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fe73 	bl	8000540 <__aeabi_dmul>
 800b85a:	e7cb      	b.n	800b7f4 <scalbn+0x4c>
 800b85c:	a10a      	add	r1, pc, #40	; (adr r1, 800b888 <scalbn+0xe0>)
 800b85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0b8      	beq.n	800b7d8 <scalbn+0x30>
 800b866:	a10e      	add	r1, pc, #56	; (adr r1, 800b8a0 <scalbn+0xf8>)
 800b868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b86c:	e7b4      	b.n	800b7d8 <scalbn+0x30>
 800b86e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b872:	3236      	adds	r2, #54	; 0x36
 800b874:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b878:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b87c:	4620      	mov	r0, r4
 800b87e:	4b0c      	ldr	r3, [pc, #48]	; (800b8b0 <scalbn+0x108>)
 800b880:	2200      	movs	r2, #0
 800b882:	e7e8      	b.n	800b856 <scalbn+0xae>
 800b884:	f3af 8000 	nop.w
 800b888:	c2f8f359 	.word	0xc2f8f359
 800b88c:	01a56e1f 	.word	0x01a56e1f
 800b890:	8800759c 	.word	0x8800759c
 800b894:	7e37e43c 	.word	0x7e37e43c
 800b898:	8800759c 	.word	0x8800759c
 800b89c:	fe37e43c 	.word	0xfe37e43c
 800b8a0:	c2f8f359 	.word	0xc2f8f359
 800b8a4:	81a56e1f 	.word	0x81a56e1f
 800b8a8:	43500000 	.word	0x43500000
 800b8ac:	ffff3cb0 	.word	0xffff3cb0
 800b8b0:	3c900000 	.word	0x3c900000

0800b8b4 <_init>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	bf00      	nop
 800b8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ba:	bc08      	pop	{r3}
 800b8bc:	469e      	mov	lr, r3
 800b8be:	4770      	bx	lr

0800b8c0 <_fini>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	bf00      	nop
 800b8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c6:	bc08      	pop	{r3}
 800b8c8:	469e      	mov	lr, r3
 800b8ca:	4770      	bx	lr
